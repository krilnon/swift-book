{
  "abstract" : [
    {
      "text" : "Use the lowest-level components of the syntax.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure"
  },
  "kind" : "article",
  "metadata" : {
    "title" : "Lexical Structure"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "lexical structure",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " of Swift describes what sequence of characters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "form valid tokens of the language.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These valid tokens form the lowest-level building blocks of the language",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and are used to describe the rest of the language in subsequent chapters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A token consists of an identifier, keyword, punctuation, literal, or operator.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In most cases, tokens are generated from the characters of a Swift source file",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by considering the longest possible substring from the input text,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "within the constraints of the grammar that are specified below.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This behavior is referred to as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "longest match",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "maximal munch",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Whitespace-and-Comments",
          "level" : 2,
          "text" : "Whitespace and Comments",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Whitespace has two uses: to separate tokens in the source file",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to distinguish between prefix, postfix, and infix operators",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Operators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but is otherwise ignored.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The following characters are considered whitespace:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "space (U+0020),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "line feed (U+000A),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "carriage return (U+000D),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "horizontal tab (U+0009),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "vertical tab (U+000B),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "form feed (U+000C)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and null (U+0000).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Comments are treated as whitespace by the compiler.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Single line comments begin with ",
              "type" : "text"
            },
            {
              "code" : "\/\/",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and continue until a line feed (U+000A)  or carriage return (U+000D).",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Multiline comments begin with ",
              "type" : "text"
            },
            {
              "code" : "\/*",
              "type" : "codeVoice"
            },
            {
              "text" : " and end with ",
              "type" : "text"
            },
            {
              "code" : "*\/",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Nesting multiline comments is allowed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but the comment markers must be balanced.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Comments can contain additional formatting and markup,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/index.html",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "whitespace",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "whitespace-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "whitespace",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "whitespace-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "line-break",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "whitespace-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "inline-space",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "whitespace-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "comment",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "whitespace-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-comment",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "whitespace-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+0000, U+000B, or U+000C",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "line-break",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+000A",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "line-break",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+000D",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "line-break",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+000D followed by U+000A",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "inline-spaces",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "inline-space",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "inline-spaces",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "inline-space",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+0009 or U+0020",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "comment",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\/\/",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "comment-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "line-break",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-comment",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\/*",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-comment-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "*\/",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "comment-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "comment-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "comment-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "comment-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → Any Unicode scalar value except U+000A or U+000D",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-comment-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-comment-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-comment-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-comment-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-comment",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-comment-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "comment-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-comment-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → Any Unicode scalar value except  ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\/*",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " or  ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "*\/",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of whitespace",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Identifiers",
          "level" : 2,
          "text" : "Identifiers",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Identifiers",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " begin with",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an uppercase or lowercase letter A through Z,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an underscore (",
              "type" : "text"
            },
            {
              "code" : "_",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a noncombining alphanumeric Unicode character",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the Basic Multilingual Plane,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or a character outside the Basic Multilingual Plane",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that isn’t in a Private Use Area.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "After the first character,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "digits and combining Unicode characters are also allowed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Treat identifiers that begin with an underscore,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "subscripts whose first argument label begins with an underscore,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and initializers whose first argument label begins with an underscore,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as internal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even if their declaration has the ",
              "type" : "text"
            },
            {
              "code" : "public",
              "type" : "codeVoice"
            },
            {
              "text" : " access-level modifier.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This convention lets framework authors mark part of an API",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that clients must not interact with or depend on,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even though some limitation requires the declaration to be public.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In addition,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "identifiers that begin with two underscores",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are reserved for the Swift compiler and standard library.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To use a reserved word as an identifier,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "put a backtick (`) before and after it.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, ",
              "type" : "text"
            },
            {
              "code" : "class",
              "type" : "codeVoice"
            },
            {
              "text" : " isn’t a valid identifier,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but `",
              "type" : "text"
            },
            {
              "code" : "class",
              "type" : "codeVoice"
            },
            {
              "text" : "` is valid.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The backticks aren’t considered part of the identifier;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "`",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : "` and ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : " have the same meaning.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Inside a closure with no explicit parameter names,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the parameters are implicitly named ",
              "type" : "text"
            },
            {
              "code" : "$0",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "$1",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "$2",
              "type" : "codeVoice"
            },
            {
              "text" : ", and so on.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These names are valid identifiers within the scope of the closure.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The compiler synthesizes identifiers that begin with a dollar sign (",
              "type" : "text"
            },
            {
              "code" : "$",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for properties that have a property wrapper projection.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Your code can interact with these identifiers,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but you can’t declare identifiers with that prefix.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more information, see the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#propertyWrapper",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " section",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " chapter.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "`",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "`",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "implicit-parameter-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "property-wrapper-projection",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → Upper- or lowercase letter A through Z",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "_",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+00A8, U+00AA, U+00AD, U+00AF, U+00B2–U+00B5, or U+00B7–U+00BA",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+00BC–U+00BE, U+00C0–U+00D6, U+00D8–U+00F6, or U+00F8–U+00FF",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+0100–U+02FF, U+0370–U+167F, U+1681–U+180D, or U+180F–U+1DBF",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+1E00–U+1FFF",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+200B–U+200D, U+202A–U+202E, U+203F–U+2040, U+2054, or U+2060–U+206F",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+2070–U+20CF, U+2100–U+218F, U+2460–U+24FF, or U+2776–U+2793",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+2C00–U+2DFF or U+2E80–U+2FFF",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+3004–U+3007, U+3021–U+302F, U+3031–U+303F, or U+3040–U+D7FF",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+F900–U+FD3D, U+FD40–U+FDCF, U+FDF0–U+FE1F, or U+FE30–U+FE44",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+FE47–U+FFFD",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+10000–U+1FFFD, U+20000–U+2FFFD, U+30000–U+3FFFD, or U+40000–U+4FFFD",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+50000–U+5FFFD, U+60000–U+6FFFD, U+70000–U+7FFFD, or U+80000–U+8FFFD",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+90000–U+9FFFD, U+A0000–U+AFFFD, U+B0000–U+BFFFD, or U+C0000–U+CFFFD",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+D0000–U+DFFFD or U+E0000–U+EFFFD",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → Digit 0 through 9",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+0300–U+036F, U+1DC0–U+1DFF, U+20D0–U+20FF, or U+FE20–U+FE2F",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "implicit-parameter-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "$",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "property-wrapper-projection",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "$",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of an identifier",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Keywords-and-Punctuation",
          "level" : 2,
          "text" : "Keywords and Punctuation",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following keywords are reserved and can’t be used as identifiers,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "unless they’re escaped with backticks,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described above in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Keywords other than ",
              "type" : "text"
            },
            {
              "code" : "inout",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "var",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be used as parameter names",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in a function declaration or function call",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without being escaped with backticks.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When a member has the same name as a keyword,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "references to that member don’t need to be escaped with backticks,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "except when there’s ambiguity between referring to the member",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and using the keyword —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example, ",
              "type" : "text"
            },
            {
              "code" : "self",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "Type",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "Protocol",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "have special meaning in an explicit member expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so they must be escaped with backticks in that context.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Keywords used in declarations:",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "associatedtype",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "class",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "deinit",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "enum",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "extension",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "fileprivate",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "func",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "import",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "init",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "inout",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "internal",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "let",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "open",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "operator",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "private",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "precedencegroup",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "protocol",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "public",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "rethrows",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "static",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "struct",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "subscript",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "typealias",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and ",
                      "type" : "text"
                    },
                    {
                      "code" : "var",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Keywords used in statements:",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "break",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "case",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "catch",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "continue",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "default",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "defer",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "do",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "else",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "fallthrough",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "for",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "guard",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "if",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "in",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "repeat",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "return",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "throw",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "switch",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "where",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and ",
                      "type" : "text"
                    },
                    {
                      "code" : "while",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Keywords used in expressions and types:",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "Any",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "as",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "await",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "catch",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "false",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "is",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "nil",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "rethrows",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "self",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "Self",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "super",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "throw",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "throws",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "true",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and ",
                      "type" : "text"
                    },
                    {
                      "code" : "try",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Keywords used in patterns:",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "_",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Keywords that begin with a number sign (",
                      "type" : "text"
                    },
                    {
                      "code" : "#",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "):",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#available",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#colorLiteral",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#column",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#dsohandle",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#elseif",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#else",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#endif",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#error",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#fileID",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#fileLiteral",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#filePath",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#file",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#function",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#if",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#imageLiteral",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#keyPath",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#line",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#selector",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "#sourceLocation",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and ",
                      "type" : "text"
                    },
                    {
                      "code" : "#warning",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Keywords reserved in particular contexts:",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "associativity",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "convenience",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "didSet",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "dynamic",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "final",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "get",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "indirect",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "infix",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "lazy",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "left",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "mutating",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "none",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "nonmutating",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "optional",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "override",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "postfix",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "precedence",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "prefix",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "Protocol",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "required",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "right",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "set",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "some",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "Type",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "unowned",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "weak",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and ",
                      "type" : "text"
                    },
                    {
                      "code" : "willSet",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "Outside the context in which they appear in the grammar,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "they can be used as identifiers.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following tokens are reserved as punctuation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can’t be used as custom operators:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "(",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : ")",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "{",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "}",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "[",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "]",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : ".",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : ",",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : ":",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : ";",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "=",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "@",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "#",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "&",
              "type" : "codeVoice"
            },
            {
              "text" : " (as a prefix operator), ",
              "type" : "text"
            },
            {
              "code" : "->",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "\\\\``, ",
              "type" : "codeVoice"
            },
            {
              "text" : "?",
              "type" : "text"
            },
            {
              "code" : ", and ",
              "type" : "codeVoice"
            },
            {
              "text" : "!` (as a postfix operator).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Literals",
          "level" : 2,
          "text" : "Literals",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "literal",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is the source code representation of a value of a type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as a number or string.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following are examples of literals:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "42               \/\/ Integer literal",
            "3.14159          \/\/ Floating-point literal",
            "\"Hello, world!\"  \/\/ String literal",
            "\/Hello, .*\/      \/\/ Regular expression literal",
            "true             \/\/ Boolean literal"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A literal doesn’t have a type on its own.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Instead, a literal is parsed as having infinite precision and Swift’s type inference",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "attempts to infer a type for the literal. For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the declaration ",
              "type" : "text"
            },
            {
              "code" : "let x: Int8 = 42",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift uses the explicit type annotation (",
              "type" : "text"
            },
            {
              "code" : ": Int8",
              "type" : "codeVoice"
            },
            {
              "text" : ") to infer",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that the type of the integer literal ",
              "type" : "text"
            },
            {
              "code" : "42",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "Int8",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If there isn’t suitable type information available,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift infers that the literal’s type is one of the default literal types",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "defined in the Swift standard library",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and listed in the table below.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When specifying the type annotation for a literal value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the annotation’s type must be a type that can be instantiated from that literal value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "That is, the type must conform to the Swift standard library protocols",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "listed in the table below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Default type",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Protocol",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Integer",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "Int",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "ExpressibleByIntegerLiteral",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Floating-point",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "Double",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "ExpressibleByFloatLiteral",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "String",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "String",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "ExpressibleByStringLiteral",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "ExpressibleByUnicodeScalarLiteral",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " for string literals that contain only a single Unicode scalar, ",
                      "type" : "text"
                    },
                    {
                      "code" : "ExpressibleByExtendedGraphemeClusterLiteral",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " for string literals that contain only a single extended grapheme cluster",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Regular expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "Regex",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "None",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Boolean",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "Bool",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "ExpressibleByBooleanLiteral",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, in the declaration ",
              "type" : "text"
            },
            {
              "code" : "let str = \"Hello, world\"",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the default inferred type of the string",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "literal ",
              "type" : "text"
            },
            {
              "code" : "\"Hello, world\"",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Also, ",
              "type" : "text"
            },
            {
              "code" : "Int8",
              "type" : "codeVoice"
            },
            {
              "text" : " conforms to the ",
              "type" : "text"
            },
            {
              "code" : "ExpressibleByIntegerLiteral",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and therefore it can be used in the type annotation for the integer literal ",
              "type" : "text"
            },
            {
              "code" : "42",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the declaration ",
              "type" : "text"
            },
            {
              "code" : "let x: Int8 = 42",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "numeric-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "string-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "regular-expression-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "boolean-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "nil-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "numeric-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "-",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "integer-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "-",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "floating-point-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "boolean-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "true",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "false",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "nil-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "nil",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a literal",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Integer-Literals",
          "level" : 3,
          "text" : "Integer Literals",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Integer literals",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " represent integer values of unspecified precision.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "By default, integer literals are expressed in decimal;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can specify an alternate base using a prefix.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Binary literals begin with ",
              "type" : "text"
            },
            {
              "code" : "0b",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "octal literals begin with ",
              "type" : "text"
            },
            {
              "code" : "0o",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and hexadecimal literals begin with ",
              "type" : "text"
            },
            {
              "code" : "0x",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Decimal literals contain the digits ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " through ",
              "type" : "text"
            },
            {
              "code" : "9",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Binary literals contain ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "octal literals contain ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " through ",
              "type" : "text"
            },
            {
              "code" : "7",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and hexadecimal literals contain ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " through ",
              "type" : "text"
            },
            {
              "code" : "9",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as well as ",
              "type" : "text"
            },
            {
              "code" : "A",
              "type" : "codeVoice"
            },
            {
              "text" : " through ",
              "type" : "text"
            },
            {
              "code" : "F",
              "type" : "codeVoice"
            },
            {
              "text" : " in upper- or lowercase.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Negative integers literals are expressed by prepending a minus sign (",
              "type" : "text"
            },
            {
              "code" : "-",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to an integer literal, as in ",
              "type" : "text"
            },
            {
              "code" : "-42",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Underscores (",
              "type" : "text"
            },
            {
              "code" : "_",
              "type" : "codeVoice"
            },
            {
              "text" : ") are allowed between digits for readability,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but they’re ignored and therefore don’t affect the value of the literal.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Integer literals can begin with leading zeros (",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but they’re likewise ignored and don’t affect the base or value of the literal.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unless otherwise specified,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the default inferred type of an integer literal is the Swift standard library type ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The Swift standard library also defines types for various sizes of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "signed and unsigned integers,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Integers",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "integer-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "binary-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "integer-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "octal-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "integer-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "integer-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "binary-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "0b",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "binary-digit",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "binary-literal-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "binary-digit",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → Digit 0 or 1",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "binary-literal-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "binary-digit",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "_",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "binary-literal-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "binary-literal-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "binary-literal-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "octal-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "0o",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "octal-digit",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "octal-literal-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "octal-digit",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → Digit 0 through 7",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "octal-literal-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "octal-digit",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "_",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "octal-literal-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "octal-literal-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "octal-literal-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digit",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-literal-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digit",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → Digit 0 through 9",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digit",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-literal-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digit",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "_",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-literal-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-literal-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-literal-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "0x",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-digit",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-literal-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-digit",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → Digit 0 through 9, a through f, or A through F",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-literal-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-digit",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "_",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-literal-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-literal-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-literal-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of an integer literal",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Floating-Point-Literals",
          "level" : 3,
          "text" : "Floating-Point Literals",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Floating-point literals",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " represent floating-point values of unspecified precision.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "By default, floating-point literals are expressed in decimal (with no prefix),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but they can also be expressed in hexadecimal (with a ",
              "type" : "text"
            },
            {
              "code" : "0x",
              "type" : "codeVoice"
            },
            {
              "text" : " prefix).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Decimal floating-point literals consist of a sequence of decimal digits",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by either a decimal fraction, a decimal exponent, or both.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The decimal fraction consists of a decimal point (",
              "type" : "text"
            },
            {
              "code" : ".",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by a sequence of decimal digits.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The exponent consists of an upper- or lowercase ",
              "type" : "text"
            },
            {
              "code" : "e",
              "type" : "codeVoice"
            },
            {
              "text" : " prefix",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by a sequence of decimal digits that indicates",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "what power of 10 the value preceding the ",
              "type" : "text"
            },
            {
              "code" : "e",
              "type" : "codeVoice"
            },
            {
              "text" : " is multiplied by.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, ",
              "type" : "text"
            },
            {
              "code" : "1.25e2",
              "type" : "codeVoice"
            },
            {
              "text" : " represents 1.25 x 10²,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which evaluates to ",
              "type" : "text"
            },
            {
              "code" : "125.0",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Similarly, ",
              "type" : "text"
            },
            {
              "code" : "1.25e-2",
              "type" : "codeVoice"
            },
            {
              "text" : " represents 1.25 x 10⁻²,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which evaluates to ",
              "type" : "text"
            },
            {
              "code" : "0.0125",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Hexadecimal floating-point literals consist of a ",
              "type" : "text"
            },
            {
              "code" : "0x",
              "type" : "codeVoice"
            },
            {
              "text" : " prefix,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by an optional hexadecimal fraction,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by a hexadecimal exponent.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The hexadecimal fraction consists of a decimal point",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by a sequence of hexadecimal digits.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The exponent consists of an upper- or lowercase ",
              "type" : "text"
            },
            {
              "code" : "p",
              "type" : "codeVoice"
            },
            {
              "text" : " prefix",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by a sequence of decimal digits that indicates",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "what power of 2 the value preceding the ",
              "type" : "text"
            },
            {
              "code" : "p",
              "type" : "codeVoice"
            },
            {
              "text" : " is multiplied by.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, ",
              "type" : "text"
            },
            {
              "code" : "0xFp2",
              "type" : "codeVoice"
            },
            {
              "text" : " represents 15 x 2²,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which evaluates to ",
              "type" : "text"
            },
            {
              "code" : "60",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Similarly, ",
              "type" : "text"
            },
            {
              "code" : "0xFp-2",
              "type" : "codeVoice"
            },
            {
              "text" : " represents 15 x 2⁻²,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which evaluates to ",
              "type" : "text"
            },
            {
              "code" : "3.75",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Negative floating-point literals are expressed by prepending a minus sign (",
              "type" : "text"
            },
            {
              "code" : "-",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to a floating-point literal, as in ",
              "type" : "text"
            },
            {
              "code" : "-42.5",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Underscores (",
              "type" : "text"
            },
            {
              "code" : "_",
              "type" : "codeVoice"
            },
            {
              "text" : ") are allowed between digits for readability,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but they’re ignored and therefore don’t affect the value of the literal.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Floating-point literals can begin with leading zeros (",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but they’re likewise ignored and don’t affect the base or value of the literal.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unless otherwise specified,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the default inferred type of a floating-point literal is the Swift standard library type ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which represents a 64-bit floating-point number.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The Swift standard library also defines a ",
              "type" : "text"
            },
            {
              "code" : "Float",
              "type" : "codeVoice"
            },
            {
              "text" : " type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which represents a 32-bit floating-point number.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "floating-point-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-fraction",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-exponent",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "floating-point-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-fraction",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-exponent",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-fraction",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-exponent",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "floating-point-e",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "sign",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-fraction",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-digit",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-literal-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "hexadecimal-exponent",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "floating-point-p",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "sign",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "floating-point-e",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "e",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "E",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "floating-point-p",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "p",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "P",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "sign",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "+",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "-",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a floating-point literal",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "String-Literals",
          "level" : 3,
          "text" : "String Literals",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A string literal is a sequence of characters surrounded by quotation marks.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A single-line string literal is surrounded by double quotation marks",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\"<#characters#>\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "String literals can’t contain",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an unescaped double quotation mark (",
              "type" : "text"
            },
            {
              "code" : "\"",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an unescaped backslash (",
              "type" : "text"
            },
            {
              "code" : "\\",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a carriage return, or a line feed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A multiline string literal is surrounded by three double quotation marks",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\"\"\"",
            "<#characters#>",
            "\"\"\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike a single-line string literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a multiline string literal can contain",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "unescaped double quotation marks (",
              "type" : "text"
            },
            {
              "code" : "\"",
              "type" : "codeVoice"
            },
            {
              "text" : "), carriage returns, and line feeds.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It can’t contain three unescaped double quotation marks next to each other.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The line break after the ",
              "type" : "text"
            },
            {
              "code" : "\"\"\"",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that begins the multiline string literal",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "isn’t part of the string.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The line break before the ",
              "type" : "text"
            },
            {
              "code" : "\"\"\"",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that ends the literal is also not part of the string.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To make a multiline string literal",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that begins or ends with a line feed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "write a blank line as its first or last line.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A multiline string literal can be indented",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using any combination of spaces and tabs;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this indentation isn’t included in the string.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "\"\"\"",
              "type" : "codeVoice"
            },
            {
              "text" : " that ends the literal",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "determines the indentation:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Every nonblank line in the literal must begin",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with exactly the same indentation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that appears before the closing ",
              "type" : "text"
            },
            {
              "code" : "\"\"\"",
              "type" : "codeVoice"
            },
            {
              "text" : ";",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "there’s no conversion between tabs and spaces.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can include additional spaces and tabs after that indentation;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "those spaces and tabs appear in the string.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Line breaks in a multiline string literal are",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "normalized to use the line feed character.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Even if your source file has a mix of carriage returns and line feeds,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "all of the line breaks in the string will be the same.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In a multiline string literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "writing a backslash (",
              "type" : "text"
            },
            {
              "code" : "\\",
              "type" : "codeVoice"
            },
            {
              "text" : ") at the end of a line",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "omits that line break from the string.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Any whitespace between the backslash and the line break",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is also omitted.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use this syntax",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to hard wrap a multiline string literal in your source code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without changing the value of the resulting string.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Special characters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be included in string literals",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of both the single-line and multiline forms",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using the following escape sequences:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Null character (",
                      "type" : "text"
                    },
                    {
                      "code" : "\\0",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Backslash (",
                      "type" : "text"
                    },
                    {
                      "code" : "\\\\",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Horizontal tab (",
                      "type" : "text"
                    },
                    {
                      "code" : "\\t",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Line feed (",
                      "type" : "text"
                    },
                    {
                      "code" : "\\n",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Carriage return (",
                      "type" : "text"
                    },
                    {
                      "code" : "\\r",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Double quotation mark (",
                      "type" : "text"
                    },
                    {
                      "code" : "\\\"",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Single quotation mark (",
                      "type" : "text"
                    },
                    {
                      "code" : "\\'",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Unicode scalar (",
                      "type" : "text"
                    },
                    {
                      "code" : "\\\\u{",
                      "type" : "codeVoice"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "n",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "code" : "}",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "),",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "where ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "n",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " is a hexadecimal number",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "that has one to eight digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "The value of an expression can be inserted into a string literal",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by placing the expression in parentheses after a backslash (",
              "type" : "text"
            },
            {
              "code" : "\\",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The interpolated expression can contain a string literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but can’t contain an unescaped backslash,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a carriage return, or a line feed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, all of the following string literals have the same value:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\"1 2 3\"",
            "\"1 2 \\(\"3\")\"",
            "\"1 2 \\(3)\"",
            "\"1 2 \\(1 + 2)\"",
            "let x = 3; \"1 2 \\(x)\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A string delimited by extended delimiters is a sequence of characters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "surrounded by quotation marks and a balanced set of one or more number signs (",
              "type" : "text"
            },
            {
              "code" : "#",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A string delimited by extended delimiters has the following forms:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "#\"<#characters#>\"#",
            "",
            "#\"\"\"",
            "<#characters#>",
            "\"\"\"#"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Special characters in a string delimited by extended delimiters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "appear in the resulting string as normal characters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "rather than as special characters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use extended delimiters to create strings with characters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that would ordinarily have a special effect",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as generating a string interpolation,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "starting an escape sequence,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or terminating the string.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following example shows a string literal",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a string delimited by extended delimiters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that create equivalent string values:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let string = #\"\\(x) \\ \" \\u{2603}\"#",
            "let escaped = \"\\\\(x) \\\\ \\\" \\\\u{2603}\"",
            "print(string)",
            "\/\/ Prints \"\\(x) \\ \" \\u{2603}\"",
            "print(string == escaped)",
            "\/\/ Prints \"true\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you use more than one number sign to form",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a string delimited by extended delimiters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "don’t place whitespace in between the number signs:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(###\"Line 1\\###nLine 2\"###) \/\/ OK",
            "print(# # #\"Line 1\\# # #nLine 2\"# # #) \/\/ Error"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Multiline string literals that you create using extended delimiters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "have the same indentation requirements as regular multiline string literals.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The default inferred type of a string literal is ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more information about the ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/string",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "String literals that are concatenated by the ",
              "type" : "text"
            },
            {
              "code" : "+",
              "type" : "codeVoice"
            },
            {
              "text" : " operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are concatenated at compile time.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, the values of ",
              "type" : "text"
            },
            {
              "code" : "textA",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "textB",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the example below are identical —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "no runtime concatenation is performed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let textA = \"Hello \" + \"world\"",
            "let textB = \"Hello world\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "string-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "static-string-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "interpolated-string-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "string-literal-opening-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "extended-string-literal-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\"",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "string-literal-closing-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\"",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "extended-string-literal-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "static-string-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "string-literal-opening-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "quoted-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "string-literal-closing-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "static-string-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-string-literal-opening-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-quoted-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-string-literal-closing-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-string-literal-opening-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "extended-string-literal-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\"\"\"",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-string-literal-closing-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\"\"\"",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "extended-string-literal-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "extended-string-literal-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "extended-string-literal-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "quoted-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "quoted-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "quoted-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "quoted-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "escaped-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "quoted-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → Any Unicode scalar value except  ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\"",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : ",  ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\\",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : ", U+000A, or U+000D",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-quoted-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-quoted-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-quoted-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-quoted-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "escaped-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-quoted-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → Any Unicode scalar value except  ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\\",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-quoted-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "escaped-newline",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "interpolated-string-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "string-literal-opening-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "interpolated-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "string-literal-closing-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "interpolated-string-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-string-literal-opening-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-interpolated-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-string-literal-closing-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "interpolated-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "interpolated-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "interpolated-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "interpolated-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\\(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "quoted-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-interpolated-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-interpolated-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-interpolated-text",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-interpolated-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\\(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "multiline-quoted-text-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "escape-sequence",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\\",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "extended-string-literal-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "escaped-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "escape-sequence",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "0",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "escape-sequence",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\\",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "escape-sequence",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "t",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "escape-sequence",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "n",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "escape-sequence",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "r",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "escape-sequence",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\"",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "escape-sequence",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "'",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "escaped-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "escape-sequence",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "u",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "{",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "unicode-scalar-digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "}",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "unicode-scalar-digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → Between one and eight hexadecimal digits",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "escaped-newline",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "escape-sequence",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "inline-spaces",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "line-break",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a string literal",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Regular-Expression-Literals",
          "level" : 3,
          "text" : "Regular Expression Literals",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A regular expression literal is a sequence of characters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "surrounded by slashes (",
              "type" : "text"
            },
            {
              "code" : "\/",
              "type" : "codeVoice"
            },
            {
              "text" : ") with the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/<#regular expression#>\/"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Regular expression literals",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must not begin with an unescaped tab or space,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and they can’t contain",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an unescaped slash (",
              "type" : "text"
            },
            {
              "code" : "\/",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a carriage return, or a line feed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Within a regular expression literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a backslash is understood as a part of that regular expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "not just as an escape character like in string literals.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It indicates that the following special character",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "should be interpreted literally,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or that the following nonspecial character",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "should be interpreted in a special way.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "\/\\(\/",
              "type" : "codeVoice"
            },
            {
              "text" : " matches a single left parenthesis",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "code" : "\/\\d\/",
              "type" : "codeVoice"
            },
            {
              "text" : " matches a single digit.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A regular expression literal delimited by extended delimiters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is a sequence of characters surrounded by slashes (",
              "type" : "text"
            },
            {
              "code" : "\/",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a balanced set of one or more number signs (",
              "type" : "text"
            },
            {
              "code" : "#",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A regular expression literal",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "delimited by extended delimiters has the following forms:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "#\/<#regular expression#>\/#",
            "",
            "#\/",
            "<#regular expression#>",
            "\/#"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A regular expression literal that uses extended delimiters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can begin with an unescaped space or tab,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "contain unescaped slashes (",
              "type" : "text"
            },
            {
              "code" : "\/",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and span across multiple lines.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For a multiline regular expression literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the opening delimiter must be at the end of a line,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the closing delimiter must be on its own line.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Inside a multiline regular expression literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the extended regular expression syntax is enabled by default —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "specifically, whitespace is ignored and comments are allowed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you use more than one number sign to form",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a regular expression literal delimited by extended delimiters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "don’t place whitespace in between the number signs:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let regex1 = ##\/abc\/##       \/\/ OK",
            "let regex2 = # #\/abc\/# #     \/\/ Error"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you need to make an empty regular expression literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you must use the extended delimiter syntax.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "regular-expression-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "regular-expression-literal-opening-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "regular-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "regular-expression-literal-closing-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "regular-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → Any regular expression",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "regular-expression-literal-opening-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "extended-regular-expression-literal-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\/",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "regular-expression-literal-closing-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\/",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "extended-regular-expression-literal-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "extended-regular-expression-literal-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "extended-regular-expression-literal-delimiter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a regular expression literal",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Operators",
          "level" : 2,
          "text" : "Operators",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The Swift standard library defines a number of operators for your use,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "many of which are discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The present section describes which characters can be used to define custom operators.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Custom operators can begin with one of the ASCII characters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "\/",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "=",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "-",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "+",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "!",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "*",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "%",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "<",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : ">",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "&",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "|",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "^",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "?",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "~",
              "type" : "codeVoice"
            },
            {
              "text" : ", or one of the Unicode characters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "defined in the grammar below",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(which include characters from the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Mathematical Operators",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Miscellaneous Symbols",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Dingbats",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Unicode blocks, among others).",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "After the first character,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "combining Unicode characters are also allowed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also define custom operators",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that begin with a dot (",
              "type" : "text"
            },
            {
              "code" : ".",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These operators can contain additional dots.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, ",
              "type" : "text"
            },
            {
              "code" : ".+.",
              "type" : "codeVoice"
            },
            {
              "text" : " is treated as a single operator.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If an operator doesn’t begin with a dot,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it can’t contain a dot elsewhere.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, ",
              "type" : "text"
            },
            {
              "code" : "+.+",
              "type" : "codeVoice"
            },
            {
              "text" : " is treated as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "+",
              "type" : "codeVoice"
            },
            {
              "text" : " operator followed by the ",
              "type" : "text"
            },
            {
              "code" : ".+",
              "type" : "codeVoice"
            },
            {
              "text" : " operator.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Although you can define custom operators that contain a question mark (",
              "type" : "text"
            },
            {
              "code" : "?",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "they can’t consist of a single question mark character only.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Additionally, although operators can contain an exclamation point (",
              "type" : "text"
            },
            {
              "code" : "!",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "postfix operators can’t begin with either a question mark or an exclamation point.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The tokens ",
                  "type" : "text"
                },
                {
                  "code" : "=",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "->",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "\/\/",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "\/*",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "*\/",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : ".",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the prefix operators ",
                  "type" : "text"
                },
                {
                  "code" : "<",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "&",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", and ",
                  "type" : "text"
                },
                {
                  "code" : "?",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the infix operator ",
                  "type" : "text"
                },
                {
                  "code" : "?",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and the postfix operators ",
                  "type" : "text"
                },
                {
                  "code" : ">",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "!",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", and ",
                  "type" : "text"
                },
                {
                  "code" : "?",
                  "type" : "codeVoice"
                },
                {
                  "text" : " are reserved.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "These tokens can’t be overloaded, nor can they be used as custom operators.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "The whitespace around an operator is used to determine",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whether an operator is used as a prefix operator, a postfix operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or an infix operator. This behavior has the following rules:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If an operator has whitespace around both sides or around neither side,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "it’s treated as an infix operator.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "As an example, the ",
                      "type" : "text"
                    },
                    {
                      "code" : "+++",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " operator in ",
                      "type" : "text"
                    },
                    {
                      "code" : "a+++b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " and ",
                      "type" : "text"
                    },
                    {
                      "code" : "a +++ b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is treated as an infix operator.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If an operator has whitespace on the left side only,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "it’s treated as a prefix unary operator.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "As an example, the ",
                      "type" : "text"
                    },
                    {
                      "code" : "+++",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " operator in ",
                      "type" : "text"
                    },
                    {
                      "code" : "a +++b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is treated as a prefix unary operator.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If an operator has whitespace on the right side only,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "it’s treated as a postfix unary operator.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "As an example, the ",
                      "type" : "text"
                    },
                    {
                      "code" : "+++",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " operator in ",
                      "type" : "text"
                    },
                    {
                      "code" : "a+++ b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is treated as a postfix unary operator.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If an operator has no whitespace on the left but is followed immediately by a dot (",
                      "type" : "text"
                    },
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "),",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "it’s treated as a postfix unary operator.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "As an example, the  ",
                      "type" : "text"
                    },
                    {
                      "code" : "+++",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " operator in ",
                      "type" : "text"
                    },
                    {
                      "code" : "a+++.b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is treated as a postfix unary operator",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "(",
                      "type" : "text"
                    },
                    {
                      "code" : "a+++ .b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " rather than ",
                      "type" : "text"
                    },
                    {
                      "code" : "a +++ .b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ").",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "For the purposes of these rules,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the characters ",
              "type" : "text"
            },
            {
              "code" : "(",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "[",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "{",
              "type" : "codeVoice"
            },
            {
              "text" : " before an operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the characters ",
              "type" : "text"
            },
            {
              "code" : ")",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "]",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "}",
              "type" : "codeVoice"
            },
            {
              "text" : " after an operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the characters ",
              "type" : "text"
            },
            {
              "code" : ",",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : ";",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : ":",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are also considered whitespace.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the ",
              "type" : "text"
            },
            {
              "code" : "!",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "?",
              "type" : "codeVoice"
            },
            {
              "text" : " predefined operator has no whitespace on the left,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s treated as a postfix operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "regardless of whether it has whitespace on the right.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To use the ",
              "type" : "text"
            },
            {
              "code" : "?",
              "type" : "codeVoice"
            },
            {
              "text" : " as the optional-chaining operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it must not have whitespace on the left.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To use it in the ternary conditional (",
              "type" : "text"
            },
            {
              "code" : "?",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : ":",
              "type" : "codeVoice"
            },
            {
              "text" : ") operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it must have whitespace around both sides.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If one of the arguments to an infix operator is a regular expression literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "then the operator must have whitespace around both sides.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In certain constructs, operators with a leading ",
              "type" : "text"
            },
            {
              "code" : "<",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : ">",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "may be split into two or more tokens. The remainder is treated the same way",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and may be split again.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As a result, you don’t need to add whitespace",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to disambiguate between the closing ",
              "type" : "text"
            },
            {
              "code" : ">",
              "type" : "codeVoice"
            },
            {
              "text" : " characters in constructs like",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Dictionary<String, Array<Int>>",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In this example, the closing ",
              "type" : "text"
            },
            {
              "code" : ">",
              "type" : "codeVoice"
            },
            {
              "text" : " characters aren’t treated as a single token",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that may then be misinterpreted as a bit shift ",
              "type" : "text"
            },
            {
              "code" : ">>",
              "type" : "codeVoice"
            },
            {
              "text" : " operator.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To learn how to define new, custom operators,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Custom-Operators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Operator-Declaration",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To learn how to overload existing operators,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Operator-Methods",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "dot-operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "dot-operator-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\/",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "=",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "-",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "+",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "!",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "*",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "%",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "<",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ">",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "&",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "|",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "^",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "~",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "?",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+00A1–U+00A7",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+00A9 or U+00AB",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+00AC or U+00AE",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+00B0–U+00B1",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+00B6, U+00BB, U+00BF, U+00D7, or U+00F7",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+2016–U+2017",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+2020–U+2027",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+2030–U+203E",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+2041–U+2053",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+2055–U+205E",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+2190–U+23FF",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+2500–U+2775",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+2794–U+2BFF",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+2E00–U+2E7F",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+3001–U+3003",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+3008–U+3020",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+3030",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+0300–U+036F",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+1DC0–U+1DFF",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+20D0–U+20FF",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+FE00–U+FE0F",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+FE20–U+FE2F",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → U+E0100–U+E01EF",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "dot-operator-head",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "dot-operator-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "operator-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "dot-operator-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "dot-operator-character",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "dot-operator-characters",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "infix-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "prefix-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of operators",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ]
, 
"references": {
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "article",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators": {
  "abstract" : [
    {
      "text" : "Define custom operators, perform bitwise operations, and use builder syntax.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators",
  "kind" : "article",
  "role" : "article",
  "title" : "Advanced Operators",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/advancedoperators"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Custom-Operators": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Custom-Operators",
  "kind" : "section",
  "title" : "Custom Operators",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/advancedoperators#Custom-Operators"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Operator-Methods": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Operator-Methods",
  "kind" : "section",
  "title" : "Operator Methods",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/advancedoperators#Operator-Methods"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes": {
  "abstract" : [
    {
      "text" : "Add information to declarations and types.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes",
  "kind" : "article",
  "role" : "article",
  "title" : "Attributes",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/attributes"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#propertyWrapper": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#propertyWrapper",
  "kind" : "section",
  "title" : "propertyWrapper",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/attributes#propertyWrapper"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators": {
  "abstract" : [
    {
      "text" : "Perform assignment, arithmetic, comparison, and Boolean operations.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators",
  "kind" : "article",
  "role" : "article",
  "title" : "Basic Operators",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/basicoperators"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Operator-Declaration": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Operator-Declaration",
  "kind" : "section",
  "title" : "Operator Declaration",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/declarations#Operator-Declaration"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Identifiers": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers",
  "kind" : "section",
  "title" : "Identifiers",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/lexicalstructure#Identifiers"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Operators": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Operators",
  "kind" : "section",
  "title" : "Operators",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/lexicalstructure#Operators"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters": {
  "abstract" : [
    {
      "text" : "Store and manipulate text.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters",
  "kind" : "article",
  "role" : "article",
  "title" : "Strings and Characters",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/stringsandcharacters"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Integers": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Integers",
  "kind" : "section",
  "title" : "Integers",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/thebasics#Integers"
},
"https://developer.apple.com/documentation/swift/string": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/string",
  "title" : "String",
  "titleInlineContent" : [
    {
      "text" : "String",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/string"
},
"https://developer.apple.com/library/content/documentation/Xcode/Reference/xcode_markup_formatting_ref/index.html": {
  "identifier" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/index.html",
  "title" : "Markup Formatting Reference",
  "titleInlineContent" : [
    {
      "text" : "Markup Formatting Reference",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/index.html"
}
}
}