{
  "abstract" : [
    {
      "text" : "Structure groups of expressions and control their behavior.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"
  },
  "kind" : "article",
  "metadata" : {
    "title" : "Statements"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In Swift, there are three kinds of statements: simple statements, compiler control statements,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and control flow statements.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Simple statements are the most common and consist of either an expression or a declaration.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Compiler control statements allow the program to change aspects of the compiler’s behavior",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and include a conditional compilation block and a line control statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Control flow statements are used to control the flow of execution in a program.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "There are several types of control flow statements in Swift, including",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "loop statements, branch statements, and control transfer statements.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Loop statements allow a block of code to be executed repeatedly,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "branch statements allow a certain block of code to be executed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "only when certain conditions are met,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and control transfer statements provide a way to alter the order in which code is executed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In addition, Swift provides a ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : " statement to introduce scope,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and catch and handle errors,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statement for running cleanup actions just before the current scope exits.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A semicolon (",
              "type" : "text"
            },
            {
              "code" : ";",
              "type" : "codeVoice"
            },
            {
              "text" : ") can optionally appear after any statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and is used to separate multiple statements if they appear on the same line.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ";",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "declaration",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ";",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "loop-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ";",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "branch-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ";",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "labeled-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ";",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "control-transfer-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ";",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "defer-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ";",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "do-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ";",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "compiler-control-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "statements",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "statements",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Loop-Statements",
          "level" : 2,
          "text" : "Loop Statements",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Loop statements allow a block of code to be executed repeatedly,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "depending on the conditions specified in the loop.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift has three loop statements:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a ",
              "type" : "text"
            },
            {
              "code" : "repeat",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Control flow in a loop statement can be changed by a ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " statement and is discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Continue-Statement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "loop-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "for-in-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "loop-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "while-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "loop-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "repeat-while-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a loop statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "For-In-Statement",
          "level" : 3,
          "text" : "For-In Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " statement allows a block of code to be executed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "once for each item in a collection (or any type)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that conforms to the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/sequence",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " statement has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for <#item#> in <#collection#> {",
            "   <#statements#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "makeIterator()",
              "type" : "codeVoice"
            },
            {
              "text" : " method is called on the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "collection",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to obtain a value of an iterator type—that is,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a type that conforms to the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/iteratorprotocol",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The program begins executing a loop",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by calling the ",
              "type" : "text"
            },
            {
              "code" : "next()",
              "type" : "codeVoice"
            },
            {
              "text" : " method on the iterator.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the value returned isn’t ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s assigned to the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "item",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " pattern,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the program executes the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "statements",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and then continues execution at the beginning of the loop.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Otherwise, the program doesn’t perform assignment or execute the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "statements",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and it’s finished executing the ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "for-in-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "for",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "case",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "pattern",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "in",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "where-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "code-block",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a for-in statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "While-Statement",
          "level" : 3,
          "text" : "While Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statement allows a block of code to be executed repeatedly,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as long as a condition remains true.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statement has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "while <#condition#> {",
            "   <#statements#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is executed as follows:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "condition",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " is evaluated.If ",
                      "type" : "text"
                    },
                    {
                      "code" : "true",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", execution continues to step 2.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "If ",
                      "type" : "text"
                    },
                    {
                      "code" : "false",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", the program is finished executing the ",
                      "type" : "text"
                    },
                    {
                      "code" : "while",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " statement.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The program executes the ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "statements",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : ", and execution returns to step 1.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because the value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "condition",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is evaluated before the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "statements",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " are executed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "statements",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " in a ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statement can be executed zero or more times.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "condition",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must be of type ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " or a type bridged to ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The condition can also be an optional binding declaration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "while-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "while",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "condition-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "code-block",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "condition-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "condition-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "availability-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "case-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "optional-binding-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "case-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "case",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "pattern",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "initializer",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "optional-binding-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "let",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "pattern",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "initializer",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "var",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "pattern",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "initializer",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a while statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Repeat-While-Statement",
          "level" : 3,
          "text" : "Repeat-While Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "repeat",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statement allows a block of code to be executed one or more times,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as long as a condition remains true.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "repeat",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statement has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "repeat {",
            "   <#statements#>",
            "} while <#condition#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "repeat",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is executed as follows:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The program executes the ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "statements",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and execution continues to step 2.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "condition",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " is evaluated.If ",
                      "type" : "text"
                    },
                    {
                      "code" : "true",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", execution returns to step 1.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "If ",
                      "type" : "text"
                    },
                    {
                      "code" : "false",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", the program is finished executing the ",
                      "type" : "text"
                    },
                    {
                      "code" : "repeat",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "-",
                      "type" : "text"
                    },
                    {
                      "code" : "while",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " statement.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because the value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "condition",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is evaluated after the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "statements",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " are executed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "statements",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " in a ",
              "type" : "text"
            },
            {
              "code" : "repeat",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statement are executed at least once.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "condition",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must be of type ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " or a type bridged to ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "repeat-while-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "repeat",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "code-block",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "while",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a repeat-while statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Branch-Statements",
          "level" : 2,
          "text" : "Branch Statements",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Branch statements allow the program to execute certain parts of code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "depending on the value of one or more conditions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The values of the conditions specified in a branch statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "control how the program branches and, therefore, what block of code is executed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift has three branch statements:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement, a ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement, and a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Control flow in an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement or a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement can be changed by a ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and is discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "branch-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "if-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "branch-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "guard-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "branch-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a branch statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "If-Statement",
          "level" : 3,
          "text" : "If Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is used for executing code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "based on the evaluation of one or more conditions.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "There are two basic forms of an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In each form, the opening and closing braces are required.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The first form allows code to be executed only when a condition is true",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if <#condition#> {",
            "   <#statements#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The second form of an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement provides an additional ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "else clause",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(introduced by the ",
              "type" : "text"
            },
            {
              "code" : "else",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and is used for executing one part of code when the condition is true",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and another part of code when the same condition is false.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When a single else clause is present, an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if <#condition#> {",
            "   <#statements to execute if condition is true#>",
            "} else {",
            "   <#statements to execute if condition is false#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The else clause of an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement can contain another ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to test more than one condition.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement chained together in this way has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if <#condition 1#> {",
            "   <#statements to execute if condition 1 is true#>",
            "} else if <#condition 2#> {",
            "   <#statements to execute if condition 2 is true#>",
            "} else {",
            "   <#statements to execute if both conditions are false#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The value of any condition in an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must be of type ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " or a type bridged to ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The condition can also be an optional binding declaration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "if-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "if",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "condition-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "code-block",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "else-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "else-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "else",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "code-block",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "else",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "if-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of an if statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Guard-Statement",
          "level" : 3,
          "text" : "Guard Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is used to transfer program control out of a scope",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if one or more conditions aren’t met.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "guard <#condition#> else {",
            "   <#statements#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The value of any condition in a ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must be of type ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " or a type bridged to ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The condition can also be an optional binding declaration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Any constants or variables assigned a value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from an optional binding declaration in a ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement condition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be used for the rest of the guard statement’s enclosing scope.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "else",
              "type" : "codeVoice"
            },
            {
              "text" : " clause of a ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is required,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and must either call a function with the ",
              "type" : "text"
            },
            {
              "code" : "Never",
              "type" : "codeVoice"
            },
            {
              "text" : " return type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or transfer program control outside the guard statement’s enclosing scope",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using one of the following statements:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "return",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "break",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "continue",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "throw",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Control transfer statements are discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Control-Transfer-Statements",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " below.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more information on functions with the ",
              "type" : "text"
            },
            {
              "code" : "Never",
              "type" : "codeVoice"
            },
            {
              "text" : " return type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "guard-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "guard",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "condition-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "else",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "code-block",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a guard statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Switch-Statement",
          "level" : 3,
          "text" : "Switch Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement allows certain blocks of code to be executed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "depending on the value of a control expression.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "switch <#control expression#> {",
            "case <#pattern 1#>:",
            "    <#statements#>",
            "case <#pattern 2#> where <#condition#>:",
            "    <#statements#>",
            "case <#pattern 3#> where <#condition#>,",
            "    <#pattern 4#> where <#condition#>:",
            "    <#statements#>",
            "default:",
            "    <#statements#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "control expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " of the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is evaluated",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and then compared with the patterns specified in each case.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If a match is found,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the program executes the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "statements",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " listed within the scope of that case.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The scope of each case can’t be empty.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As a result, you must include at least one statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "following the colon (",
              "type" : "text"
            },
            {
              "code" : ":",
              "type" : "codeVoice"
            },
            {
              "text" : ") of each case label. Use a single ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if you don’t intend to execute any code in the body of a matched case.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The values of expressions your code can branch on are very flexible. For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in addition to the values of scalar types, such as integers and characters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "your code can branch on the values of any type, including floating-point numbers, strings,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "tuples, instances of custom classes, and optionals.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "control expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " can even be matched to the value of a case in an enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and checked for inclusion in a specified range of values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For examples of how to use these various types of values in ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statements,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Switch",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " case can optionally contain a ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause after each pattern.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "where clause",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is introduced by the ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword followed by an expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and is used to provide an additional condition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "before a pattern in a case is considered matched to the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "control expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If a ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause is present, the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "statements",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " within the relevant case",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are executed only if the value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "control expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "matches one of the patterns of the case and the expression of the ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause evaluates to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "control expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " matches the case in the example below",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "only if it’s a tuple that contains two elements of the same value, such as ",
              "type" : "text"
            },
            {
              "code" : "(1, 1)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "case let (x, y) where x == y:"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "As the above example shows, patterns in a case can also bind constants",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using the ",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword (they can also bind variables using the ",
              "type" : "text"
            },
            {
              "code" : "var",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword).",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These constants (or variables) can then be referenced in a corresponding ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and throughout the rest of the code within the scope of the case.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the case contains multiple patterns that match the control expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "all of the patterns must contain the same constant or variable bindings,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and each bound variable or constant must have the same type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in all of the case’s patterns.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement can also include a default case, introduced by the ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The code within a default case is executed only if no other cases match the control expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement can include only one default case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which must appear at the end of the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Although the actual execution order of pattern-matching operations,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and in particular the evaluation order of patterns in cases, is unspecified,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "pattern matching in a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement behaves",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as if the evaluation is performed in source order—that is,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the order in which they appear in source code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As a result, if multiple cases contain patterns that evaluate to the same value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and thus can match the value of the control expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the program executes only the code within the first matching case in source order.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Switch-Statements-Must-Be-Exhaustive",
          "level" : 4,
          "text" : "Switch Statements Must Be Exhaustive",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In Swift,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "every possible value of the control expression’s type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must match the value of at least one pattern of a case.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When this simply isn’t feasible",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(for example, when the control expression’s type is ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can include a default case to satisfy the requirement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Switching-Over-Future-Enumeration-Cases",
          "level" : 4,
          "text" : "Switching Over Future Enumeration Cases",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "nonfrozen enumeration",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is a special kind of enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that may gain new enumeration cases in the future—",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even after you compile and ship an app.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Switching over a nonfrozen enumeration requires extra consideration.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When a library’s authors mark an enumeration as nonfrozen,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "they reserve the right to add new enumeration cases,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and any code that interacts with that enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "must",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " be able to handle those future cases without being recompiled.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Code that’s compiled in library evolution mode,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "code in the standard library,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift overlays for Apple frameworks,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and C and Objective-C code can declare nonfrozen enumerations.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For information about frozen and nonfrozen enumerations,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When switching over a nonfrozen enumeration value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you always need to include a default case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even if every case of the enumeration already has a corresponding switch case.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can apply the ",
              "type" : "text"
            },
            {
              "code" : "@unknown",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute to the default case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which indicates that the default case should match only enumeration cases",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that are added in the future.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift produces a warning",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if the default case matches",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "any enumeration case that’s known at compiler time.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This future warning informs you that the library author",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "added a new case to the enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that doesn’t have a corresponding switch case.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following example switches over all three existing cases of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the standard library’s ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/mirror\/ancestorrepresentation",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "enumeration.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you add additional cases in the future,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler generates a warning to indicate",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that you need to update the switch statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to take the new cases into account.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let representation: Mirror.AncestorRepresentation = .generated",
            "switch representation {",
            "case .customized:",
            "    print(\"Use the nearest ancestor’s implementation.\")",
            "case .generated:",
            "    print(\"Generate a default mirror for all ancestor classes.\")",
            "case .suppressed:",
            "    print(\"Suppress the representation of all ancestor classes.\")",
            "@unknown default:",
            "    print(\"Use a representation that was unknown when this code was compiled.\")",
            "}",
            "\/\/ Prints \"Generate a default mirror for all ancestor classes.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Execution-Does-Not-Fall-Through-Cases-Implicitly",
          "level" : 4,
          "text" : "Execution Does Not Fall Through Cases Implicitly",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "After the code within a matched case has finished executing,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the program exits from the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Program execution doesn’t continue or “fall through” to the next case or default case.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "That said, if you want execution to continue from one case to the next,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "explicitly include a ",
              "type" : "text"
            },
            {
              "code" : "fallthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which simply consists of the ",
              "type" : "text"
            },
            {
              "code" : "fallthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the case from which you want execution to continue.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more information about the ",
              "type" : "text"
            },
            {
              "code" : "fallthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Fallthrough-Statement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "switch",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "{",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-cases",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "}",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-cases",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-case",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-cases",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-case",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "case-label",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "statements",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-case",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "default-label",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "statements",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-case",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "conditional-switch-case",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "case-label",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "attributes",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "case",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "case-item-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "case-item-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "pattern",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "where-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "pattern",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "where-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "case-item-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "default-label",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "attributes",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "default",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "where-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "where",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "where-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "where-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "conditional-switch-case",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-if-directive-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-elseif-directive-clauses",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-else-directive-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "endif-directive",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-if-directive-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "if-directive",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-cases",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-elseif-directive-clauses",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "elseif-directive-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-elseif-directive-clauses",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-elseif-directive-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "elseif-directive",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-cases",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-else-directive-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "else-directive",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-cases",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a switch statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Labeled-Statement",
          "level" : 2,
          "text" : "Labeled Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can prefix a loop statement, an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement, a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or a ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : " statement with a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "statement label",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which consists of the name of the label followed immediately by a colon (:).",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Use statement labels with ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " statements to be explicit",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "about how you want to change control flow in a loop statement or a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Continue-Statement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The scope of a labeled statement is the entire statement following the statement label.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can nest labeled statements, but the name of each statement label must be unique.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information and to see examples",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of how to use statement labels,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Labeled-Statements",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "labeled-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "statement-label",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "loop-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "labeled-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "statement-label",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "if-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "labeled-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "statement-label",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "switch-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "labeled-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "statement-label",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "do-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "statement-label",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "label-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "label-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a labeled statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Control-Transfer-Statements",
          "level" : 2,
          "text" : "Control Transfer Statements",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Control transfer statements can change the order in which code in your program is executed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by unconditionally transferring program control from one piece of code to another.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift has five control transfer statements: a ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement, a ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a ",
              "type" : "text"
            },
            {
              "code" : "fallthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " statement, a ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " statement, and a ",
              "type" : "text"
            },
            {
              "code" : "throw",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "control-transfer-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "break-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "control-transfer-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "continue-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "control-transfer-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "fallthrough-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "control-transfer-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "return-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "control-transfer-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "throw-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a control transfer statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Break-Statement",
          "level" : 3,
          "text" : "Break Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement ends program execution of a loop,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement, or a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement can consist of only the ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or it can consist of the ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword followed by the name of a statement label,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as shown below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "break",
            "break <#label name#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When a ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is followed by the name of a statement label,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it ends program execution of the loop,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement, or ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement named by that label.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When a ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement isn’t followed by the name of a statement label,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it ends program execution of the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement or the innermost enclosing loop",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "statement in which it occurs.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can’t use an unlabeled ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement to break out of an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In both cases, program control is then transferred to the first line",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of code following the enclosing loop or ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement, if any.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For examples of how to use a ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Break",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Labeled-Statements",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "break-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "break",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "label-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a break statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Continue-Statement",
          "level" : 3,
          "text" : "Continue Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " statement ends program execution of the current iteration of a loop",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "statement but doesn’t stop execution of the loop statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " statement can consist of only the ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or it can consist of the ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword followed by the name of a statement label,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as shown below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "continue",
            "continue <#label name#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When a ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is followed by the name of a statement label,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it ends program execution of the current iteration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of the loop statement named by that label.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When a ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " statement isn’t followed by the name of a statement label,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it ends program execution of the current iteration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of the innermost enclosing loop statement in which it occurs.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In both cases, program control is then transferred to the condition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of the enclosing loop statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In a ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the increment expression is still evaluated after the ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is executed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because the increment expression is evaluated after the execution of the loop’s body.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For examples of how to use a ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Continue",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Labeled-Statements",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "continue-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "continue",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "label-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a continue statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Fallthrough-Statement",
          "level" : 3,
          "text" : "Fallthrough Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "fallthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " statement consists of the ",
              "type" : "text"
            },
            {
              "code" : "fallthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and occurs only in a case block of a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "fallthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " statement causes program execution to continue",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from one case in a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement to the next case.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Program execution continues to the next case",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even if the patterns of the case label don’t match",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s control expression.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "fallthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " statement can appear anywhere inside a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "not just as the last statement of a case block,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but it can’t be used in the final case block.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It also can’t transfer control into a case block",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whose pattern contains value binding patterns.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For an example of how to use a ",
              "type" : "text"
            },
            {
              "code" : "fallthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " statement in a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Control-Transfer-Statements",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "fallthrough-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "fallthrough",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a fallthrough statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Return-Statement",
          "level" : 3,
          "text" : "Return Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " statement occurs in the body of a function or method definition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and causes program execution to return to the calling function or method.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Program execution continues at the point immediately following the function or method call.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " statement can consist of only the ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or it can consist of the ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword followed by an expression, as shown below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "return",
            "return <#expression#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When a ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is followed by an expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of the expression is returned to the calling function or method.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the value of the expression doesn’t match the value of the return type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "declared in the function or method declaration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the expression’s value is converted to the return type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "before it’s returned to the calling function or method.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "As described in ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Failable-Initializers",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ", a special form of the ",
                  "type" : "text"
                },
                {
                  "code" : "return",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement (",
                  "type" : "text"
                },
                {
                  "code" : "return nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : ")",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "can be used in a failable initializer to indicate initialization failure.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "When a ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " statement isn’t followed by an expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it can be used only to return from a function or method that doesn’t return a value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(that is, when the return type of the function or method is ",
              "type" : "text"
            },
            {
              "code" : "Void",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "()",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "return-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "return",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a return statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Throw-Statement",
          "level" : 3,
          "text" : "Throw Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "throw",
              "type" : "codeVoice"
            },
            {
              "text" : " statement occurs in the body of a throwing function or method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or in the body of a closure expression whose type is marked with the ",
              "type" : "text"
            },
            {
              "code" : "throws",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "throw",
              "type" : "codeVoice"
            },
            {
              "text" : " statement causes a program to end execution of the current scope",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and begin error propagation to its enclosing scope.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The error that’s thrown continues to propagate until it’s handled by a ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clause",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of a ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "throw",
              "type" : "codeVoice"
            },
            {
              "text" : " statement consists of the ",
              "type" : "text"
            },
            {
              "code" : "throw",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by an expression, as shown below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "throw <#expression#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " must have a type that conforms to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "Error",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For an example of how to use a ",
              "type" : "text"
            },
            {
              "code" : "throw",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Propagating-Errors-Using-Throwing-Functions",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "throw-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "throw",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a throw statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Defer-Statement",
          "level" : 2,
          "text" : "Defer Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is used for executing code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "just before transferring program control outside of the scope",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that the ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statement appears in.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statement has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "defer {",
            "    <#statements#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The statements within the ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statement are executed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "no matter how program control is transferred.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This means that a ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statement can be used, for example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to perform manual resource management such as closing file descriptors,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to perform actions that need to happen even if an error is thrown.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "statements",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " in the ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are executed at the end of the scope that encloses the ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func f(x: Int) {",
            "  defer { print(\"First defer\") }",
            "",
            "  if x < 10 {",
            "    defer { print(\"Second defer\") }",
            "    print(\"End of if\")",
            "  }",
            "",
            "  print(\"End of function\")",
            "}",
            "f(x: 5)",
            "\/\/ Prints \"End of if\"",
            "\/\/ Prints \"Second defer\"",
            "\/\/ Prints \"End of function\"",
            "\/\/ Prints \"First defer\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the code above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " in the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "executes before the ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " declared in the function ",
              "type" : "text"
            },
            {
              "code" : "f",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because the scope of the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement ends",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "before the scope of the function.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If multiple ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statements appear in the same scope,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the order they appear is the reverse of the order they’re executed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Executing the last ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statement in a given scope first",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "means that statements inside that last ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can refer to resources that will be cleaned up by other ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statements.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func f() {",
            "    defer { print(\"First defer\") }",
            "    defer { print(\"Second defer\") }",
            "    print(\"End of function\")",
            "}",
            "f()",
            "\/\/ Prints \"End of function\"",
            "\/\/ Prints \"Second defer\"",
            "\/\/ Prints \"First defer\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The statements in the ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statement can’t",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "transfer program control outside of the ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "defer-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "defer",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "code-block",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a defer statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Do-Statement",
          "level" : 2,
          "text" : "Do Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is used to introduce a new scope",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can optionally contain one or more ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clauses,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which contain patterns that match against defined error conditions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Variables and constants declared in the scope of a ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be accessed only within that scope.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : " statement in Swift is similar to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "curly braces (",
              "type" : "text"
            },
            {
              "code" : "{}",
              "type" : "codeVoice"
            },
            {
              "text" : ") in C used to delimit a code block,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and doesn’t incur a performance cost at runtime.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : " statement has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "do {",
            "    try <#expression#>",
            "    <#statements#>",
            "} catch <#pattern 1#> {",
            "    <#statements#>",
            "} catch <#pattern 2#> where <#condition#> {",
            "    <#statements#>",
            "} catch <#pattern 3#>, <#pattern 4#> where <#condition#> {",
            "    <#statements#>",
            "} catch {",
            "    <#statements#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If any statement in the ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : " code block throws an error,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "program control is transferred",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the first ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clause whose pattern matches the error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If none of the clauses match,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the error propagates to the surrounding scope.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If an error is unhandled at the top level,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "program execution stops with a runtime error.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Like a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler attempts to infer whether ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clauses are exhaustive.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If such a determination can be made, the error is considered handled.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Otherwise, the error can propagate out of the containing scope,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which means",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the error must be handled by an enclosing ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clause",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or the containing function must be declared with ",
              "type" : "text"
            },
            {
              "code" : "throws",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clause that has multiple patterns",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "matches the error if any of its patterns match the error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If a ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clause contains multiple patterns,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "all of the patterns must contain the same constant or variable bindings,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and each bound variable or constant must have the same type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in all of the ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clause’s patterns.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To ensure that an error is handled,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "use a ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clause with a pattern that matches all errors,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as a wildcard pattern (",
              "type" : "text"
            },
            {
              "code" : "_",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If a ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clause doesn’t specify a pattern,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clause matches and binds any error to a local constant named ",
              "type" : "text"
            },
            {
              "code" : "error",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more information about the patterns you can use in a ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clause,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To see an example of how to use a ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : " statement with several ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clauses,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Handling-Errors",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "do-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "do",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "code-block",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "catch-clauses",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "catch-clauses",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "catch-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "catch-clauses",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "catch-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "catch",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "catch-pattern-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "code-block",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "catch-pattern-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "catch-pattern",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "catch-pattern",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "catch-pattern-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "catch-pattern",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "pattern",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "where-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a do statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Compiler-Control-Statements",
          "level" : 2,
          "text" : "Compiler Control Statements",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Compiler control statements allow the program to change aspects of the compiler’s behavior.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift has three compiler control statements:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a conditional compilation block",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a line control statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a compile-time diagnostic statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "compiler-control-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "conditional-compilation-block",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "compiler-control-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "line-control-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "compiler-control-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "diagnostic-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a compiler control statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Conditional-Compilation-Block",
          "level" : 3,
          "text" : "Conditional Compilation Block",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A conditional compilation block allows code to be conditionally compiled",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "depending on the value of one or more compilation conditions.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Every conditional compilation block begins with the ",
              "type" : "text"
            },
            {
              "code" : "#if",
              "type" : "codeVoice"
            },
            {
              "text" : " compilation directive",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ends with the ",
              "type" : "text"
            },
            {
              "code" : "#endif",
              "type" : "codeVoice"
            },
            {
              "text" : " compilation directive.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A simple conditional compilation block has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "#if <#compilation condition#>",
            "    <#statements#>",
            "#endif"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike the condition of an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "compilation condition",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is evaluated at compile time.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As a result,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "statements",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " are compiled and executed only if the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "compilation condition",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "evaluates to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " at compile time.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "compilation condition",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " can include the ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " Boolean literals,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an identifier used with the ",
              "type" : "text"
            },
            {
              "code" : "-D",
              "type" : "codeVoice"
            },
            {
              "text" : " command line flag, or any of the platform",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "conditions listed in the table below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Platform condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Valid arguments",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "os()",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "macOS",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "iOS",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "watchOS",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "tvOS",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "Linux",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "Windows",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "arch()",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "i386",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "x86_64",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "arm",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "arm64",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "swift()",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : ">=",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " or ",
                      "type" : "text"
                    },
                    {
                      "code" : "<",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " followed by a version number",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "compiler()",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : ">=",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " or ",
                      "type" : "text"
                    },
                    {
                      "code" : "<",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " followed by a version number",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "canImport()",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "A module name",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "targetEnvironment()",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "simulator",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "macCatalyst",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        },
        {
          "inlineContent" : [
            {
              "text" : "The version number for the ",
              "type" : "text"
            },
            {
              "code" : "swift()",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "compiler()",
              "type" : "codeVoice"
            },
            {
              "text" : " platform conditions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "consists of a major number, optional minor number, optional patch number, and so on,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a dot (",
              "type" : "text"
            },
            {
              "code" : ".",
              "type" : "codeVoice"
            },
            {
              "text" : ") separating each part of the version number.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "There must not be whitespace between the comparison operator and the version number.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The version for ",
              "type" : "text"
            },
            {
              "code" : "compiler()",
              "type" : "codeVoice"
            },
            {
              "text" : " is the compiler version,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "regardless of the Swift version setting passed to the compiler.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The version for ",
              "type" : "text"
            },
            {
              "code" : "swift()",
              "type" : "codeVoice"
            },
            {
              "text" : " is the language version currently being compiled.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, if you compile your code using the Swift 5 compiler in Swift 4.2 mode,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler version is 5 and the language version is 4.2.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "With those settings,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the following code prints all three messages:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "#if compiler(>=5)",
            "print(\"Compiled with the Swift 5 compiler or later\")",
            "#endif",
            "#if swift(>=4.2)",
            "print(\"Compiled in Swift 4.2 mode or later\")",
            "#endif",
            "#if compiler(>=5) && swift(<5)",
            "print(\"Compiled with the Swift 5 compiler or later in a Swift mode earlier than 5\")",
            "#endif",
            "\/\/ Prints \"Compiled with the Swift 5 compiler or later\"",
            "\/\/ Prints \"Compiled in Swift 4.2 mode or later\"",
            "\/\/ Prints \"Compiled with the Swift 5 compiler or later in a Swift mode earlier than 5\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The argument for the ",
              "type" : "text"
            },
            {
              "code" : "canImport()",
              "type" : "codeVoice"
            },
            {
              "text" : " platform condition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is the name of a module that may not be present on all platforms.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The module can include periods (",
              "type" : "text"
            },
            {
              "code" : ".",
              "type" : "codeVoice"
            },
            {
              "text" : ") in its name.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This condition tests whether it’s possible to import the module,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but doesn’t actually import it.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the module is present, the platform condition returns ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ";",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "otherwise, it returns ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "targetEnvironment()",
              "type" : "codeVoice"
            },
            {
              "text" : " platform condition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "returns ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " when code is being compiled for the specified environment;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "otherwise, it returns ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The ",
                  "type" : "text"
                },
                {
                  "code" : "arch(arm)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " platform condition doesn’t return ",
                  "type" : "text"
                },
                {
                  "code" : "true",
                  "type" : "codeVoice"
                },
                {
                  "text" : " for ARM 64 devices.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The ",
                  "type" : "text"
                },
                {
                  "code" : "arch(i386)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " platform condition returns ",
                  "type" : "text"
                },
                {
                  "code" : "true",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "when code is compiled for the 32–bit iOS simulator.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can combine and negate compilation conditions using the logical operators",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "&&",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "||",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "!",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and use parentheses for grouping.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These operators have the same associativity and precedence as the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "logical operators that are used to combine ordinary Boolean expressions.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Similar to an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can add multiple conditional branches to test for different compilation conditions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can add any number of additional branches using ",
              "type" : "text"
            },
            {
              "code" : "#elseif",
              "type" : "codeVoice"
            },
            {
              "text" : " clauses.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can also add a final additional branch using an ",
              "type" : "text"
            },
            {
              "code" : "#else",
              "type" : "codeVoice"
            },
            {
              "text" : " clause.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Conditional compilation blocks that contain multiple branches",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "have the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "#if <#compilation condition 1#>",
            "    <#statements to compile if compilation condition 1 is true#>",
            "#elseif <#compilation condition 2#>",
            "    <#statements to compile if compilation condition 2 is true#>",
            "#else",
            "    <#statements to compile if both compilation conditions are false#>",
            "#endif"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Each statement in the body of a conditional compilation block is parsed",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "even if it’s not compiled.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "However, there’s an exception",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "if the compilation condition includes a ",
                  "type" : "text"
                },
                {
                  "code" : "swift()",
                  "type" : "codeVoice"
                },
                {
                  "text" : " or ",
                  "type" : "text"
                },
                {
                  "code" : "compiler()",
                  "type" : "codeVoice"
                },
                {
                  "text" : " platform condition:",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The statements are parsed",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "only if the language or compiler version matches",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "what is specified in the platform condition.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This exception ensures that an older compiler doesn’t attempt to parse",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "syntax introduced in a newer version of Swift.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "For information about how you can wrap",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "explicit member expressions in conditional compilation blocks,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "conditional-compilation-block",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "if-directive-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "elseif-directive-clauses",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "else-directive-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "endif-directive",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "if-directive-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "if-directive",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "statements",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "elseif-directive-clauses",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "elseif-directive-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "elseif-directive-clauses",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "elseif-directive-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "elseif-directive",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "statements",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "else-directive-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "else-directive",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "statements",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "if-directive",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#if",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "elseif-directive",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#elseif",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "else-directive",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#else",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "endif-directive",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#endif",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "boolean-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "!",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "&&",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "||",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "compilation-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "os",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "operating-system",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "arch",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "architecture",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "swift",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ">=",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "swift-version",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "swift",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "<",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "swift-version",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "compiler",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ">=",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "swift-version",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "compiler",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "<",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "swift-version",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "canImport",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "import-path",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "targetEnvironment",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "environment",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "operating-system",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "macOS",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "iOS",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "watchOS",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "tvOS",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "Linux",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "Windows",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "architecture",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "i386",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "x86_64",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "arm",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "arm64",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "swift-version",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "swift-version-continuation",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "swift-version-continuation",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "swift-version-continuation",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "environment",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "simulator",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "macCatalyst",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a conditional compilation block",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Line-Control-Statement",
          "level" : 3,
          "text" : "Line Control Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A line control statement is used to specify a line number and filename",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that can be different from the line number and filename of the source code being compiled.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Use a line control statement to change the source code location",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "used by Swift for diagnostic and debugging purposes.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A line control statement has the following forms:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "#sourceLocation(file: <#file path#>, line: <#line number#>)",
            "#sourceLocation()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The first form of a line control statement changes the values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of the ",
              "type" : "text"
            },
            {
              "code" : "#line",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "#file",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "#fileID",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "#filePath",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "literal expressions, beginning with the line of code following the line control statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "line number",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " changes the value of ",
              "type" : "text"
            },
            {
              "code" : "#line",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and is any integer literal greater than zero.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "file path",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " changes the value of ",
              "type" : "text"
            },
            {
              "code" : "#file",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "#fileID",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "#filePath",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and is a string literal.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The specified string becomes the value of ",
              "type" : "text"
            },
            {
              "code" : "#filePath",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the last path component of the string is used by the value of ",
              "type" : "text"
            },
            {
              "code" : "#fileID",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For information about ",
              "type" : "text"
            },
            {
              "code" : "#file",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "#fileID",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "#filePath",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The second form of a line control statement, ",
              "type" : "text"
            },
            {
              "code" : "#sourceLocation()",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "resets the source code location back to the default line numbering and file path.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "line-control-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#sourceLocation",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "file:",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "file-path",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "line:",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "line-number",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "line-control-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#sourceLocation",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "line-number",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → A decimal integer greater than zero",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "file-path",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "static-string-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a line control statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Compile-Time-Diagnostic-Statement",
          "level" : 3,
          "text" : "Compile-Time Diagnostic Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A compile-time diagnostic statement causes the compiler",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to emit an error or a warning during compilation.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A compile-time diagnostic statement has the following forms:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "#error(\"<#error message#>\")",
            "#warning(\"<#warning message#>\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The first form emits the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "error message",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " as a fatal error",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and terminates the compilation process.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The second form emits the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "warning message",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " as a nonfatal warning",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and allows compilation to proceed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You write the diagnostic message as a static string literal.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Static string literals can’t use features like",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "string interpolation or concatenation,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but they can use the multiline string literal syntax.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "diagnostic-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#error",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "diagnostic-message",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "diagnostic-statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#warning",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "diagnostic-message",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "diagnostic-message",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "static-string-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a compile-time diagnostic statement",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Availability-Condition",
          "level" : 2,
          "text" : "Availability Condition",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "availability condition",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is used as a condition of an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement to query the availability of APIs at runtime,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "based on specified platforms arguments.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "An availability condition has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if #available(<#platform name#> <#version#>, <#...#>, *) {",
            "    <#statements to execute if the APIs are available#>",
            "} else {",
            "    <#fallback statements to execute if the APIs are unavailable#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You use an availability condition to execute a block of code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "depending on whether the APIs you want to use are available at runtime.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The compiler uses the information from the availability condition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when it verifies that the APIs in that block of code are available.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The availability condition takes a comma-separated list of platform names and versions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Use ",
              "type" : "text"
            },
            {
              "code" : "iOS",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "macOS",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "watchOS",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "tvOS",
              "type" : "codeVoice"
            },
            {
              "text" : " for the platform names,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and include the corresponding version numbers.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "*",
              "type" : "codeVoice"
            },
            {
              "text" : " argument is required and specifies that, on any other platform,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the body of the code block guarded by the availability condition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "executes on the minimum deployment target specified by your target.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike Boolean conditions, you can’t combine availability conditions using",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "logical operators like ",
              "type" : "text"
            },
            {
              "code" : "&&",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "||",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Instead of using ",
              "type" : "text"
            },
            {
              "code" : "!",
              "type" : "codeVoice"
            },
            {
              "text" : " to negate an availability condition,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "use an unavailability condition, which has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if #unavailable(<#platform name#> <#version#>, <#...#>) {",
            "    <#fallback statements to execute if the APIs are unavailable#>",
            "} else {",
            "    <#statements to execute if the APIs are available#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "#unavailable",
              "type" : "codeVoice"
            },
            {
              "text" : " form is syntactic sugar that negates the condition.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In an unavailability condition,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "*",
              "type" : "codeVoice"
            },
            {
              "text" : " argument is implicit and must not be included.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the same meaning as the ",
              "type" : "text"
            },
            {
              "code" : "*",
              "type" : "codeVoice"
            },
            {
              "text" : " argument in an availability condition.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "availability-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#available",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "availability-arguments",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "availability-condition",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#unavailable",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "availability-arguments",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "availability-arguments",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "availability-argument",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "availability-argument",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "availability-arguments",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "availability-argument",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-version",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "availability-argument",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "*",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "iOS",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "iOSApplicationExtension",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "macOS",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "macOSApplicationExtension",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "macCatalyst",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "macCatalystApplicationExtension",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "watchOS",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "watchOSApplicationExtension",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "tvOS",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "tvOSApplicationExtension",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-version",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-version",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "platform-version",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of an availability condition",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ]
, 
"references": {
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "article",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#frozen": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen",
  "kind" : "section",
  "title" : "frozen",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/attributes#frozen"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow": {
  "abstract" : [
    {
      "text" : "Structure code with branches, loops, and early exits.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
  "kind" : "article",
  "role" : "article",
  "title" : "Control Flow",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Break": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Break",
  "kind" : "section",
  "title" : "Break",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow#Break"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Continue": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Continue",
  "kind" : "section",
  "title" : "Continue",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow#Continue"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Control-Transfer-Statements": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Control-Transfer-Statements",
  "kind" : "section",
  "title" : "Control Transfer Statements",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow#Control-Transfer-Statements"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Labeled-Statements": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Labeled-Statements",
  "kind" : "section",
  "title" : "Labeled Statements",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow#Labeled-Statements"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Switch": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Switch",
  "kind" : "section",
  "title" : "Switch",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow#Switch"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Failable-Initializers": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Failable-Initializers",
  "kind" : "section",
  "title" : "Failable Initializers",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/declarations#Failable-Initializers"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Functions-that-Never-Return": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return",
  "kind" : "section",
  "title" : "Functions that Never Return",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/declarations#Functions-that-Never-Return"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling": {
  "abstract" : [
    {
      "text" : "Respond to and recover from errors.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling",
  "kind" : "article",
  "role" : "article",
  "title" : "Error Handling",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/errorhandling"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling#Handling-Errors": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Handling-Errors",
  "kind" : "section",
  "title" : "Handling Errors",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/errorhandling#Handling-Errors"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling#Propagating-Errors-Using-Throwing-Functions": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Propagating-Errors-Using-Throwing-Functions",
  "kind" : "section",
  "title" : "Propagating Errors Using Throwing Functions",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/errorhandling#Propagating-Errors-Using-Throwing-Functions"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Explicit-Member-Expression": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression",
  "kind" : "section",
  "title" : "Explicit Member Expression",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/expressions#Explicit-Member-Expression"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Literal-Expression": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression",
  "kind" : "section",
  "title" : "Literal Expression",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/expressions#Literal-Expression"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns": {
  "abstract" : [
    {
      "text" : "Match and destructure values.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns",
  "kind" : "article",
  "role" : "article",
  "title" : "Patterns",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/patterns"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Break-Statement": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement",
  "kind" : "section",
  "title" : "Break Statement",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/statements#Break-Statement"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Continue-Statement": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Continue-Statement",
  "kind" : "section",
  "title" : "Continue Statement",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/statements#Continue-Statement"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Control-Transfer-Statements": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Control-Transfer-Statements",
  "kind" : "section",
  "title" : "Control Transfer Statements",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/statements#Control-Transfer-Statements"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Fallthrough-Statement": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Fallthrough-Statement",
  "kind" : "section",
  "title" : "Fallthrough Statement",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/statements#Fallthrough-Statement"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Optional-Binding": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding",
  "kind" : "section",
  "title" : "Optional Binding",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/thebasics#Optional-Binding"
},
"https://developer.apple.com/documentation/swift/iteratorprotocol": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/iteratorprotocol",
  "title" : "IteratorProtocol",
  "titleInlineContent" : [
    {
      "text" : "IteratorProtocol",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/iteratorprotocol"
},
"https://developer.apple.com/documentation/swift/mirror/ancestorrepresentation": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/mirror\/ancestorrepresentation",
  "title" : "Mirror.AncestorRepresentation",
  "titleInlineContent" : [
    {
      "text" : "Mirror.AncestorRepresentation",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/mirror\/ancestorrepresentation"
},
"https://developer.apple.com/documentation/swift/sequence": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/sequence",
  "title" : "Sequence",
  "titleInlineContent" : [
    {
      "text" : "Sequence",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/sequence"
}
}
}