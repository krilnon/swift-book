{
  "abstract" : [
    {
      "text" : "Structure code with branches, loops, and early exits.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "The Swift Programming Language"
      }
    ],
    "title" : "Control Flow"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift provides a variety of control flow statements.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These include ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loops to perform a task multiple times;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statements",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to execute different branches of code based on certain conditions;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and statements such as ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to transfer the flow of execution to another point in your code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift also provides a ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop that makes it easy to iterate over",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "arrays, dictionaries, ranges, strings, and other sequences.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift’s ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is considerably more powerful",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "than its counterpart in many C-like languages.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Cases can match many different patterns,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "including interval matches, tuples, and casts to a specific type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Matched values in a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " case can be bound to temporary constants or variables",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for use within the case’s body,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and complex matching conditions can be expressed with a ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause for each case.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "For-In-Loops",
          "level" : 2,
          "text" : "For-In Loops",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You use the ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop to iterate over a sequence,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as items in an array, ranges of numbers, or characters in a string.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example uses a ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop to iterate over the items in an array:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"]",
            "for name in names {",
            "    print(\"Hello, \\(name)!\")",
            "}",
            "\/\/ Hello, Anna!",
            "\/\/ Hello, Alex!",
            "\/\/ Hello, Brian!",
            "\/\/ Hello, Jack!"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also iterate over a dictionary to access its key-value pairs.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each item in the dictionary is returned as a ",
              "type" : "text"
            },
            {
              "code" : "(key, value)",
              "type" : "codeVoice"
            },
            {
              "text" : " tuple",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when the dictionary is iterated,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and you can decompose the ",
              "type" : "text"
            },
            {
              "code" : "(key, value)",
              "type" : "codeVoice"
            },
            {
              "text" : " tuple’s members as explicitly named constants",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for use within the body of the ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the code example below, the dictionary’s keys are decomposed into a constant called ",
              "type" : "text"
            },
            {
              "code" : "animalName",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the dictionary’s values are decomposed into a constant called ",
              "type" : "text"
            },
            {
              "code" : "legCount",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let numberOfLegs = [\"spider\": 8, \"ant\": 6, \"cat\": 4]",
            "for (animalName, legCount) in numberOfLegs {",
            "    print(\"\\(animalName)s have \\(legCount) legs\")",
            "}",
            "\/\/ cats have 4 legs",
            "\/\/ ants have 6 legs",
            "\/\/ spiders have 8 legs"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The contents of a ",
              "type" : "text"
            },
            {
              "code" : "Dictionary",
              "type" : "codeVoice"
            },
            {
              "text" : " are inherently unordered,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and iterating over them doesn’t guarantee the order",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in which they will be retrieved.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In particular,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the order you insert items into a ",
              "type" : "text"
            },
            {
              "code" : "Dictionary",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "doesn’t define the order they’re iterated.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more about arrays and dictionaries, see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also use ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loops with numeric ranges.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This example prints the first few entries in a five-times table:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for index in 1...5 {",
            "    print(\"\\(index) times 5 is \\(index * 5)\")",
            "}",
            "\/\/ 1 times 5 is 5",
            "\/\/ 2 times 5 is 10",
            "\/\/ 3 times 5 is 15",
            "\/\/ 4 times 5 is 20",
            "\/\/ 5 times 5 is 25"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The sequence being iterated over is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a range of numbers from ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : " to ",
              "type" : "text"
            },
            {
              "code" : "5",
              "type" : "codeVoice"
            },
            {
              "text" : ", inclusive,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as indicated by the use of the closed range operator (",
              "type" : "text"
            },
            {
              "code" : "...",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The value of ",
              "type" : "text"
            },
            {
              "code" : "index",
              "type" : "codeVoice"
            },
            {
              "text" : " is set to the first number in the range (",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the statements inside the loop are executed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In this case, the loop contains only one statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which prints an entry from the five-times table for the current value of ",
              "type" : "text"
            },
            {
              "code" : "index",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "After the statement is executed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of ",
              "type" : "text"
            },
            {
              "code" : "index",
              "type" : "codeVoice"
            },
            {
              "text" : " is updated to contain the second value in the range (",
              "type" : "text"
            },
            {
              "code" : "2",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the ",
              "type" : "text"
            },
            {
              "code" : "print(_:separator:terminator:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function is called again.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This process continues until the end of the range is reached.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the example above, ",
              "type" : "text"
            },
            {
              "code" : "index",
              "type" : "codeVoice"
            },
            {
              "text" : " is a constant whose value is automatically set",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "at the start of each iteration of the loop.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As such, ",
              "type" : "text"
            },
            {
              "code" : "index",
              "type" : "codeVoice"
            },
            {
              "text" : " doesn’t have to be declared before it’s used.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It’s implicitly declared simply by its inclusion in the loop declaration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without the need for a ",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : " declaration keyword.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you don’t need each value from a sequence,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can ignore the values by using an underscore in place of a variable name.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let base = 3",
            "let power = 10",
            "var answer = 1",
            "for _ in 1...power {",
            "    answer *= base",
            "}",
            "print(\"\\(base) to the power of \\(power) is \\(answer)\")",
            "\/\/ Prints \"3 to the power of 10 is 59049\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above calculates the value of one number to the power of another",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(in this case, ",
              "type" : "text"
            },
            {
              "code" : "3",
              "type" : "codeVoice"
            },
            {
              "text" : " to the power of ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It multiplies a starting value of ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(that is, ",
              "type" : "text"
            },
            {
              "code" : "3",
              "type" : "codeVoice"
            },
            {
              "text" : " to the power of ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by ",
              "type" : "text"
            },
            {
              "code" : "3",
              "type" : "codeVoice"
            },
            {
              "text" : ", ten times,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using a closed range that starts with ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : " and ends with ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For this calculation, the individual counter values each time through the loop are unnecessary —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the code simply executes the loop the correct number of times.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The underscore character (",
              "type" : "text"
            },
            {
              "code" : "_",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "used in place of a loop variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "causes the individual values to be ignored",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and doesn’t provide access to the current value during each iteration of the loop.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In some situations, you might not want to use closed ranges,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which include both endpoints.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Consider drawing the tick marks for every minute on a watch face.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You want to draw ",
              "type" : "text"
            },
            {
              "code" : "60",
              "type" : "codeVoice"
            },
            {
              "text" : " tick marks, starting with the ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " minute.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Use the half-open range operator (",
              "type" : "text"
            },
            {
              "code" : "..<",
              "type" : "codeVoice"
            },
            {
              "text" : ") to include the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "lower bound but not the upper bound.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more about ranges, see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Range-Operators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let minutes = 60",
            "for tickMark in 0..<minutes {",
            "    \/\/ render the tick mark each minute (60 times)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Some users might want fewer tick marks in their UI.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "They could prefer one mark every ",
              "type" : "text"
            },
            {
              "code" : "5",
              "type" : "codeVoice"
            },
            {
              "text" : " minutes instead.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Use the ",
              "type" : "text"
            },
            {
              "code" : "stride(from:to:by:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function to skip the unwanted marks.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let minuteInterval = 5",
            "for tickMark in stride(from: 0, to: minutes, by: minuteInterval) {",
            "    \/\/ render the tick mark every 5 minutes (0, 5, 10, 15 ... 45, 50, 55)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Closed ranges are also available, by using ",
              "type" : "text"
            },
            {
              "code" : "stride(from:through:by:)",
              "type" : "codeVoice"
            },
            {
              "text" : " instead:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let hours = 12",
            "let hourInterval = 3",
            "for tickMark in stride(from: 3, through: hours, by: hourInterval) {",
            "    \/\/ render the tick mark every 3 hours (3, 6, 9, 12)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The examples above use a ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop to iterate",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "ranges, arrays, dictionaries, and strings.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, you can use this syntax to iterate ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "any",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " collection,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "including your own classes and collection types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as long as those types conform to the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/sequence",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "While-Loops",
          "level" : 2,
          "text" : "While Loops",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop performs a set of statements until a condition becomes ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These kinds of loops are best used when",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the number of iterations isn’t known before the first iteration begins.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift provides two kinds of ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loops:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "while",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " evaluates its condition at the start of each pass through the loop.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "repeat",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "-",
                      "type" : "text"
                    },
                    {
                      "code" : "while",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " evaluates its condition at the end of each pass through the loop.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "anchor" : "While",
          "level" : 3,
          "text" : "While",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop starts by evaluating a single condition.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the condition is ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a set of statements is repeated until the condition becomes ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s the general form of a ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "while <#condition#> {",
            "   <#statements#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example plays a simple game of ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Snakes and Ladders",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(also known as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Chutes and Ladders",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : "):",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "snakesAndLadders",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The rules of the game are as follows:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The board has 25 squares, and the aim is to land on or beyond square 25.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The player’s starting square is “square zero”,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "which is just off the bottom-left corner of the board.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Each turn, you roll a six-sided dice and move by that number of squares,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "following the horizontal path indicated by the dotted arrow above.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If your turn ends at the bottom of a ladder, you move up that ladder.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If your turn ends at the head of a snake, you move down that snake.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "The game board is represented by an array of ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Its size is based on a constant called ",
              "type" : "text"
            },
            {
              "code" : "finalSquare",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is used to initialize the array",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and also to check for a win condition later in the example.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because the players start off the board, on “square zero”,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the board is initialized with 26 zero ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " values, not 25.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let finalSquare = 25",
            "var board = [Int](repeating: 0, count: finalSquare + 1)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Some squares are then set to have more specific values for the snakes and ladders.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Squares with a ladder base have a positive number to move you up the board,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whereas squares with a snake head have a negative number to move you back down the board.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02",
            "board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Square 3 contains the bottom of a ladder that moves you up to square 11.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To represent this, ",
              "type" : "text"
            },
            {
              "code" : "board[03]",
              "type" : "codeVoice"
            },
            {
              "text" : " is equal to ",
              "type" : "text"
            },
            {
              "code" : "+08",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is equivalent to an integer value of ",
              "type" : "text"
            },
            {
              "code" : "8",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(the difference between ",
              "type" : "text"
            },
            {
              "code" : "3",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "11",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To align the values and statements,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the unary plus operator (",
              "type" : "text"
            },
            {
              "code" : "+i",
              "type" : "codeVoice"
            },
            {
              "text" : ") is explicitly used with",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the unary minus operator (",
              "type" : "text"
            },
            {
              "code" : "-i",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and numbers lower than ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : " are padded with zeros.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(Neither stylistic technique is strictly necessary,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but they lead to neater code.)",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var square = 0",
            "var diceRoll = 0",
            "while square < finalSquare {",
            "    \/\/ roll the dice",
            "    diceRoll += 1",
            "    if diceRoll == 7 { diceRoll = 1 }",
            "    \/\/ move by the rolled amount",
            "    square += diceRoll",
            "    if square < board.count {",
            "        \/\/ if we're still on the board, move up or down for a snake or a ladder",
            "        square += board[square]",
            "    }",
            "}",
            "print(\"Game over!\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above uses a very simple approach to dice rolling.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Instead of generating a random number,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it starts with a ",
              "type" : "text"
            },
            {
              "code" : "diceRoll",
              "type" : "codeVoice"
            },
            {
              "text" : " value of ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each time through the ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "diceRoll",
              "type" : "codeVoice"
            },
            {
              "text" : " is incremented by one",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and is then checked to see whether it has become too large.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Whenever this return value equals ",
              "type" : "text"
            },
            {
              "code" : "7",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the dice roll has become too large and is reset to a value of ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The result is a sequence of ",
              "type" : "text"
            },
            {
              "code" : "diceRoll",
              "type" : "codeVoice"
            },
            {
              "text" : " values that’s always",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "2",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "3",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "4",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "5",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "6",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "2",
              "type" : "codeVoice"
            },
            {
              "text" : " and so on.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "After rolling the dice, the player moves forward by ",
              "type" : "text"
            },
            {
              "code" : "diceRoll",
              "type" : "codeVoice"
            },
            {
              "text" : " squares.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It’s possible that the dice roll may have moved the player beyond square 25,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in which case the game is over.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To cope with this scenario,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the code checks that ",
              "type" : "text"
            },
            {
              "code" : "square",
              "type" : "codeVoice"
            },
            {
              "text" : " is less than the ",
              "type" : "text"
            },
            {
              "code" : "board",
              "type" : "codeVoice"
            },
            {
              "text" : " array’s ",
              "type" : "text"
            },
            {
              "code" : "count",
              "type" : "codeVoice"
            },
            {
              "text" : " property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If ",
              "type" : "text"
            },
            {
              "code" : "square",
              "type" : "codeVoice"
            },
            {
              "text" : " is valid, the value stored in ",
              "type" : "text"
            },
            {
              "code" : "board[square]",
              "type" : "codeVoice"
            },
            {
              "text" : " is added",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the current ",
              "type" : "text"
            },
            {
              "code" : "square",
              "type" : "codeVoice"
            },
            {
              "text" : " value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to move the player up or down any ladders or snakes.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "If this check isn’t performed,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "board[square]",
                  "type" : "codeVoice"
                },
                {
                  "text" : " might try to access a value outside the bounds of the ",
                  "type" : "text"
                },
                {
                  "code" : "board",
                  "type" : "codeVoice"
                },
                {
                  "text" : " array,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "which would trigger a runtime error.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "The current ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop execution then ends,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the loop’s condition is checked to see if the loop should be executed again.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the player has moved on or beyond square number ",
              "type" : "text"
            },
            {
              "code" : "25",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the loop’s condition evaluates to ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " and the game ends.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop is appropriate in this case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because the length of the game isn’t clear at the start of the ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Instead, the loop is executed until a particular condition is satisfied.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Repeat-While",
          "level" : 3,
          "text" : "Repeat-While",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The other variation of the ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "known as the ",
              "type" : "text"
            },
            {
              "code" : "repeat",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "performs a single pass through the loop block first,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "before",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " considering the loop’s condition.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It then continues to repeat the loop until the condition is ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The ",
                  "type" : "text"
                },
                {
                  "code" : "repeat",
                  "type" : "codeVoice"
                },
                {
                  "text" : "-",
                  "type" : "text"
                },
                {
                  "code" : "while",
                  "type" : "codeVoice"
                },
                {
                  "text" : " loop in Swift is analogous to",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "a ",
                  "type" : "text"
                },
                {
                  "code" : "do",
                  "type" : "codeVoice"
                },
                {
                  "text" : "-",
                  "type" : "text"
                },
                {
                  "code" : "while",
                  "type" : "codeVoice"
                },
                {
                  "text" : " loop in other languages.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s the general form of a ",
              "type" : "text"
            },
            {
              "code" : "repeat",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "repeat {",
            "   <#statements#>",
            "} while <#condition#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Snakes and Ladders",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " example again,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "written as a ",
              "type" : "text"
            },
            {
              "code" : "repeat",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop rather than a ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The values of ",
              "type" : "text"
            },
            {
              "code" : "finalSquare",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "board",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "square",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "diceRoll",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are initialized in exactly the same way as with a ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let finalSquare = 25",
            "var board = [Int](repeating: 0, count: finalSquare + 1)",
            "board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02",
            "board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08",
            "var square = 0",
            "var diceRoll = 0"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this version of the game,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "first",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " action in the loop is to check for a ladder or a snake.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "No ladder on the board takes the player straight to square 25,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so it isn’t possible to win the game by moving up a ladder.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Therefore, it’s safe to check for a snake or a ladder as the first action in the loop.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "At the start of the game, the player is on “square zero”.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "board[0]",
              "type" : "codeVoice"
            },
            {
              "text" : " always equals ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " and has no effect.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "repeat {",
            "    \/\/ move up or down for a snake or ladder",
            "    square += board[square]",
            "    \/\/ roll the dice",
            "    diceRoll += 1",
            "    if diceRoll == 7 { diceRoll = 1 }",
            "    \/\/ move by the rolled amount",
            "    square += diceRoll",
            "} while square < finalSquare",
            "print(\"Game over!\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "After the code checks for snakes and ladders,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the dice is rolled and the player is moved forward by ",
              "type" : "text"
            },
            {
              "code" : "diceRoll",
              "type" : "codeVoice"
            },
            {
              "text" : " squares.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The current loop execution then ends.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The loop’s condition (",
              "type" : "text"
            },
            {
              "code" : "while square < finalSquare",
              "type" : "codeVoice"
            },
            {
              "text" : ") is the same as before,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but this time it’s not evaluated until the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "end",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " of the first run through the loop.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The structure of the ",
              "type" : "text"
            },
            {
              "code" : "repeat",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop is better suited to this game",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "than the ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop in the previous example.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the ",
              "type" : "text"
            },
            {
              "code" : "repeat",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "square += board[square]",
              "type" : "codeVoice"
            },
            {
              "text" : " is always executed ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "immediately after",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the loop’s ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " condition confirms that ",
              "type" : "text"
            },
            {
              "code" : "square",
              "type" : "codeVoice"
            },
            {
              "text" : " is still on the board.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This behavior removes the need for the array bounds check",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "seen in the ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop version of the game described earlier.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Conditional-Statements",
          "level" : 2,
          "text" : "Conditional Statements",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "It’s often useful to execute different pieces of code based on certain conditions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You might want to run an extra piece of code when an error occurs,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or to display a message when a value becomes too high or too low.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To do this, you make parts of your code ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "conditional",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift provides two ways to add conditional branches to your code:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement and the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Typically, you use the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to evaluate simple conditions with only a few possible outcomes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is better suited to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "more complex conditions with multiple possible permutations",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and is useful in situations where pattern matching can help select",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an appropriate code branch to execute.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "If",
          "level" : 3,
          "text" : "If",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In its simplest form,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement has a single ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " condition.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It executes a set of statements only if that condition is ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var temperatureInFahrenheit = 30",
            "if temperatureInFahrenheit <= 32 {",
            "    print(\"It's very cold. Consider wearing a scarf.\")",
            "}",
            "\/\/ Prints \"It's very cold. Consider wearing a scarf.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above checks whether the temperature",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is less than or equal to 32 degrees Fahrenheit",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(the freezing point of water).",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If it is, a message is printed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Otherwise, no message is printed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and code execution continues after the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s closing brace.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement can provide an alternative set of statements,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "known as an ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "else clause",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for situations when the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " condition is ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These statements are indicated by the ",
              "type" : "text"
            },
            {
              "code" : "else",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "temperatureInFahrenheit = 40",
            "if temperatureInFahrenheit <= 32 {",
            "    print(\"It's very cold. Consider wearing a scarf.\")",
            "} else {",
            "    print(\"It's not that cold. Wear a t-shirt.\")",
            "}",
            "\/\/ Prints \"It's not that cold. Wear a t-shirt.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "One of these two branches is always executed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because the temperature has increased to ",
              "type" : "text"
            },
            {
              "code" : "40",
              "type" : "codeVoice"
            },
            {
              "text" : " degrees Fahrenheit,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s no longer cold enough to advise wearing a scarf",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so the ",
              "type" : "text"
            },
            {
              "code" : "else",
              "type" : "codeVoice"
            },
            {
              "text" : " branch is triggered instead.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can chain multiple ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statements together",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to consider additional clauses.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "temperatureInFahrenheit = 90",
            "if temperatureInFahrenheit <= 32 {",
            "    print(\"It's very cold. Consider wearing a scarf.\")",
            "} else if temperatureInFahrenheit >= 86 {",
            "    print(\"It's really warm. Don't forget to wear sunscreen.\")",
            "} else {",
            "    print(\"It's not that cold. Wear a t-shirt.\")",
            "}",
            "\/\/ Prints \"It's really warm. Don't forget to wear sunscreen.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here, an additional ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement was added to respond to particularly warm temperatures.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The final ",
              "type" : "text"
            },
            {
              "code" : "else",
              "type" : "codeVoice"
            },
            {
              "text" : " clause remains,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and it prints a response for any temperatures that are neither too warm nor too cold.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The final ",
              "type" : "text"
            },
            {
              "code" : "else",
              "type" : "codeVoice"
            },
            {
              "text" : " clause is optional, however,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can be excluded if the set of conditions doesn’t need to be complete.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "temperatureInFahrenheit = 72",
            "if temperatureInFahrenheit <= 32 {",
            "    print(\"It's very cold. Consider wearing a scarf.\")",
            "} else if temperatureInFahrenheit >= 86 {",
            "    print(\"It's really warm. Don't forget to wear sunscreen.\")",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because the temperature is neither too cold nor too warm to trigger the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "else if",
              "type" : "codeVoice"
            },
            {
              "text" : " conditions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "no message is printed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Switch",
          "level" : 3,
          "text" : "Switch",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement considers a value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and compares it against several possible matching patterns.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It then executes an appropriate block of code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "based on the first pattern that matches successfully.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement provides an alternative to the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for responding to multiple potential states.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In its simplest form, a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement compares a value against",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "one or more values of the same type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "switch <#some value to consider#> {",
            "case <#value 1#>:",
            "    <#respond to value 1#>",
            "case <#value 2#>,",
            "    <#value 3#>:",
            "    <#respond to value 2 or 3#>",
            "default:",
            "    <#otherwise, do something else#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Every ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement consists of multiple possible ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "cases",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "each of which begins with the ",
              "type" : "text"
            },
            {
              "code" : "case",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In addition to comparing against specific values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift provides several ways for each case to specify",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "more complex matching patterns.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These options are described later in this chapter.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Like the body of an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement, each ",
              "type" : "text"
            },
            {
              "code" : "case",
              "type" : "codeVoice"
            },
            {
              "text" : " is a separate branch of code execution.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement determines which branch should be selected.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This procedure is known as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "switching",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " on the value that’s being considered.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Every ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement must be ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "exhaustive",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "That is, every possible value of the type being considered",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must be matched by one of the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " cases.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If it’s not appropriate to provide a case for every possible value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can define a default case to cover any values that aren’t addressed explicitly.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This default case is indicated by the ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and must always appear last.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example uses a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement to consider",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a single lowercase character called ",
              "type" : "text"
            },
            {
              "code" : "someCharacter",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let someCharacter: Character = \"z\"",
            "switch someCharacter {",
            "case \"a\":",
            "    print(\"The first letter of the alphabet\")",
            "case \"z\":",
            "    print(\"The last letter of the alphabet\")",
            "default:",
            "    print(\"Some other character\")",
            "}",
            "\/\/ Prints \"The last letter of the alphabet\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s first case matches",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the first letter of the English alphabet, ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and its second case matches the last letter, ",
              "type" : "text"
            },
            {
              "code" : "z",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " must have a case for every possible character,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "not just every alphabetic character,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement uses a ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " case",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to match all characters other than ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "z",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This provision ensures that the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is exhaustive.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "No-Implicit-Fallthrough",
          "level" : 4,
          "text" : "No Implicit Fallthrough",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In contrast with ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statements in C and Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statements in Swift don’t",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "fall through the bottom of each case and into the next one by default.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Instead, the entire ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement finishes its execution",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as soon as the first matching ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " case is completed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without requiring an explicit ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This makes the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement safer and easier to use than the one in C",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and avoids executing more than one ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " case by mistake.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Although ",
                  "type" : "text"
                },
                {
                  "code" : "break",
                  "type" : "codeVoice"
                },
                {
                  "text" : " isn’t required in Swift,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you can use a ",
                  "type" : "text"
                },
                {
                  "code" : "break",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement to match and ignore a particular case",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "or to break out of a matched case before that case has completed its execution.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "For details, see ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Break-in-a-Switch-Statement",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "The body of each case ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "must",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " contain at least one executable statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It isn’t valid to write the following code, because the first case is empty:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let anotherCharacter: Character = \"a\"",
            "switch anotherCharacter {",
            "case \"a\": \/\/ Invalid, the case has an empty body",
            "case \"A\":",
            "    print(\"The letter A\")",
            "default:",
            "    print(\"Not the letter A\")",
            "}",
            "\/\/ This will report a compile-time error."
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement in C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement doesn’t match both ",
              "type" : "text"
            },
            {
              "code" : "\"a\"",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "\"A\"",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Rather, it reports a compile-time error that ",
              "type" : "text"
            },
            {
              "code" : "case \"a\":",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "doesn’t contain any executable statements.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This approach avoids accidental fallthrough from one case to another",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and makes for safer code that’s clearer in its intent.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To make a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " with a single case that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "matches both ",
              "type" : "text"
            },
            {
              "code" : "\"a\"",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "\"A\"",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "combine the two values into a compound case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separating the values with commas.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let anotherCharacter: Character = \"a\"",
            "switch anotherCharacter {",
            "case \"a\", \"A\":",
            "    print(\"The letter A\")",
            "default:",
            "    print(\"Not the letter A\")",
            "}",
            "\/\/ Prints \"The letter A\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For readability,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a compound case can also be written over multiple lines.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more information about compound cases,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Compound-Cases",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "To explicitly fall through at the end of a particular ",
                  "type" : "text"
                },
                {
                  "code" : "switch",
                  "type" : "codeVoice"
                },
                {
                  "text" : " case,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "use the ",
                  "type" : "text"
                },
                {
                  "code" : "fallthrough",
                  "type" : "codeVoice"
                },
                {
                  "text" : " keyword,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as described in ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Fallthrough",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Interval-Matching",
          "level" : 4,
          "text" : "Interval Matching",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Values in ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " cases can be checked for their inclusion in an interval.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This example uses number intervals",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to provide a natural-language count for numbers of any size:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let approximateCount = 62",
            "let countedThings = \"moons orbiting Saturn\"",
            "let naturalCount: String",
            "switch approximateCount {",
            "case 0:",
            "    naturalCount = \"no\"",
            "case 1..<5:",
            "    naturalCount = \"a few\"",
            "case 5..<12:",
            "    naturalCount = \"several\"",
            "case 12..<100:",
            "    naturalCount = \"dozens of\"",
            "case 100..<1000:",
            "    naturalCount = \"hundreds of\"",
            "default:",
            "    naturalCount = \"many\"",
            "}",
            "print(\"There are \\(naturalCount) \\(countedThings).\")",
            "\/\/ Prints \"There are dozens of moons orbiting Saturn.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the above example, ",
              "type" : "text"
            },
            {
              "code" : "approximateCount",
              "type" : "codeVoice"
            },
            {
              "text" : " is evaluated in a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each ",
              "type" : "text"
            },
            {
              "code" : "case",
              "type" : "codeVoice"
            },
            {
              "text" : " compares that value to a number or interval.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because the value of ",
              "type" : "text"
            },
            {
              "code" : "approximateCount",
              "type" : "codeVoice"
            },
            {
              "text" : " falls between 12 and 100,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "naturalCount",
              "type" : "codeVoice"
            },
            {
              "text" : " is assigned the value ",
              "type" : "text"
            },
            {
              "code" : "\"dozens of\"",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and execution is transferred out of the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Tuples",
          "level" : 4,
          "text" : "Tuples",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use tuples to test multiple values in the same ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each element of the tuple can be tested against a different value or interval of values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Alternatively, use the underscore character (",
              "type" : "text"
            },
            {
              "code" : "_",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "also known as the wildcard pattern,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to match any possible value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below takes an (x, y) point,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "expressed as a simple tuple of type ",
              "type" : "text"
            },
            {
              "code" : "(Int, Int)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and categorizes it on the graph that follows the example.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let somePoint = (1, 1)",
            "switch somePoint {",
            "case (0, 0):",
            "    print(\"\\(somePoint) is at the origin\")",
            "case (_, 0):",
            "    print(\"\\(somePoint) is on the x-axis\")",
            "case (0, _):",
            "    print(\"\\(somePoint) is on the y-axis\")",
            "case (-2...2, -2...2):",
            "    print(\"\\(somePoint) is inside the box\")",
            "default:",
            "    print(\"\\(somePoint) is outside of the box\")",
            "}",
            "\/\/ Prints \"(1, 1) is inside the box\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "coordinateGraphSimple",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement determines whether the point is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "at the origin (0, 0),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "on the red x-axis,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "on the green y-axis,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "inside the blue 4-by-4 box centered on the origin,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or outside of the box.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike C, Swift allows multiple ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " cases to consider the same value or values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In fact, the point (0, 0) could match all ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "four",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " of the cases in this example.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, if multiple matches are possible,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the first matching case is always used.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The point (0, 0) would match ",
              "type" : "text"
            },
            {
              "code" : "case (0, 0)",
              "type" : "codeVoice"
            },
            {
              "text" : " first,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so all other matching cases would be ignored.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Value-Bindings",
          "level" : 4,
          "text" : "Value Bindings",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " case can name the value or values it matches to temporary constants or variables,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for use in the body of the case.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This behavior is known as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "value binding",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because the values are bound to temporary constants or variables within the case’s body.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below takes an (x, y) point,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "expressed as a tuple of type ",
              "type" : "text"
            },
            {
              "code" : "(Int, Int)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and categorizes it on the graph that follows:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let anotherPoint = (2, 0)",
            "switch anotherPoint {",
            "case (let x, 0):",
            "    print(\"on the x-axis with an x value of \\(x)\")",
            "case (0, let y):",
            "    print(\"on the y-axis with a y value of \\(y)\")",
            "case let (x, y):",
            "    print(\"somewhere else at (\\(x), \\(y))\")",
            "}",
            "\/\/ Prints \"on the x-axis with an x value of 2\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "coordinateGraphMedium",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement determines whether the point is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "on the red x-axis,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "on the green y-axis,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or elsewhere (on neither axis).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The three ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " cases declare placeholder constants ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "y",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which temporarily take on one or both tuple values from ",
              "type" : "text"
            },
            {
              "code" : "anotherPoint",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The first case, ",
              "type" : "text"
            },
            {
              "code" : "case (let x, 0)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "matches any point with a ",
              "type" : "text"
            },
            {
              "code" : "y",
              "type" : "codeVoice"
            },
            {
              "text" : " value of ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and assigns the point’s ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : " value to the temporary constant ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Similarly, the second case, ",
              "type" : "text"
            },
            {
              "code" : "case (0, let y)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "matches any point with an ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : " value of ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and assigns the point’s ",
              "type" : "text"
            },
            {
              "code" : "y",
              "type" : "codeVoice"
            },
            {
              "text" : " value to the temporary constant ",
              "type" : "text"
            },
            {
              "code" : "y",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "After the temporary constants are declared,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "they can be used within the case’s code block.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here, they’re used to print the categorization of the point.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement doesn’t have a ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " case.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The final case, ",
              "type" : "text"
            },
            {
              "code" : "case let (x, y)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "declares a tuple of two placeholder constants that can match any value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "anotherPoint",
              "type" : "codeVoice"
            },
            {
              "text" : " is always a tuple of two values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this case matches all possible remaining values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " case isn’t needed to make the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement exhaustive.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Where",
          "level" : 4,
          "text" : "Where",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " case can use a ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause to check for additional conditions.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below categorizes an (x, y) point on the following graph:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let yetAnotherPoint = (1, -1)",
            "switch yetAnotherPoint {",
            "case let (x, y) where x == y:",
            "    print(\"(\\(x), \\(y)) is on the line x == y\")",
            "case let (x, y) where x == -y:",
            "    print(\"(\\(x), \\(y)) is on the line x == -y\")",
            "case let (x, y):",
            "    print(\"(\\(x), \\(y)) is just some arbitrary point\")",
            "}",
            "\/\/ Prints \"(1, -1) is on the line x == -y\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "coordinateGraphComplex",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement determines whether the point is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "on the green diagonal line where ",
              "type" : "text"
            },
            {
              "code" : "x == y",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "on the purple diagonal line where ",
              "type" : "text"
            },
            {
              "code" : "x == -y",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or neither.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The three ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " cases declare placeholder constants ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "y",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which temporarily take on the two tuple values from ",
              "type" : "text"
            },
            {
              "code" : "yetAnotherPoint",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These constants are used as part of a ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to create a dynamic filter.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " case matches the current value of ",
              "type" : "text"
            },
            {
              "code" : "point",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "only if the ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause’s condition evaluates to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " for that value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "As in the previous example, the final case matches all possible remaining values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so a ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " case isn’t needed to make the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement exhaustive.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Compound-Cases",
          "level" : 4,
          "text" : "Compound Cases",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Multiple switch cases that share the same body",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be combined by writing several patterns after ",
              "type" : "text"
            },
            {
              "code" : "case",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a comma between each of the patterns.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If any of the patterns match, then the case is considered to match.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The patterns can be written over multiple lines if the list is long.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let someCharacter: Character = \"e\"",
            "switch someCharacter {",
            "case \"a\", \"e\", \"i\", \"o\", \"u\":",
            "    print(\"\\(someCharacter) is a vowel\")",
            "case \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",",
            "    \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\":",
            "    print(\"\\(someCharacter) is a consonant\")",
            "default:",
            "    print(\"\\(someCharacter) isn't a vowel or a consonant\")",
            "}",
            "\/\/ Prints \"e is a vowel\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s first case matches",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "all five lowercase vowels in the English language.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Similarly, its second case matches all lowercase English consonants.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Finally, the ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " case matches any other character.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Compound cases can also include value bindings.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "All of the patterns of a compound case",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "have to include the same set of value bindings,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and each binding has to get a value of the same type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from all of the patterns in the compound case.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This ensures that,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "no matter which part of the compound case matched,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the code in the body of the case",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can always access a value for the bindings",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and that the value always has the same type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let stillAnotherPoint = (9, 0)",
            "switch stillAnotherPoint {",
            "case (let distance, 0), (0, let distance):",
            "    print(\"On an axis, \\(distance) from the origin\")",
            "default:",
            "    print(\"Not on an axis\")",
            "}",
            "\/\/ Prints \"On an axis, 9 from the origin\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "case",
              "type" : "codeVoice"
            },
            {
              "text" : " above has two patterns:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "(let distance, 0)",
              "type" : "codeVoice"
            },
            {
              "text" : " matches points on the x-axis",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "code" : "(0, let distance)",
              "type" : "codeVoice"
            },
            {
              "text" : " matches points on the y-axis.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Both patterns include a binding for ",
              "type" : "text"
            },
            {
              "code" : "distance",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "code" : "distance",
              "type" : "codeVoice"
            },
            {
              "text" : " is an integer in both patterns —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which means that the code in the body of the ",
              "type" : "text"
            },
            {
              "code" : "case",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can always access a value for ",
              "type" : "text"
            },
            {
              "code" : "distance",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Control-Transfer-Statements",
          "level" : 2,
          "text" : "Control Transfer Statements",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Control transfer statements",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " change the order in which your code is executed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by transferring control from one piece of code to another.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift has five control transfer statements:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "continue",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "break",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "fallthrough",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "return",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "throw",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "fallthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " statements are described below.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the ",
              "type" : "text"
            },
            {
              "code" : "throw",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Propagating-Errors-Using-Throwing-Functions",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Continue",
          "level" : 3,
          "text" : "Continue",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " statement tells a loop to stop what it’s doing",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and start again at the beginning of the next iteration through the loop.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It says “I am done with the current loop iteration”",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without leaving the loop altogether.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following example removes all vowels and spaces from a lowercase string",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to create a cryptic puzzle phrase:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let puzzleInput = \"great minds think alike\"",
            "var puzzleOutput = \"\"",
            "let charactersToRemove: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \" \"]",
            "for character in puzzleInput {",
            "    if charactersToRemove.contains(character) {",
            "        continue",
            "    }",
            "    puzzleOutput.append(character)",
            "}",
            "print(puzzleOutput)",
            "\/\/ Prints \"grtmndsthnklk\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The code above calls the ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword whenever it matches a vowel or a space,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "causing the current iteration of the loop to end immediately",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to jump straight to the start of the next iteration.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Break",
          "level" : 3,
          "text" : "Break",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement ends execution of an entire control flow statement immediately.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement can be used inside a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " or loop statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when you want to terminate the execution of the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " or loop statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "earlier than would otherwise be the case.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Break-in-a-Loop-Statement",
          "level" : 4,
          "text" : "Break in a Loop Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "When used inside a loop statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " ends the loop’s execution immediately",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and transfers control to the code after the loop’s closing brace (",
              "type" : "text"
            },
            {
              "code" : "}",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "No further code from the current iteration of the loop is executed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and no further iterations of the loop are started.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Break-in-a-Switch-Statement",
          "level" : 4,
          "text" : "Break in a Switch Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "When used inside a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " causes the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement to end its execution immediately",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to transfer control to the code after",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s closing brace (",
              "type" : "text"
            },
            {
              "code" : "}",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This behavior can be used to match and ignore one or more cases in a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because Swift’s ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is exhaustive",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and doesn’t allow empty cases,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s sometimes necessary to deliberately match and ignore a case",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in order to make your intentions explicit.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You do this by writing the ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement as the entire body of the case you want to ignore.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When that case is matched by the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement inside the case ends the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s execution immediately.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "A ",
                  "type" : "text"
                },
                {
                  "code" : "switch",
                  "type" : "codeVoice"
                },
                {
                  "text" : " case that contains only a comment is reported as a compile-time error.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Comments aren’t statements and don’t cause a ",
                  "type" : "text"
                },
                {
                  "code" : "switch",
                  "type" : "codeVoice"
                },
                {
                  "text" : " case to be ignored.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Always use a ",
                  "type" : "text"
                },
                {
                  "code" : "break",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement to ignore a ",
                  "type" : "text"
                },
                {
                  "code" : "switch",
                  "type" : "codeVoice"
                },
                {
                  "text" : " case.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following example switches on a ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and determines whether it represents a number symbol in one of four languages.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For brevity, multiple values are covered in a single ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " case.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let numberSymbol: Character = \"三\"  \/\/ Chinese symbol for the number 3",
            "var possibleIntegerValue: Int?",
            "switch numberSymbol {",
            "case \"1\", \"١\", \"一\", \"๑\":",
            "    possibleIntegerValue = 1",
            "case \"2\", \"٢\", \"二\", \"๒\":",
            "    possibleIntegerValue = 2",
            "case \"3\", \"٣\", \"三\", \"๓\":",
            "    possibleIntegerValue = 3",
            "case \"4\", \"٤\", \"四\", \"๔\":",
            "    possibleIntegerValue = 4",
            "default:",
            "    break",
            "}",
            "if let integerValue = possibleIntegerValue {",
            "    print(\"The integer value of \\(numberSymbol) is \\(integerValue).\")",
            "} else {",
            "    print(\"An integer value couldn't be found for \\(numberSymbol).\")",
            "}",
            "\/\/ Prints \"The integer value of 三 is 3.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example checks ",
              "type" : "text"
            },
            {
              "code" : "numberSymbol",
              "type" : "codeVoice"
            },
            {
              "text" : " to determine whether it’s",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a Latin, Arabic, Chinese, or Thai symbol for",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the numbers ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : " to ",
              "type" : "text"
            },
            {
              "code" : "4",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If a match is found,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "one of the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s cases sets",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an optional ",
              "type" : "text"
            },
            {
              "code" : "Int?",
              "type" : "codeVoice"
            },
            {
              "text" : " variable called ",
              "type" : "text"
            },
            {
              "code" : "possibleIntegerValue",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to an appropriate integer value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "After the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement completes its execution,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the example uses optional binding to determine whether a value was found.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "possibleIntegerValue",
              "type" : "codeVoice"
            },
            {
              "text" : " variable has an implicit initial value of ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by virtue of being an optional type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so the optional binding will succeed only",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if ",
              "type" : "text"
            },
            {
              "code" : "possibleIntegerValue",
              "type" : "codeVoice"
            },
            {
              "text" : " was set to an actual value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by one of the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s first four cases.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because it’s not practical to list every possible ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " value in the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " case handles any characters that aren’t matched.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " case doesn’t need to perform any action,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so it’s written with a single ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement as its body.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As soon as the ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " case is matched,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement ends the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s execution,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and code execution continues from the ",
              "type" : "text"
            },
            {
              "code" : "if let",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Fallthrough",
          "level" : 3,
          "text" : "Fallthrough",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In Swift, ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statements don’t fall through the bottom of each case and into the next one.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "That is, the entire ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement completes its execution as soon as the first matching case is completed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "By contrast, C requires you to insert an explicit ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "at the end of every ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " case to prevent fallthrough.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Avoiding default fallthrough means that Swift ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statements are",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "much more concise and predictable than their counterparts in C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and thus they avoid executing multiple ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " cases by mistake.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you need C-style fallthrough behavior,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can opt in to this behavior on a case-by-case basis with the ",
              "type" : "text"
            },
            {
              "code" : "fallthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example below uses ",
              "type" : "text"
            },
            {
              "code" : "fallthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " to create a textual description of a number.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let integerToDescribe = 5",
            "var description = \"The number \\(integerToDescribe) is\"",
            "switch integerToDescribe {",
            "case 2, 3, 5, 7, 11, 13, 17, 19:",
            "    description += \" a prime number, and also\"",
            "    fallthrough",
            "default:",
            "    description += \" an integer.\"",
            "}",
            "print(description)",
            "\/\/ Prints \"The number 5 is a prime number, and also an integer.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example declares a new ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " variable called ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and assigns it an initial value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The function then considers the value of ",
              "type" : "text"
            },
            {
              "code" : "integerToDescribe",
              "type" : "codeVoice"
            },
            {
              "text" : " using a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the value of ",
              "type" : "text"
            },
            {
              "code" : "integerToDescribe",
              "type" : "codeVoice"
            },
            {
              "text" : " is one of the prime numbers in the list,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the function appends text to the end of ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to note that the number is prime.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It then uses the ",
              "type" : "text"
            },
            {
              "code" : "fallthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword to “fall into” the ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " case as well.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " case adds some extra text to the end of the description,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement is complete.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unless the value of ",
              "type" : "text"
            },
            {
              "code" : "integerToDescribe",
              "type" : "codeVoice"
            },
            {
              "text" : " is in the list of known prime numbers,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it isn’t matched by the first ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " case at all.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because there are no other specific cases,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "integerToDescribe",
              "type" : "codeVoice"
            },
            {
              "text" : " is matched by the ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " case.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "After the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement has finished executing,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the number’s description is printed using the ",
              "type" : "text"
            },
            {
              "code" : "print(_:separator:terminator:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In this example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the number ",
              "type" : "text"
            },
            {
              "code" : "5",
              "type" : "codeVoice"
            },
            {
              "text" : " is correctly identified as a prime number.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The ",
                  "type" : "text"
                },
                {
                  "code" : "fallthrough",
                  "type" : "codeVoice"
                },
                {
                  "text" : " keyword doesn’t check the case conditions",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "for the ",
                  "type" : "text"
                },
                {
                  "code" : "switch",
                  "type" : "codeVoice"
                },
                {
                  "text" : " case that it causes execution to fall into.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The ",
                  "type" : "text"
                },
                {
                  "code" : "fallthrough",
                  "type" : "codeVoice"
                },
                {
                  "text" : " keyword simply causes code execution to move",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "directly to the statements inside the next case (or ",
                  "type" : "text"
                },
                {
                  "code" : "default",
                  "type" : "codeVoice"
                },
                {
                  "text" : " case) block,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as in C’s standard ",
                  "type" : "text"
                },
                {
                  "code" : "switch",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement behavior.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Labeled-Statements",
          "level" : 3,
          "text" : "Labeled Statements",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In Swift, you can nest loops and conditional statements",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "inside other loops and conditional statements",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to create complex control flow structures.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, loops and conditional statements can both use the ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to end their execution prematurely.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Therefore, it’s sometimes useful to be explicit about",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which loop or conditional statement you want a ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement to terminate.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Similarly, if you have multiple nested loops,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it can be useful to be explicit about which loop the ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "should affect.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To achieve these aims,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can mark a loop statement or conditional statement with a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "statement label",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "With a conditional statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use a statement label with the ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to end the execution of the labeled statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "With a loop statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use a statement label with the ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to end or continue the execution of the labeled statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A labeled statement is indicated by placing",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a label on the same line as the statement’s introducer keyword, followed by a colon.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s an example of this syntax for a ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "although the principle is the same for all loops and ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statements:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<#label name#>: while <#condition#> {",
            "   <#statements#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following example uses the ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : " statements",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a labeled ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop for an adapted version of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Snakes and Ladders",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " game",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that you saw earlier in this chapter.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This time around, the game has an extra rule:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "To win, you must land ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "exactly",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " on square 25.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "If a particular dice roll would take you beyond square 25,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you must roll again until you roll the exact number needed to land on square 25.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The game board is the same as before.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "snakesAndLadders",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The values of ",
              "type" : "text"
            },
            {
              "code" : "finalSquare",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "board",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "square",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "diceRoll",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are initialized in the same way as before:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let finalSquare = 25",
            "var board = [Int](repeating: 0, count: finalSquare + 1)",
            "board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02",
            "board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08",
            "var square = 0",
            "var diceRoll = 0"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This version of the game uses a ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop and a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to implement the game’s logic.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop has a statement label called ",
              "type" : "text"
            },
            {
              "code" : "gameLoop",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that it’s the main game loop for the Snakes and Ladders game.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " loop’s condition is ",
              "type" : "text"
            },
            {
              "code" : "while square != finalSquare",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to reflect that you must land exactly on square 25.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "gameLoop: while square != finalSquare {",
            "    diceRoll += 1",
            "    if diceRoll == 7 { diceRoll = 1 }",
            "    switch square + diceRoll {",
            "    case finalSquare:",
            "        \/\/ diceRoll will move us to the final square, so the game is over",
            "        break gameLoop",
            "    case let newSquare where newSquare > finalSquare:",
            "        \/\/ diceRoll will move us beyond the final square, so roll again",
            "        continue gameLoop",
            "    default:",
            "        \/\/ this is a valid move, so find out its effect",
            "        square += diceRoll",
            "        square += board[square]",
            "    }",
            "}",
            "print(\"Game over!\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The dice is rolled at the start of each loop.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Rather than moving the player immediately,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the loop uses a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement to consider the result of the move",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to determine whether the move is allowed:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If the dice roll will move the player onto the final square,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the game is over.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "code" : "break gameLoop",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " statement transfers control to",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the first line of code outside of the ",
                      "type" : "text"
                    },
                    {
                      "code" : "while",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " loop, which ends the game.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If the dice roll will move the player ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "beyond",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " the final square,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the move is invalid and the player needs to roll again.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "code" : "continue gameLoop",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " statement ends the current ",
                      "type" : "text"
                    },
                    {
                      "code" : "while",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " loop iteration",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and begins the next iteration of the loop.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "In all other cases, the dice roll is a valid move.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "The player moves forward by ",
                      "type" : "text"
                    },
                    {
                      "code" : "diceRoll",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " squares,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and the game logic checks for any snakes and ladders.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "The loop then ends, and control returns to the ",
                      "type" : "text"
                    },
                    {
                      "code" : "while",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " condition",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "to decide whether another turn is required.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "If the ",
                  "type" : "text"
                },
                {
                  "code" : "break",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement above didn’t use the ",
                  "type" : "text"
                },
                {
                  "code" : "gameLoop",
                  "type" : "codeVoice"
                },
                {
                  "text" : " label,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "it would break out of the ",
                  "type" : "text"
                },
                {
                  "code" : "switch",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement, not the ",
                  "type" : "text"
                },
                {
                  "code" : "while",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Using the ",
                  "type" : "text"
                },
                {
                  "code" : "gameLoop",
                  "type" : "codeVoice"
                },
                {
                  "text" : " label makes it clear which control statement should be terminated.It isn’t strictly necessary to use the ",
                  "type" : "text"
                },
                {
                  "code" : "gameLoop",
                  "type" : "codeVoice"
                },
                {
                  "text" : " label",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "when calling ",
                  "type" : "text"
                },
                {
                  "code" : "continue gameLoop",
                  "type" : "codeVoice"
                },
                {
                  "text" : " to jump to the next iteration of the loop.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "there’s only one loop in the game,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and therefore no ambiguity as to which loop the ",
                  "type" : "text"
                },
                {
                  "code" : "continue",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement will affect.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "However, there’s no harm in using the ",
                  "type" : "text"
                },
                {
                  "code" : "gameLoop",
                  "type" : "codeVoice"
                },
                {
                  "text" : " label with the ",
                  "type" : "text"
                },
                {
                  "code" : "continue",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Doing so is consistent with the label’s use alongside the ",
                  "type" : "text"
                },
                {
                  "code" : "break",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and helps make the game’s logic clearer to read and understand.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Early-Exit",
          "level" : 2,
          "text" : "Early Exit",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement, like an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "executes statements depending on the Boolean value of an expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You use a ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement to require that a condition must be true",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in order for the code after the ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement to be executed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Unlike an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement always has an ",
              "type" : "text"
            },
            {
              "code" : "else",
              "type" : "codeVoice"
            },
            {
              "text" : " clause —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the code inside the ",
              "type" : "text"
            },
            {
              "code" : "else",
              "type" : "codeVoice"
            },
            {
              "text" : " clause is executed if the condition isn’t true.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func greet(person: [String: String]) {",
            "    guard let name = person[\"name\"] else {",
            "        return",
            "    }",
            "",
            "    print(\"Hello \\(name)!\")",
            "",
            "    guard let location = person[\"location\"] else {",
            "        print(\"I hope the weather is nice near you.\")",
            "        return",
            "    }",
            "",
            "    print(\"I hope the weather is nice in \\(location).\")",
            "}",
            "",
            "greet(person: [\"name\": \"John\"])",
            "\/\/ Prints \"Hello John!\"",
            "\/\/ Prints \"I hope the weather is nice near you.\"",
            "greet(person: [\"name\": \"Jane\", \"location\": \"Cupertino\"])",
            "\/\/ Prints \"Hello Jane!\"",
            "\/\/ Prints \"I hope the weather is nice in Cupertino.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s condition is met,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "code execution continues after the ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s closing brace.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Any variables or constants that were assigned values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using an optional binding as part of the condition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are available for the rest of the code block",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that the ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement appears in.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If that condition isn’t met,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the code inside the ",
              "type" : "text"
            },
            {
              "code" : "else",
              "type" : "codeVoice"
            },
            {
              "text" : " branch is executed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "That branch must transfer control to exit the code block",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in which the ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement appears.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It can do this with a control transfer statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "throw",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or it can call a function or method",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that doesn’t return, such as ",
              "type" : "text"
            },
            {
              "code" : "fatalError(_:file:line:)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Using a ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement for requirements",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "improves the readability of your code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "compared to doing the same check with an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It lets you write the code that’s typically executed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without wrapping it in an ",
              "type" : "text"
            },
            {
              "code" : "else",
              "type" : "codeVoice"
            },
            {
              "text" : " block,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and it lets you keep the code that handles a violated requirement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "next to the requirement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Checking-API-Availability",
          "level" : 2,
          "text" : "Checking API Availability",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift has built-in support for checking API availability,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which ensures that you don’t accidentally use APIs that are unavailable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "on a given deployment target.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The compiler uses availability information in the SDK",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to verify that all of the APIs used in your code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are available on the deployment target specified by your project.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift reports an error at compile time",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if you try to use an API that isn’t available.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You use an ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "availability condition",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " in an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to conditionally execute a block of code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "depending on whether the APIs you want to use are available at runtime.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The compiler uses the information from the availability condition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when it verifies that the APIs in that block of code are available.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if #available(iOS 10, macOS 10.12, *) {",
            "    \/\/ Use iOS 10 APIs on iOS, and use macOS 10.12 APIs on macOS",
            "} else {",
            "    \/\/ Fall back to earlier iOS and macOS APIs",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The availability condition above specifies that in iOS,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the body of the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement executes only in iOS 10 and later;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in macOS, only in macOS 10.12 and later.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The last argument, ",
              "type" : "text"
            },
            {
              "code" : "*",
              "type" : "codeVoice"
            },
            {
              "text" : ", is required and specifies that on any other platform,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the body of the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " executes on the minimum deployment target specified by your target.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In its general form,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the availability condition takes a list of platform names and versions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You use platform names such as ",
              "type" : "text"
            },
            {
              "code" : "iOS",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "macOS",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "watchOS",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "tvOS",
              "type" : "codeVoice"
            },
            {
              "text" : " —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for the full list, see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In addition to specifying major version numbers like iOS 8 or macOS 10.10,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can specify minor versions numbers like iOS 11.2.6 and macOS 10.13.3.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if #available(<#platform name#> <#version#>, <#...#>, *) {",
            "    <#statements to execute if the APIs are available#>",
            "} else {",
            "    <#fallback statements to execute if the APIs are unavailable#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you use an availability condition with a ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it refines the availability information that’s used",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for the rest of the code in that code block.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@available(macOS 10.12, *)",
            "struct ColorPreference {",
            "    var bestColor = \"blue\"",
            "}",
            "",
            "func chooseBestColor() -> String {",
            "    guard #available(macOS 10.12, *) else {",
            "       return \"gray\"",
            "    }",
            "    let colors = ColorPreference()",
            "    return colors.bestColor",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "ColorPreference",
              "type" : "codeVoice"
            },
            {
              "text" : " structure requires macOS 10.12 or later.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "chooseBestColor()",
              "type" : "codeVoice"
            },
            {
              "text" : " function begins with an availability guard.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the platform version is too old to use ",
              "type" : "text"
            },
            {
              "code" : "ColorPreference",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it falls back to behavior that’s always available.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "After the ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use APIs that require macOS 10.12 or later.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In addition to ",
              "type" : "text"
            },
            {
              "code" : "#available",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift also supports the opposite check using an unavailability condition.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, the following two checks do the same thing:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if #available(iOS 10, *) {",
            "} else {",
            "    \/\/ Fallback code",
            "}",
            "",
            "if #unavailable(iOS 10) {",
            "    \/\/ Fallback code",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Using the ",
              "type" : "text"
            },
            {
              "code" : "#unavailable",
              "type" : "codeVoice"
            },
            {
              "text" : " form helps make your code more readable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when the check contains only fallback code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/the-swift-programming-language\/controlflow"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"coordinateGraphComplex": {
  "alt" : null,
  "identifier" : "coordinateGraphComplex",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/coordinateGraphComplex@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/coordinateGraphComplex~dark@2x.png"
    }
  ]
},
"coordinateGraphMedium": {
  "alt" : null,
  "identifier" : "coordinateGraphMedium",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/coordinateGraphMedium@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/coordinateGraphMedium~dark@2x.png"
    }
  ]
},
"coordinateGraphSimple": {
  "alt" : null,
  "identifier" : "coordinateGraphSimple",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/coordinateGraphSimple@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/coordinateGraphSimple~dark@2x.png"
    }
  ]
},
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Declaration-Attributes": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes",
  "kind" : "section",
  "title" : "Declaration Attributes",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/attributes#Declaration-Attributes"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators#Range-Operators": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Range-Operators",
  "kind" : "section",
  "title" : "Range Operators",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/basicoperators#Range-Operators"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes": {
  "abstract" : [
    {
      "text" : "Organize data using arrays, sets, and dictionaries.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes",
  "kind" : "article",
  "role" : "article",
  "title" : "Collection Types",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/collectiontypes"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Break-in-a-Switch-Statement": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Break-in-a-Switch-Statement",
  "kind" : "section",
  "title" : "Break in a Switch Statement",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow#Break-in-a-Switch-Statement"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Compound-Cases": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Compound-Cases",
  "kind" : "section",
  "title" : "Compound Cases",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow#Compound-Cases"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Fallthrough": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Fallthrough",
  "kind" : "section",
  "title" : "Fallthrough",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow#Fallthrough"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling#Propagating-Errors-Using-Throwing-Functions": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Propagating-Errors-Using-Throwing-Functions",
  "kind" : "section",
  "title" : "Propagating Errors Using Throwing Functions",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/errorhandling#Propagating-Errors-Using-Throwing-Functions"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions": {
  "abstract" : [
    {
      "text" : "Define and call functions, label their arguments, and use their return values.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions",
  "kind" : "article",
  "role" : "article",
  "title" : "Functions",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/functions"
},
"https://developer.apple.com/documentation/swift/sequence": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/sequence",
  "title" : "Sequence",
  "titleInlineContent" : [
    {
      "text" : "Sequence",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/sequence"
},
"snakesAndLadders": {
  "alt" : null,
  "identifier" : "snakesAndLadders",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/snakesAndLadders@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/snakesAndLadders~dark@2x.png"
    }
  ]
}
}
}