{
  "abstract" : [
    {
      "text" : "Model custom types that encapsulate data.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures"
  },
  "kind" : "article",
  "metadata" : {
    "title" : "Structures and Classes"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Structures",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "classes",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " are general-purpose,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "flexible constructs that become the building blocks of your program’s code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You define properties and methods to add functionality to your structures and classes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using the same syntax you use to define constants, variables, and functions.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike other programming languages,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift doesn’t require you to create separate interface and implementation files",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for custom structures and classes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In Swift, you define a structure or class in a single file,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the external interface to that class or structure is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "automatically made available for other code to use.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "An instance of a class is traditionally known as an ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "object",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "However, Swift structures and classes",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "are much closer in functionality than in other languages,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and much of this chapter describes functionality that applies to",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "instances of ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "either",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " a class or a structure type.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Because of this, the more general term ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "instance",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " is used.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Comparing-Structures-and-Classes",
          "level" : 2,
          "text" : "Comparing Structures and Classes",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Structures and classes in Swift have many things in common.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Both can:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Define properties to store values",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Define methods to provide functionality",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Define subscripts to provide access to their values using subscript syntax",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Define initializers to set up their initial state",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Be extended to expand their functionality beyond a default implementation",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Conform to protocols to provide standard functionality of a certain kind",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information, see",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Classes have additional capabilities that structures don’t have:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Inheritance enables one class to inherit the characteristics of another.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Type casting enables you to check and interpret the type of a class instance at runtime.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Deinitializers enable an instance of a class to free up any resources it has assigned.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Reference counting allows more than one reference to a class instance.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information, see",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The additional capabilities that classes support",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "come at the cost of increased complexity.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As a general guideline,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "prefer structures because they’re easier to reason about,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and use classes when they’re appropriate or necessary.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In practice, this means most of the custom types you define",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "will be structures and enumerations.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For a more detailed comparison,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Classes and actors share many of the same characteristics and behaviors.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "For information about actors, see ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Definition-Syntax",
          "level" : 3,
          "text" : "Definition Syntax",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Structures and classes have a similar definition syntax.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You introduce structures with the ",
              "type" : "text"
            },
            {
              "code" : "struct",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and classes with the ",
              "type" : "text"
            },
            {
              "code" : "class",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Both place their entire definition within a pair of braces:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct SomeStructure {",
            "    \/\/ structure definition goes here",
            "}",
            "class SomeClass {",
            "    \/\/ class definition goes here",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Whenever you define a new structure or class,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you define a new Swift type.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Give types ",
                  "type" : "text"
                },
                {
                  "code" : "UpperCamelCase",
                  "type" : "codeVoice"
                },
                {
                  "text" : " names",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "(such as ",
                  "type" : "text"
                },
                {
                  "code" : "SomeStructure",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "SomeClass",
                  "type" : "codeVoice"
                },
                {
                  "text" : " here)",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "to match the capitalization of standard Swift types",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "(such as ",
                  "type" : "text"
                },
                {
                  "code" : "String",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "Int",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", and ",
                  "type" : "text"
                },
                {
                  "code" : "Bool",
                  "type" : "codeVoice"
                },
                {
                  "text" : ").",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Give properties and methods ",
                  "type" : "text"
                },
                {
                  "code" : "lowerCamelCase",
                  "type" : "codeVoice"
                },
                {
                  "text" : " names",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "(such as ",
                  "type" : "text"
                },
                {
                  "code" : "frameRate",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "incrementCount",
                  "type" : "codeVoice"
                },
                {
                  "text" : ")",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "to differentiate them from type names.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s an example of a structure definition and a class definition:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Resolution {",
            "    var width = 0",
            "    var height = 0",
            "}",
            "class VideoMode {",
            "    var resolution = Resolution()",
            "    var interlaced = false",
            "    var frameRate = 0.0",
            "    var name: String?",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above defines a new structure called ",
              "type" : "text"
            },
            {
              "code" : "Resolution",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to describe a pixel-based display resolution.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This structure has two stored properties called ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "height",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Stored properties are constants or variables that are bundled up and stored",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as part of the structure or class.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These two properties are inferred to be of type ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by setting them to an initial integer value of ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above also defines a new class called ",
              "type" : "text"
            },
            {
              "code" : "VideoMode",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to describe a specific video mode for video display.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This class has four variable stored properties.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The first, ",
              "type" : "text"
            },
            {
              "code" : "resolution",
              "type" : "codeVoice"
            },
            {
              "text" : ", is initialized with a new ",
              "type" : "text"
            },
            {
              "code" : "Resolution",
              "type" : "codeVoice"
            },
            {
              "text" : " structure instance,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which infers a property type of ",
              "type" : "text"
            },
            {
              "code" : "Resolution",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For the other three properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "new ",
              "type" : "text"
            },
            {
              "code" : "VideoMode",
              "type" : "codeVoice"
            },
            {
              "text" : " instances will be initialized with",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an ",
              "type" : "text"
            },
            {
              "code" : "interlaced",
              "type" : "codeVoice"
            },
            {
              "text" : " setting of ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " (meaning “noninterlaced video”),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a playback frame rate of ",
              "type" : "text"
            },
            {
              "code" : "0.0",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and an optional ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value called ",
              "type" : "text"
            },
            {
              "code" : "name",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "name",
              "type" : "codeVoice"
            },
            {
              "text" : " property is automatically given a default value of ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or “no ",
              "type" : "text"
            },
            {
              "code" : "name",
              "type" : "codeVoice"
            },
            {
              "text" : " value”, because it’s of an optional type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Structure-and-Class-Instances",
          "level" : 3,
          "text" : "Structure and Class Instances",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Resolution",
              "type" : "codeVoice"
            },
            {
              "text" : " structure definition and the ",
              "type" : "text"
            },
            {
              "code" : "VideoMode",
              "type" : "codeVoice"
            },
            {
              "text" : " class definition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "only describe what a ",
              "type" : "text"
            },
            {
              "code" : "Resolution",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "VideoMode",
              "type" : "codeVoice"
            },
            {
              "text" : " will look like.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "They themselves don’t describe a specific resolution or video mode.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To do that, you need to create an instance of the structure or class.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The syntax for creating instances is very similar for both structures and classes:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let someResolution = Resolution()",
            "let someVideoMode = VideoMode()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Structures and classes both use initializer syntax for new instances.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The simplest form of initializer syntax uses the type name of the class or structure",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by empty parentheses, such as ",
              "type" : "text"
            },
            {
              "code" : "Resolution()",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "VideoMode()",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This creates a new instance of the class or structure,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with any properties initialized to their default values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Class and structure initialization is described in more detail",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Accessing-Properties",
          "level" : 3,
          "text" : "Accessing Properties",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can access the properties of an instance using ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "dot syntax",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In dot syntax, you write the property name immediately after the instance name,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separated by a period (",
              "type" : "text"
            },
            {
              "code" : ".",
              "type" : "codeVoice"
            },
            {
              "text" : "), without any spaces:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"The width of someResolution is \\(someResolution.width)\")",
            "\/\/ Prints \"The width of someResolution is 0\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "someResolution.width",
              "type" : "codeVoice"
            },
            {
              "text" : " refers to the ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " property of ",
              "type" : "text"
            },
            {
              "code" : "someResolution",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and returns its default initial value of ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can drill down into subproperties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as the ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " property in the ",
              "type" : "text"
            },
            {
              "code" : "resolution",
              "type" : "codeVoice"
            },
            {
              "text" : " property of a ",
              "type" : "text"
            },
            {
              "code" : "VideoMode",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"The width of someVideoMode is \\(someVideoMode.resolution.width)\")",
            "\/\/ Prints \"The width of someVideoMode is 0\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also use dot syntax to assign a new value to a variable property:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "someVideoMode.resolution.width = 1280",
            "print(\"The width of someVideoMode is now \\(someVideoMode.resolution.width)\")",
            "\/\/ Prints \"The width of someVideoMode is now 1280\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Memberwise-Initializers-for-Structure-Types",
          "level" : 3,
          "text" : "Memberwise Initializers for Structure Types",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "All structures have an automatically generated ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "memberwise initializer",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which you can use to initialize the member properties of new structure instances.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Initial values for the properties of the new instance",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be passed to the memberwise initializer by name:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let vga = Resolution(width: 640, height: 480)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike structures, class instances don’t receive a default memberwise initializer.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Initializers are described in more detail in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Structures-and-Enumerations-Are-Value-Types",
          "level" : 2,
          "text" : "Structures and Enumerations Are Value Types",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "value type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is a type whose value is ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "copied",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when it’s assigned to a variable or constant,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or when it’s passed to a function.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You’ve actually been using value types extensively throughout the previous chapters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In fact, all of the basic types in Swift —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "integers, floating-point numbers, Booleans, strings, arrays and dictionaries —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are value types, and are implemented as structures behind the scenes.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "All structures and enumerations are value types in Swift.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This means that any structure and enumeration instances you create —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and any value types they have as properties —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are always copied when they’re passed around in your code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Collections defined by the standard library",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "like arrays, dictionaries, and strings",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "use an optimization to reduce the performance cost of copying.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Instead of making a copy immediately,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "these collections share the memory where the elements are stored",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "between the original instance and any copies.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If one of the copies of the collection is modified,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the elements are copied just before the modification.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The behavior you see in your code",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "is always as if a copy took place immediately.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Consider this example, which uses the ",
              "type" : "text"
            },
            {
              "code" : "Resolution",
              "type" : "codeVoice"
            },
            {
              "text" : " structure from the previous example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let hd = Resolution(width: 1920, height: 1080)",
            "var cinema = hd"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example declares a constant called ",
              "type" : "text"
            },
            {
              "code" : "hd",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and sets it to a ",
              "type" : "text"
            },
            {
              "code" : "Resolution",
              "type" : "codeVoice"
            },
            {
              "text" : " instance initialized with",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the width and height of full HD video",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(1920 pixels wide by 1080 pixels high).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "It then declares a variable called ",
              "type" : "text"
            },
            {
              "code" : "cinema",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and sets it to the current value of ",
              "type" : "text"
            },
            {
              "code" : "hd",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "Resolution",
              "type" : "codeVoice"
            },
            {
              "text" : " is a structure,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "copy",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " of the existing instance is made,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and this new copy is assigned to ",
              "type" : "text"
            },
            {
              "code" : "cinema",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Even though ",
              "type" : "text"
            },
            {
              "code" : "hd",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "cinema",
              "type" : "codeVoice"
            },
            {
              "text" : " now have the same width and height,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "they’re two completely different instances behind the scenes.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Next, the ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " property of ",
              "type" : "text"
            },
            {
              "code" : "cinema",
              "type" : "codeVoice"
            },
            {
              "text" : " is amended to be",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the width of the slightly wider 2K standard used for digital cinema projection",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(2048 pixels wide and 1080 pixels high):",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "cinema.width = 2048"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Checking the ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " property of ",
              "type" : "text"
            },
            {
              "code" : "cinema",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "shows that it has indeed changed to be ",
              "type" : "text"
            },
            {
              "code" : "2048",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"cinema is now \\(cinema.width) pixels wide\")",
            "\/\/ Prints \"cinema is now 2048 pixels wide\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "However, the ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " property of the original ",
              "type" : "text"
            },
            {
              "code" : "hd",
              "type" : "codeVoice"
            },
            {
              "text" : " instance",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "still has the old value of ",
              "type" : "text"
            },
            {
              "code" : "1920",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"hd is still \\(hd.width) pixels wide\")",
            "\/\/ Prints \"hd is still 1920 pixels wide\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When ",
              "type" : "text"
            },
            {
              "code" : "cinema",
              "type" : "codeVoice"
            },
            {
              "text" : " was given the current value of ",
              "type" : "text"
            },
            {
              "code" : "hd",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "values",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " stored in ",
              "type" : "text"
            },
            {
              "code" : "hd",
              "type" : "codeVoice"
            },
            {
              "text" : " were copied into the new ",
              "type" : "text"
            },
            {
              "code" : "cinema",
              "type" : "codeVoice"
            },
            {
              "text" : " instance.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The end result was two completely separate instances",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that contained the same numeric values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, because they’re separate instances,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "setting the width of ",
              "type" : "text"
            },
            {
              "code" : "cinema",
              "type" : "codeVoice"
            },
            {
              "text" : " to ",
              "type" : "text"
            },
            {
              "code" : "2048",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "doesn’t affect the width stored in ",
              "type" : "text"
            },
            {
              "code" : "hd",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as shown in the figure below:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "sharedStateStruct",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The same behavior applies to enumerations:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum CompassPoint {",
            "    case north, south, east, west",
            "    mutating func turnNorth() {",
            "        self = .north",
            "    }",
            "}",
            "var currentDirection = CompassPoint.west",
            "let rememberedDirection = currentDirection",
            "currentDirection.turnNorth()",
            "",
            "print(\"The current direction is \\(currentDirection)\")",
            "print(\"The remembered direction is \\(rememberedDirection)\")",
            "\/\/ Prints \"The current direction is north\"",
            "\/\/ Prints \"The remembered direction is west\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When ",
              "type" : "text"
            },
            {
              "code" : "rememberedDirection",
              "type" : "codeVoice"
            },
            {
              "text" : " is assigned the value of ",
              "type" : "text"
            },
            {
              "code" : "currentDirection",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s actually set to a copy of that value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Changing the value of ",
              "type" : "text"
            },
            {
              "code" : "currentDirection",
              "type" : "codeVoice"
            },
            {
              "text" : " thereafter doesn’t affect",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the copy of the original value that was stored in ",
              "type" : "text"
            },
            {
              "code" : "rememberedDirection",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Classes-Are-Reference-Types",
          "level" : 2,
          "text" : "Classes Are Reference Types",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike value types, ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "reference types",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " are ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "not",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " copied",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when they’re assigned to a variable or constant,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or when they’re passed to a function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Rather than a copy, a reference to the same existing instance is used.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s an example, using the ",
              "type" : "text"
            },
            {
              "code" : "VideoMode",
              "type" : "codeVoice"
            },
            {
              "text" : " class defined above:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let tenEighty = VideoMode()",
            "tenEighty.resolution = hd",
            "tenEighty.interlaced = true",
            "tenEighty.name = \"1080i\"",
            "tenEighty.frameRate = 25.0"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example declares a new constant called ",
              "type" : "text"
            },
            {
              "code" : "tenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and sets it to refer to a new instance of the ",
              "type" : "text"
            },
            {
              "code" : "VideoMode",
              "type" : "codeVoice"
            },
            {
              "text" : " class.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The video mode is assigned a copy of the HD resolution of ",
              "type" : "text"
            },
            {
              "code" : "1920",
              "type" : "codeVoice"
            },
            {
              "text" : " by ",
              "type" : "text"
            },
            {
              "code" : "1080",
              "type" : "codeVoice"
            },
            {
              "text" : " from before.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It’s set to be interlaced,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "its name is set to ",
              "type" : "text"
            },
            {
              "code" : "\"1080i\"",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and its frame rate is set to ",
              "type" : "text"
            },
            {
              "code" : "25.0",
              "type" : "codeVoice"
            },
            {
              "text" : " frames per second.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Next, ",
              "type" : "text"
            },
            {
              "code" : "tenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : " is assigned to a new constant, called ",
              "type" : "text"
            },
            {
              "code" : "alsoTenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the frame rate of ",
              "type" : "text"
            },
            {
              "code" : "alsoTenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : " is modified:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let alsoTenEighty = tenEighty",
            "alsoTenEighty.frameRate = 30.0"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because classes are reference types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "tenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "alsoTenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : " actually both refer to the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "same",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "VideoMode",
              "type" : "codeVoice"
            },
            {
              "text" : " instance.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Effectively, they’re just two different names for the same single instance,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as shown in the figure below:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "sharedStateClass",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Checking the ",
              "type" : "text"
            },
            {
              "code" : "frameRate",
              "type" : "codeVoice"
            },
            {
              "text" : " property of ",
              "type" : "text"
            },
            {
              "code" : "tenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "shows that it correctly reports the new frame rate of ",
              "type" : "text"
            },
            {
              "code" : "30.0",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from the underlying ",
              "type" : "text"
            },
            {
              "code" : "VideoMode",
              "type" : "codeVoice"
            },
            {
              "text" : " instance:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"The frameRate property of tenEighty is now \\(tenEighty.frameRate)\")",
            "\/\/ Prints \"The frameRate property of tenEighty is now 30.0\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example also shows how reference types can be harder to reason about.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If ",
              "type" : "text"
            },
            {
              "code" : "tenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "alsoTenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : " were far apart in your program’s code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it could be difficult to find all the ways that the video mode is changed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Wherever you use ",
              "type" : "text"
            },
            {
              "code" : "tenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you also have to think about the code that uses ",
              "type" : "text"
            },
            {
              "code" : "alsoTenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and vice versa.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In contrast, value types are easier to reason about",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because all of the code that interacts with the same value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is close together in your source files.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that ",
              "type" : "text"
            },
            {
              "code" : "tenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "alsoTenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : " are declared as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "constants",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "rather than variables.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, you can still change ",
              "type" : "text"
            },
            {
              "code" : "tenEighty.frameRate",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "alsoTenEighty.frameRate",
              "type" : "codeVoice"
            },
            {
              "text" : " because",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the values of the ",
              "type" : "text"
            },
            {
              "code" : "tenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "alsoTenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : " constants themselves don’t actually change.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "tenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "alsoTenEighty",
              "type" : "codeVoice"
            },
            {
              "text" : " themselves don’t “store” the ",
              "type" : "text"
            },
            {
              "code" : "VideoMode",
              "type" : "codeVoice"
            },
            {
              "text" : " instance —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "instead, they both ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "refer",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to a ",
              "type" : "text"
            },
            {
              "code" : "VideoMode",
              "type" : "codeVoice"
            },
            {
              "text" : " instance behind the scenes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It’s the ",
              "type" : "text"
            },
            {
              "code" : "frameRate",
              "type" : "codeVoice"
            },
            {
              "text" : " property of the underlying ",
              "type" : "text"
            },
            {
              "code" : "VideoMode",
              "type" : "codeVoice"
            },
            {
              "text" : " that’s changed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "not the values of the constant references to that ",
              "type" : "text"
            },
            {
              "code" : "VideoMode",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Identity-Operators",
          "level" : 3,
          "text" : "Identity Operators",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because classes are reference types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s possible for multiple constants and variables to refer to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the same single instance of a class behind the scenes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(The same isn’t true for structures and enumerations,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because they’re always copied when they’re assigned to a constant or variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or passed to a function.)",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "It can sometimes be useful to find out whether two constants or variables refer to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "exactly the same instance of a class.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To enable this, Swift provides two identity operators:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Identical to (",
                      "type" : "text"
                    },
                    {
                      "code" : "===",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Not identical to (",
                      "type" : "text"
                    },
                    {
                      "code" : "!==",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use these operators to check whether two constants or variables refer to the same single instance:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if tenEighty === alsoTenEighty {",
            "    print(\"tenEighty and alsoTenEighty refer to the same VideoMode instance.\")",
            "}",
            "\/\/ Prints \"tenEighty and alsoTenEighty refer to the same VideoMode instance.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "identical to",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (represented by three equals signs, or ",
              "type" : "text"
            },
            {
              "code" : "===",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "doesn’t mean the same thing as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "equal to",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (represented by two equals signs, or ",
              "type" : "text"
            },
            {
              "code" : "==",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Identical to",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " means that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "two constants or variables of class type refer to exactly the same class instance.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Equal to",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " means that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "two instances are considered equal or equivalent in value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for some appropriate meaning of ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "equal",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ", as defined by the type’s designer.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you define your own custom structures and classes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s your responsibility to decide what qualifies as two instances being equal.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The process of defining your own implementations of the ",
              "type" : "text"
            },
            {
              "code" : "==",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "!=",
              "type" : "codeVoice"
            },
            {
              "text" : " operators",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Pointers",
          "level" : 3,
          "text" : "Pointers",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you have experience with C, C++, or Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you may know that these languages use ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "pointers",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to refer to addresses in memory.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A Swift constant or variable that refers to an instance of some reference type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is similar to a pointer in C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but isn’t a direct pointer to an address in memory,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and doesn’t require you to write an asterisk (",
              "type" : "text"
            },
            {
              "code" : "*",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that you are creating a reference.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Instead, these references are defined like any other constant or variable in Swift.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The standard library provides pointer and buffer types",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that you can use if you need to interact with pointers directly —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ]
, 
"references": {
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language",
  "kind" : "article",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Equivalence-Operators": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators",
  "kind" : "section",
  "title" : "Equivalence Operators",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/advancedoperators#Equivalence-Operators"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting": {
  "abstract" : [
    {
      "text" : "Model the lifetime of objects and their relationships.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting",
  "kind" : "article",
  "role" : "article",
  "title" : "Automatic Reference Counting",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/automaticreferencecounting"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency": {
  "abstract" : [
    {
      "text" : "Perform asynchronous operations.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency",
  "kind" : "article",
  "role" : "article",
  "title" : "Concurrency",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/concurrency"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization": {
  "abstract" : [
    {
      "text" : "Release resources that require custom cleanup.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization",
  "kind" : "article",
  "role" : "article",
  "title" : "Deinitialization",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/deinitialization"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions": {
  "abstract" : [
    {
      "text" : "Add functionality to an existing type.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions",
  "kind" : "article",
  "role" : "article",
  "title" : "Extensions",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/extensions"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance": {
  "abstract" : [
    {
      "text" : "Subclass to add or override functionality.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance",
  "kind" : "article",
  "role" : "article",
  "title" : "Inheritance",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/inheritance"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization": {
  "abstract" : [
    {
      "text" : "Set the initial values for a type’s stored properties and perform one-time setup.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization",
  "kind" : "article",
  "role" : "article",
  "title" : "Initialization",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/initialization"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods": {
  "abstract" : [
    {
      "text" : "Define and call functions that are part of an instance or type.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods",
  "kind" : "article",
  "role" : "article",
  "title" : "Methods",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/methods"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties": {
  "abstract" : [
    {
      "text" : "Access stored and computed values that are part of an instance or type.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties",
  "kind" : "article",
  "role" : "article",
  "title" : "Properties",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/properties"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols": {
  "abstract" : [
    {
      "text" : "Define requirements that conforming types must implement.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols",
  "kind" : "article",
  "role" : "article",
  "title" : "Protocols",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/protocols"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts": {
  "abstract" : [
    {
      "text" : "Access the elements of a collection.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts",
  "kind" : "article",
  "role" : "article",
  "title" : "Subscripts",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/subscripts"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting": {
  "abstract" : [
    {
      "text" : "Determine a value’s runtime type and give it more specific type information.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting",
  "kind" : "article",
  "role" : "article",
  "title" : "Type Casting",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/typecasting"
},
"https://developer.apple.com/documentation/swift/choosing_between_structures_and_classes": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes",
  "title" : "Choosing Between Structures and Classes",
  "titleInlineContent" : [
    {
      "text" : "Choosing Between Structures and Classes",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes"
},
"https://developer.apple.com/documentation/swift/swift_standard_library/manual_memory_management": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management",
  "title" : "Manual Memory Management",
  "titleInlineContent" : [
    {
      "text" : "Manual Memory Management",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management"
},
"sharedStateClass": {
  "alt" : null,
  "identifier" : "sharedStateClass",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/sharedStateClass@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/sharedStateClass~dark@2x.png"
    }
  ]
},
"sharedStateStruct": {
  "alt" : null,
  "identifier" : "sharedStateStruct",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/sharedStateStruct@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/sharedStateStruct~dark@2x.png"
    }
  ]
}
}
}