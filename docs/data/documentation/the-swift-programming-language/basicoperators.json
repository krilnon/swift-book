{
  "abstract" : [
    {
      "text" : "Perform operations like assignment, arithmetic, and comparison.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators"
  },
  "kind" : "article",
  "metadata" : {
    "title" : "Basic Operators"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is a special symbol or phrase that you use to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "check, change, or combine values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, the addition operator (",
              "type" : "text"
            },
            {
              "code" : "+",
              "type" : "codeVoice"
            },
            {
              "text" : ") adds two numbers,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as in ",
              "type" : "text"
            },
            {
              "code" : "let i = 1 + 2",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the logical AND operator (",
              "type" : "text"
            },
            {
              "code" : "&&",
              "type" : "codeVoice"
            },
            {
              "text" : ") combines two Boolean values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as in ",
              "type" : "text"
            },
            {
              "code" : "if enteredDoorCode && passedRetinaScan",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift supports the operators you may already know from languages like C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and improves several capabilities to eliminate common coding errors.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The assignment operator (",
              "type" : "text"
            },
            {
              "code" : "=",
              "type" : "codeVoice"
            },
            {
              "text" : ") doesn’t return a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to prevent it from being mistakenly used when",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the equal to operator (",
              "type" : "text"
            },
            {
              "code" : "==",
              "type" : "codeVoice"
            },
            {
              "text" : ") is intended.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Arithmetic operators (",
              "type" : "text"
            },
            {
              "code" : "+",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "-",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "*",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "\/",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "%",
              "type" : "codeVoice"
            },
            {
              "text" : " and so forth)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "detect and disallow value overflow,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to avoid unexpected results when working with numbers that become larger or smaller",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "than the allowed value range of the type that stores them.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can opt in to value overflow behavior",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by using Swift’s overflow operators,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Overflow-Operators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift also provides range operators that aren’t found in C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as ",
              "type" : "text"
            },
            {
              "code" : "a..<b",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "a...b",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as a shortcut for expressing a range of values.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This chapter describes the common operators in Swift.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " covers Swift’s advanced operators,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and describes how to define your own custom operators",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and implement the standard operators for your own custom types.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Terminology",
          "level" : 2,
          "text" : "Terminology",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Operators are unary, binary, or ternary:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "inlineContent" : [
                        {
                          "text" : "Unary",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " operators operate on a single target (such as ",
                      "type" : "text"
                    },
                    {
                      "code" : "-a",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ").",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "Unary ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "prefix",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " operators appear immediately before their target (such as ",
                      "type" : "text"
                    },
                    {
                      "code" : "!b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "),",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and unary ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "postfix",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " operators appear immediately after their target (such as ",
                      "type" : "text"
                    },
                    {
                      "code" : "c!",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ").",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "inlineContent" : [
                        {
                          "text" : "Binary",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " operators operate on two targets (such as ",
                      "type" : "text"
                    },
                    {
                      "code" : "2 + 3",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and are ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "infix",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " because they appear in between their two targets.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "inlineContent" : [
                        {
                          "text" : "Ternary",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " operators operate on three targets.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "Like C, Swift has only one ternary operator,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the ternary conditional operator (",
                      "type" : "text"
                    },
                    {
                      "code" : "a ? b : c",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ").",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "The values that operators affect are ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "operands",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the expression ",
              "type" : "text"
            },
            {
              "code" : "1 + 2",
              "type" : "codeVoice"
            },
            {
              "text" : ", the ",
              "type" : "text"
            },
            {
              "code" : "+",
              "type" : "codeVoice"
            },
            {
              "text" : " symbol is an infix operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and its two operands are the values ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "2",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Assignment-Operator",
          "level" : 2,
          "text" : "Assignment Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "assignment operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "a = b",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "initializes or updates the value of ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " with the value of ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let b = 10",
            "var a = 5",
            "a = b",
            "\/\/ a is now equal to 10"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the right side of the assignment is a tuple with multiple values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "its elements can be decomposed into multiple constants or variables at once:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let (x, y) = (1, 2)",
            "\/\/ x is equal to 1, and y is equal to 2"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike the assignment operator in C and Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the assignment operator in Swift doesn’t itself return a value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The following statement isn’t valid:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if x = y {",
            "    \/\/ This isn't valid, because x = y doesn't return a value.",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This feature prevents the assignment operator (",
              "type" : "text"
            },
            {
              "code" : "=",
              "type" : "codeVoice"
            },
            {
              "text" : ") from being used by accident",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when the equal to operator (",
              "type" : "text"
            },
            {
              "code" : "==",
              "type" : "codeVoice"
            },
            {
              "text" : ") is actually intended.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "By making ",
              "type" : "text"
            },
            {
              "code" : "if x = y",
              "type" : "codeVoice"
            },
            {
              "text" : " invalid,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift helps you to avoid these kinds of errors in your code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Arithmetic-Operators",
          "level" : 2,
          "text" : "Arithmetic Operators",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift supports the four standard ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "arithmetic operators",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " for all number types:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Addition (",
                      "type" : "text"
                    },
                    {
                      "code" : "+",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Subtraction (",
                      "type" : "text"
                    },
                    {
                      "code" : "-",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Multiplication (",
                      "type" : "text"
                    },
                    {
                      "code" : "*",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Division (",
                      "type" : "text"
                    },
                    {
                      "code" : "\/",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "code" : [
            "1 + 2       \/\/ equals 3",
            "5 - 3       \/\/ equals 2",
            "2 * 3       \/\/ equals 6",
            "10.0 \/ 2.5  \/\/ equals 4.0"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike the arithmetic operators in C and Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the Swift arithmetic operators don’t allow values to overflow by default.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can opt in to value overflow behavior by using Swift’s overflow operators",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(such as ",
              "type" : "text"
            },
            {
              "code" : "a &+ b",
              "type" : "codeVoice"
            },
            {
              "text" : "). See ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Overflow-Operators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The addition operator is also supported for ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " concatenation:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\"hello, \" + \"world\"  \/\/ equals \"hello, world\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Remainder-Operator",
          "level" : 3,
          "text" : "Remainder Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "remainder operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "a % b",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "works out how many multiples of ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : " will fit inside ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and returns the value that’s left over",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(known as the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "remainder",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The remainder operator (",
                  "type" : "text"
                },
                {
                  "code" : "%",
                  "type" : "codeVoice"
                },
                {
                  "text" : ") is also known as",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "a ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "modulo operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " in other languages.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "However, its behavior in Swift for negative numbers means that,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "strictly speaking, it’s a remainder rather than a modulo operation.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s how the remainder operator works.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To calculate ",
              "type" : "text"
            },
            {
              "code" : "9 % 4",
              "type" : "codeVoice"
            },
            {
              "text" : ", you first work out how many ",
              "type" : "text"
            },
            {
              "code" : "4",
              "type" : "codeVoice"
            },
            {
              "text" : "s will fit inside ",
              "type" : "text"
            },
            {
              "code" : "9",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "remainderInteger",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can fit two ",
              "type" : "text"
            },
            {
              "code" : "4",
              "type" : "codeVoice"
            },
            {
              "text" : "s inside ",
              "type" : "text"
            },
            {
              "code" : "9",
              "type" : "codeVoice"
            },
            {
              "text" : ", and the remainder is ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : " (shown in orange).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In Swift, this would be written as:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "9 % 4    \/\/ equals 1"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "To determine the answer for ",
              "type" : "text"
            },
            {
              "code" : "a % b",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "%",
              "type" : "codeVoice"
            },
            {
              "text" : " operator calculates the following equation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and returns ",
              "type" : "text"
            },
            {
              "code" : "remainder",
              "type" : "codeVoice"
            },
            {
              "text" : " as its output:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " = (",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : " x ",
              "type" : "text"
            },
            {
              "code" : "some multiplier",
              "type" : "codeVoice"
            },
            {
              "text" : ") + ",
              "type" : "text"
            },
            {
              "code" : "remainder",
              "type" : "codeVoice"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "where ",
              "type" : "text"
            },
            {
              "code" : "some multiplier",
              "type" : "codeVoice"
            },
            {
              "text" : " is the largest number of multiples of ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that will fit inside ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Inserting ",
              "type" : "text"
            },
            {
              "code" : "9",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "4",
              "type" : "codeVoice"
            },
            {
              "text" : " into this equation yields:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "code" : "9",
              "type" : "codeVoice"
            },
            {
              "text" : " = (",
              "type" : "text"
            },
            {
              "code" : "4",
              "type" : "codeVoice"
            },
            {
              "text" : " x ",
              "type" : "text"
            },
            {
              "code" : "2",
              "type" : "codeVoice"
            },
            {
              "text" : ") + ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The same method is applied when calculating the remainder for a negative value of ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "-9 % 4   \/\/ equals -1"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Inserting ",
              "type" : "text"
            },
            {
              "code" : "-9",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "4",
              "type" : "codeVoice"
            },
            {
              "text" : " into the equation yields:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "code" : "-9",
              "type" : "codeVoice"
            },
            {
              "text" : " = (",
              "type" : "text"
            },
            {
              "code" : "4",
              "type" : "codeVoice"
            },
            {
              "text" : " x ",
              "type" : "text"
            },
            {
              "code" : "-2",
              "type" : "codeVoice"
            },
            {
              "text" : ") + ",
              "type" : "text"
            },
            {
              "code" : "-1",
              "type" : "codeVoice"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "giving a remainder value of ",
              "type" : "text"
            },
            {
              "code" : "-1",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The sign of ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : " is ignored for negative values of ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This means that ",
              "type" : "text"
            },
            {
              "code" : "a % b",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "a % -b",
              "type" : "codeVoice"
            },
            {
              "text" : " always give the same answer.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Unary-Minus-Operator",
          "level" : 3,
          "text" : "Unary Minus Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The sign of a numeric value can be toggled using a prefixed ",
              "type" : "text"
            },
            {
              "code" : "-",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "known as the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "unary minus operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let three = 3",
            "let minusThree = -three       \/\/ minusThree equals -3",
            "let plusThree = -minusThree   \/\/ plusThree equals 3, or \"minus minus three\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The unary minus operator (",
              "type" : "text"
            },
            {
              "code" : "-",
              "type" : "codeVoice"
            },
            {
              "text" : ") is prepended directly before the value it operates on,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without any white space.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Unary-Plus-Operator",
          "level" : 3,
          "text" : "Unary Plus Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "unary plus operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "+",
              "type" : "codeVoice"
            },
            {
              "text" : ") simply returns",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value it operates on, without any change:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let minusSix = -6",
            "let alsoMinusSix = +minusSix  \/\/ alsoMinusSix equals -6"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Although the unary plus operator doesn’t actually do anything,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use it to provide symmetry in your code for positive numbers",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when also using the unary minus operator for negative numbers.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Compound-Assignment-Operators",
          "level" : 2,
          "text" : "Compound Assignment Operators",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Like C, Swift provides ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "compound assignment operators",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " that combine assignment (",
              "type" : "text"
            },
            {
              "code" : "=",
              "type" : "codeVoice"
            },
            {
              "text" : ") with another operation.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "One example is the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "addition assignment operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "+=",
              "type" : "codeVoice"
            },
            {
              "text" : "):",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var a = 1",
            "a += 2",
            "\/\/ a is now equal to 3"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The expression ",
              "type" : "text"
            },
            {
              "code" : "a += 2",
              "type" : "codeVoice"
            },
            {
              "text" : " is shorthand for ",
              "type" : "text"
            },
            {
              "code" : "a = a + 2",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Effectively, the addition and the assignment are combined into one operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that performs both tasks at the same time.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The compound assignment operators don’t return a value.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "For example, you can’t write ",
                  "type" : "text"
                },
                {
                  "code" : "let b = a += 2",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "For information about the operators provided by the Swift standard library,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Comparison-Operators",
          "level" : 2,
          "text" : "Comparison Operators",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift supports the following comparison operators:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Equal to (",
                      "type" : "text"
                    },
                    {
                      "code" : "a == b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Not equal to (",
                      "type" : "text"
                    },
                    {
                      "code" : "a != b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Greater than (",
                      "type" : "text"
                    },
                    {
                      "code" : "a > b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Less than (",
                      "type" : "text"
                    },
                    {
                      "code" : "a < b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Greater than or equal to (",
                      "type" : "text"
                    },
                    {
                      "code" : "a >= b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Less than or equal to (",
                      "type" : "text"
                    },
                    {
                      "code" : "a <= b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Swift also provides two ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identity operators",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " (",
                  "type" : "text"
                },
                {
                  "code" : "===",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "!==",
                  "type" : "codeVoice"
                },
                {
                  "text" : "),",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "which you use to test whether two object references both refer to the same object instance.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "For more information, see ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Identity-Operators",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Each of the comparison operators returns a ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " value to indicate whether or not the statement is true:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "1 == 1   \/\/ true because 1 is equal to 1",
            "2 != 1   \/\/ true because 2 isn't equal to 1",
            "2 > 1    \/\/ true because 2 is greater than 1",
            "1 < 2    \/\/ true because 1 is less than 2",
            "1 >= 1   \/\/ true because 1 is greater than or equal to 1",
            "2 <= 1   \/\/ false because 2 isn't less than or equal to 1"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Comparison operators are often used in conditional statements,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let name = \"world\"",
            "if name == \"world\" {",
            "    print(\"hello, world\")",
            "} else {",
            "    print(\"I'm sorry \\(name), but I don't recognize you\")",
            "}",
            "\/\/ Prints \"hello, world\", because name is indeed equal to \"world\"."
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more about the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement, see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can compare",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "two tuples if they have the same type and the same number of values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Tuples are compared from left to right,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "one value at a time,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "until the comparison finds two values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that aren’t equal.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Those two values are compared,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the result of that comparison",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "determines the overall result of the tuple comparison.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If all the elements are equal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "then the tuples themselves are equal.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "(1, \"zebra\") < (2, \"apple\")   \/\/ true because 1 is less than 2; \"zebra\" and \"apple\" aren't compared",
            "(3, \"apple\") < (3, \"bird\")    \/\/ true because 3 is equal to 3, and \"apple\" is less than \"bird\"",
            "(4, \"dog\") == (4, \"dog\")      \/\/ true because 4 is equal to 4, and \"dog\" is equal to \"dog\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can see the left-to-right comparison behavior on the first line.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : " is less than ",
              "type" : "text"
            },
            {
              "code" : "2",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "(1, \"zebra\")",
              "type" : "codeVoice"
            },
            {
              "text" : " is considered less than ",
              "type" : "text"
            },
            {
              "code" : "(2, \"apple\")",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "regardless of any other values in the tuples.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It doesn’t matter that ",
              "type" : "text"
            },
            {
              "code" : "\"zebra\"",
              "type" : "codeVoice"
            },
            {
              "text" : " isn’t less than ",
              "type" : "text"
            },
            {
              "code" : "\"apple\"",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because the comparison is already determined by the tuples’ first elements.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when the tuples’ first elements are the same,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "their second elements ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "are",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " compared —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this is what happens on the second and third line.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Tuples can be compared with a given operator only if the operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be applied to each value in the respective tuples. For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as demonstrated in the code below, you can compare",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "two tuples of type ",
              "type" : "text"
            },
            {
              "code" : "(String, Int)",
              "type" : "codeVoice"
            },
            {
              "text" : " because",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "both ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " values can be compared",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using the ",
              "type" : "text"
            },
            {
              "code" : "<",
              "type" : "codeVoice"
            },
            {
              "text" : " operator.  In contrast,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "two tuples of type ",
              "type" : "text"
            },
            {
              "code" : "(String, Bool)",
              "type" : "codeVoice"
            },
            {
              "text" : " can’t be compared",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the ",
              "type" : "text"
            },
            {
              "code" : "<",
              "type" : "codeVoice"
            },
            {
              "text" : " operator because the ",
              "type" : "text"
            },
            {
              "code" : "<",
              "type" : "codeVoice"
            },
            {
              "text" : " operator can’t be applied to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " values.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "(\"blue\", -1) < (\"purple\", 1)        \/\/ OK, evaluates to true",
            "(\"blue\", false) < (\"purple\", true)  \/\/ Error because < can't compare Boolean values"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The Swift standard library includes tuple comparison operators",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "for tuples with fewer than seven elements.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "To compare tuples with seven or more elements,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you must implement the comparison operators yourself.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Ternary-Conditional-Operator",
          "level" : 2,
          "text" : "Ternary Conditional Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "ternary conditional operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is a special operator with three parts,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which takes the form ",
              "type" : "text"
            },
            {
              "code" : "question ? answer1 : answer2",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It’s a shortcut for evaluating one of two expressions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "based on whether ",
              "type" : "text"
            },
            {
              "code" : "question",
              "type" : "codeVoice"
            },
            {
              "text" : " is true or false.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If ",
              "type" : "text"
            },
            {
              "code" : "question",
              "type" : "codeVoice"
            },
            {
              "text" : " is true, it evaluates ",
              "type" : "text"
            },
            {
              "code" : "answer1",
              "type" : "codeVoice"
            },
            {
              "text" : " and returns its value;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "otherwise, it evaluates ",
              "type" : "text"
            },
            {
              "code" : "answer2",
              "type" : "codeVoice"
            },
            {
              "text" : " and returns its value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ternary conditional operator is shorthand for the code below:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if question {",
            "    answer1",
            "} else {",
            "    answer2",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s an example, which calculates the height for a table row.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The row height should be 50 points taller than the content height",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if the row has a header, and 20 points taller if the row doesn’t have a header:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let contentHeight = 40",
            "let hasHeader = true",
            "let rowHeight = contentHeight + (hasHeader ? 50 : 20)",
            "\/\/ rowHeight is equal to 90"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above is shorthand for the code below:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let contentHeight = 40",
            "let hasHeader = true",
            "let rowHeight: Int",
            "if hasHeader {",
            "    rowHeight = contentHeight + 50",
            "} else {",
            "    rowHeight = contentHeight + 20",
            "}",
            "\/\/ rowHeight is equal to 90"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The first example’s use of the ternary conditional operator means that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "rowHeight",
              "type" : "codeVoice"
            },
            {
              "text" : " can be set to the correct value on a single line of code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is more concise than the code used in the second example.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ternary conditional operator provides",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an efficient shorthand for deciding which of two expressions to consider.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Use the ternary conditional operator with care, however.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Its conciseness can lead to hard-to-read code if overused.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Avoid combining multiple instances of the ternary conditional operator into one compound statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Nil-Coalescing-Operator",
          "level" : 2,
          "text" : "Nil-Coalescing Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "nil-coalescing operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "a ?? b",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "unwraps an optional ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " if it contains a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or returns a default value ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : " if ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The expression ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " is always of an optional type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The expression ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : " must match the type that’s stored inside ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The nil-coalescing operator is shorthand for the code below:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "a != nil ? a! : b"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The code above uses the ternary conditional operator and forced unwrapping (",
              "type" : "text"
            },
            {
              "code" : "a!",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to access the value wrapped inside ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " when ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " isn’t ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to return ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : " otherwise.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The nil-coalescing operator provides a more elegant way to encapsulate",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this conditional checking and unwrapping in a concise and readable form.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "If the value of ",
                  "type" : "text"
                },
                {
                  "code" : "a",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is non-",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the value of ",
                  "type" : "text"
                },
                {
                  "code" : "b",
                  "type" : "codeVoice"
                },
                {
                  "text" : " isn’t evaluated.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This is known as ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "short-circuit evaluation",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below uses the nil-coalescing operator to choose between",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a default color name and an optional user-defined color name:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let defaultColorName = \"red\"",
            "var userDefinedColorName: String?   \/\/ defaults to nil",
            "",
            "var colorNameToUse = userDefinedColorName ?? defaultColorName",
            "\/\/ userDefinedColorName is nil, so colorNameToUse is set to the default of \"red\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "userDefinedColorName",
              "type" : "codeVoice"
            },
            {
              "text" : " variable is defined as an optional ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a default value of ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "userDefinedColorName",
              "type" : "codeVoice"
            },
            {
              "text" : " is of an optional type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use the nil-coalescing operator to consider its value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the example above, the operator is used to determine",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an initial value for a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " variable called ",
              "type" : "text"
            },
            {
              "code" : "colorNameToUse",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "userDefinedColorName",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the expression ",
              "type" : "text"
            },
            {
              "code" : "userDefinedColorName ?? defaultColorName",
              "type" : "codeVoice"
            },
            {
              "text" : " returns",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of ",
              "type" : "text"
            },
            {
              "code" : "defaultColorName",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "\"red\"",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you assign a non-",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " value to ",
              "type" : "text"
            },
            {
              "code" : "userDefinedColorName",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and perform the nil-coalescing operator check again,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value wrapped inside ",
              "type" : "text"
            },
            {
              "code" : "userDefinedColorName",
              "type" : "codeVoice"
            },
            {
              "text" : " is used instead of the default:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "userDefinedColorName = \"green\"",
            "colorNameToUse = userDefinedColorName ?? defaultColorName",
            "\/\/ userDefinedColorName isn't nil, so colorNameToUse is set to \"green\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Range-Operators",
          "level" : 2,
          "text" : "Range Operators",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift includes several ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "range operators",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which are shortcuts for expressing a range of values.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Closed-Range-Operator",
          "level" : 3,
          "text" : "Closed Range Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "closed range operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "a...b",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "defines a range that runs from ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " to ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and includes the values ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The value of ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " must not be greater than ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The closed range operator is useful when iterating over a range",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in which you want all of the values to be used,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as with a ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for index in 1...5 {",
            "    print(\"\\(index) times 5 is \\(index * 5)\")",
            "}",
            "\/\/ 1 times 5 is 5",
            "\/\/ 2 times 5 is 10",
            "\/\/ 3 times 5 is 15",
            "\/\/ 4 times 5 is 20",
            "\/\/ 5 times 5 is 25"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more about ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loops, see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Half-Open-Range-Operator",
          "level" : 3,
          "text" : "Half-Open Range Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "half-open range operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "a..<b",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "defines a range that runs from ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " to ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but doesn’t include ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It’s said to be ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "half-open",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because it contains its first value, but not its final value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As with the closed range operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " must not be greater than ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the value of ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " is equal to ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "then the resulting range will be empty.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Half-open ranges are particularly useful when you work with",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "zero-based lists such as arrays,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "where it’s useful to count up to (but not including) the length of the list:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"]",
            "let count = names.count",
            "for i in 0..<count {",
            "    print(\"Person \\(i + 1) is called \\(names[i])\")",
            "}",
            "\/\/ Person 1 is called Anna",
            "\/\/ Person 2 is called Alex",
            "\/\/ Person 3 is called Brian",
            "\/\/ Person 4 is called Jack"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that the array contains four items,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but ",
              "type" : "text"
            },
            {
              "code" : "0..<count",
              "type" : "codeVoice"
            },
            {
              "text" : " only counts as far as ",
              "type" : "text"
            },
            {
              "code" : "3",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(the index of the last item in the array),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because it’s a half-open range.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more about arrays, see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "One-Sided-Ranges",
          "level" : 3,
          "text" : "One-Sided Ranges",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The closed range operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "has an alternative form for ranges that continue",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as far as possible in one direction —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a range that includes all the elements of an array",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from index 2 to the end of the array.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In these cases, you can omit the value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from one side of the range operator.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This kind of range is called a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "one-sided range",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because the operator has a value on only one side.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for name in names[2...] {",
            "    print(name)",
            "}",
            "\/\/ Brian",
            "\/\/ Jack",
            "",
            "for name in names[...2] {",
            "    print(name)",
            "}",
            "\/\/ Anna",
            "\/\/ Alex",
            "\/\/ Brian"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The half-open range operator also has",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a one-sided form that’s written",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with only its final value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Just like when you include a value on both sides,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the final value isn’t part of the range.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for name in names[..<2] {",
            "    print(name)",
            "}",
            "\/\/ Anna",
            "\/\/ Alex"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "One-sided ranges can be used in other contexts,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "not just in subscripts.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can’t iterate over a one-sided range",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that omits a first value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because it isn’t clear where iteration should begin.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "can",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " iterate over a one-sided range that omits its final value;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "however, because the range continues indefinitely,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "make sure you add an explicit end condition for the loop.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can also check whether a one-sided range contains a particular value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as shown in the code below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let range = ...5",
            "range.contains(7)   \/\/ false",
            "range.contains(4)   \/\/ true",
            "range.contains(-1)  \/\/ true"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Logical-Operators",
          "level" : 2,
          "text" : "Logical Operators",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Logical operators",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " modify or combine",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the Boolean logic values ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift supports the three standard logical operators found in C-based languages:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Logical NOT (",
                      "type" : "text"
                    },
                    {
                      "code" : "!a",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Logical AND (",
                      "type" : "text"
                    },
                    {
                      "code" : "a && b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Logical OR (",
                      "type" : "text"
                    },
                    {
                      "code" : "a || b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "anchor" : "Logical-NOT-Operator",
          "level" : 3,
          "text" : "Logical NOT Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "logical NOT operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "!a",
              "type" : "codeVoice"
            },
            {
              "text" : ") inverts a Boolean value so that ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " becomes ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " becomes ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The logical NOT operator is a prefix operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and appears immediately before the value it operates on,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without any white space.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It can be read as “not ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : "”, as seen in the following example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let allowedEntry = false",
            "if !allowedEntry {",
            "    print(\"ACCESS DENIED\")",
            "}",
            "\/\/ Prints \"ACCESS DENIED\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The phrase ",
              "type" : "text"
            },
            {
              "code" : "if !allowedEntry",
              "type" : "codeVoice"
            },
            {
              "text" : " can be read as “if not allowed entry.”",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The subsequent line is only executed if “not allowed entry” is true;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that is, if ",
              "type" : "text"
            },
            {
              "code" : "allowedEntry",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "As in this example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "careful choice of Boolean constant and variable names",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can help to keep code readable and concise,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "while avoiding double negatives or confusing logic statements.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Logical-AND-Operator",
          "level" : 3,
          "text" : "Logical AND Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "logical AND operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "a && b",
              "type" : "codeVoice"
            },
            {
              "text" : ") creates logical expressions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "where both values must be ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " for the overall expression to also be ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If either value is ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the overall expression will also be ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In fact, if the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "first",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " value is ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the second value won’t even be evaluated,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because it can’t possibly make the overall expression equate to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is known as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "short-circuit evaluation",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example considers two ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and only allows access if both values are ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let enteredDoorCode = true",
            "let passedRetinaScan = false",
            "if enteredDoorCode && passedRetinaScan {",
            "    print(\"Welcome!\")",
            "} else {",
            "    print(\"ACCESS DENIED\")",
            "}",
            "\/\/ Prints \"ACCESS DENIED\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Logical-OR-Operator",
          "level" : 3,
          "text" : "Logical OR Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "logical OR operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(",
              "type" : "text"
            },
            {
              "code" : "a || b",
              "type" : "codeVoice"
            },
            {
              "text" : ") is an infix operator made from two adjacent pipe characters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You use it to create logical expressions in which",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "only ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "one",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " of the two values has to be ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for the overall expression to be ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Like the Logical AND operator above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the Logical OR operator uses short-circuit evaluation to consider its expressions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the left side of a Logical OR expression is ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the right side isn’t evaluated,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because it can’t change the outcome of the overall expression.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the example below,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the first ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " value (",
              "type" : "text"
            },
            {
              "code" : "hasDoorKey",
              "type" : "codeVoice"
            },
            {
              "text" : ") is ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but the second value (",
              "type" : "text"
            },
            {
              "code" : "knowsOverridePassword",
              "type" : "codeVoice"
            },
            {
              "text" : ") is ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because one value is ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the overall expression also evaluates to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and access is allowed:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let hasDoorKey = false",
            "let knowsOverridePassword = true",
            "if hasDoorKey || knowsOverridePassword {",
            "    print(\"Welcome!\")",
            "} else {",
            "    print(\"ACCESS DENIED\")",
            "}",
            "\/\/ Prints \"Welcome!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Combining-Logical-Operators",
          "level" : 3,
          "text" : "Combining Logical Operators",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can combine multiple logical operators to create longer compound expressions:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if enteredDoorCode && passedRetinaScan || hasDoorKey || knowsOverridePassword {",
            "    print(\"Welcome!\")",
            "} else {",
            "    print(\"ACCESS DENIED\")",
            "}",
            "\/\/ Prints \"Welcome!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example uses multiple ",
              "type" : "text"
            },
            {
              "code" : "&&",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "||",
              "type" : "codeVoice"
            },
            {
              "text" : " operators to create a longer compound expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, the ",
              "type" : "text"
            },
            {
              "code" : "&&",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "||",
              "type" : "codeVoice"
            },
            {
              "text" : " operators still operate on only two values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so this is actually three smaller expressions chained together.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example can be read as:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If we’ve entered the correct door code and passed the retina scan,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or if we have a valid door key,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or if we know the emergency override password,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "then allow access.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Based on the values of ",
              "type" : "text"
            },
            {
              "code" : "enteredDoorCode",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "passedRetinaScan",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "hasDoorKey",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the first two subexpressions are ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, the emergency override password is known,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so the overall compound expression still evaluates to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The Swift logical operators ",
                  "type" : "text"
                },
                {
                  "code" : "&&",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "||",
                  "type" : "codeVoice"
                },
                {
                  "text" : " are left-associative,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "meaning that compound expressions with multiple logical operators",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "evaluate the leftmost subexpression first.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Explicit-Parentheses",
          "level" : 3,
          "text" : "Explicit Parentheses",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "It’s sometimes useful to include parentheses when they’re not strictly needed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to make the intention of a complex expression easier to read.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the door access example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s useful to add parentheses around the first part of the compound expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to make its intent explicit:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if (enteredDoorCode && passedRetinaScan) || hasDoorKey || knowsOverridePassword {",
            "    print(\"Welcome!\")",
            "} else {",
            "    print(\"ACCESS DENIED\")",
            "}",
            "\/\/ Prints \"Welcome!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The parentheses make it clear that the first two values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are considered as part of a separate possible state in the overall logic.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The output of the compound expression doesn’t change,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but the overall intention is clearer to the reader.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Readability is always preferred over brevity;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "use parentheses where they help to make your intentions clear.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ]
, 
"references": {
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language",
  "kind" : "article",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators": {
  "abstract" : [
    {
      "text" : "Define custom operators, perform bitwise operations, and use builder syntax.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators",
  "kind" : "article",
  "role" : "article",
  "title" : "Advanced Operators",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/advancedoperators"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Overflow-Operators": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Overflow-Operators",
  "kind" : "section",
  "title" : "Overflow Operators",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/advancedoperators#Overflow-Operators"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures#Identity-Operators": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Identity-Operators",
  "kind" : "section",
  "title" : "Identity Operators",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/classesandstructures#Identity-Operators"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Arrays": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays",
  "kind" : "section",
  "title" : "Arrays",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/collectiontypes#Arrays"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow": {
  "abstract" : [
    {
      "text" : "Structure code with branches, loops, and early exits.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
  "kind" : "article",
  "role" : "article",
  "title" : "Control Flow",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow"
},
"https://developer.apple.com/documentation/swift/operator_declarations": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations",
  "title" : "Operator Declarations",
  "titleInlineContent" : [
    {
      "text" : "Operator Declarations",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations"
},
"remainderInteger": {
  "alt" : null,
  "identifier" : "remainderInteger",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/remainderInteger@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/remainderInteger~dark@2x.png"
    }
  ]
}
}
}