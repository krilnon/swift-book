{
  "abstract" : [
    {
      "text" : "Define one data type inside of another data type.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "The Swift Programming Language"
      }
    ],
    "title" : "Nested Types"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Enumerations are often created to support a specific class or structure’s functionality.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Similarly, it can be convenient to define utility classes and structures",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "purely for use within the context of a more complex type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To accomplish this, Swift enables you to define ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "nested types",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whereby you nest supporting enumerations, classes, and structures",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "within the definition of the type they support.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To nest a type within another type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "write its definition within the outer braces of the type it supports.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Types can be nested to as many levels as are required.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Nested-Types-in-Action",
          "level" : 2,
          "text" : "Nested Types in Action",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below defines a structure called ",
              "type" : "text"
            },
            {
              "code" : "BlackjackCard",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which models a playing card as used in the game of Blackjack.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "BlackjackCard",
              "type" : "codeVoice"
            },
            {
              "text" : " structure contains two nested enumeration types",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "called ",
              "type" : "text"
            },
            {
              "code" : "Suit",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Rank",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In Blackjack, the Ace cards have a value of either one or eleven.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This feature is represented by a structure called ",
              "type" : "text"
            },
            {
              "code" : "Values",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is nested within the ",
              "type" : "text"
            },
            {
              "code" : "Rank",
              "type" : "codeVoice"
            },
            {
              "text" : " enumeration:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct BlackjackCard {",
            "",
            "    \/\/ nested Suit enumeration",
            "    enum Suit: Character {",
            "        case spades = \"♠\", hearts = \"♡\", diamonds = \"♢\", clubs = \"♣\"",
            "    }",
            "",
            "    \/\/ nested Rank enumeration",
            "    enum Rank: Int {",
            "        case two = 2, three, four, five, six, seven, eight, nine, ten",
            "        case jack, queen, king, ace",
            "        struct Values {",
            "            let first: Int, second: Int?",
            "        }",
            "        var values: Values {",
            "            switch self {",
            "            case .ace:",
            "                return Values(first: 1, second: 11)",
            "            case .jack, .queen, .king:",
            "                return Values(first: 10, second: nil)",
            "            default:",
            "                return Values(first: self.rawValue, second: nil)",
            "            }",
            "        }",
            "    }",
            "",
            "    \/\/ BlackjackCard properties and methods",
            "    let rank: Rank, suit: Suit",
            "    var description: String {",
            "        var output = \"suit is \\(suit.rawValue),\"",
            "        output += \" value is \\(rank.values.first)\"",
            "        if let second = rank.values.second {",
            "            output += \" or \\(second)\"",
            "        }",
            "        return output",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Suit",
              "type" : "codeVoice"
            },
            {
              "text" : " enumeration describes the four common playing card suits,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "together with a raw ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " value to represent their symbol.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Rank",
              "type" : "codeVoice"
            },
            {
              "text" : " enumeration describes the thirteen possible playing card ranks,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "together with a raw ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " value to represent their face value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(This raw ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " value isn’t used for the Jack, Queen, King, and Ace cards.)",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "As mentioned above, the ",
              "type" : "text"
            },
            {
              "code" : "Rank",
              "type" : "codeVoice"
            },
            {
              "text" : " enumeration defines",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a further nested structure of its own, called ",
              "type" : "text"
            },
            {
              "code" : "Values",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This structure encapsulates the fact that most cards have one value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but the Ace card has two values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Values",
              "type" : "codeVoice"
            },
            {
              "text" : " structure defines two properties to represent this:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "first",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", of type ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "second",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", of type ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int?",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", or “optional ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "”",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "code" : "Rank",
              "type" : "codeVoice"
            },
            {
              "text" : " also defines a computed property, ",
              "type" : "text"
            },
            {
              "code" : "values",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which returns an instance of the ",
              "type" : "text"
            },
            {
              "code" : "Values",
              "type" : "codeVoice"
            },
            {
              "text" : " structure.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This computed property considers the rank of the card",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and initializes a new ",
              "type" : "text"
            },
            {
              "code" : "Values",
              "type" : "codeVoice"
            },
            {
              "text" : " instance with appropriate values based on its rank.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It uses special values for ",
              "type" : "text"
            },
            {
              "code" : "jack",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "queen",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "king",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "ace",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For the numeric cards, it uses the rank’s raw ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "BlackjackCard",
              "type" : "codeVoice"
            },
            {
              "text" : " structure itself has two properties — ",
              "type" : "text"
            },
            {
              "code" : "rank",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "suit",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It also defines a computed property called ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which uses the values stored in ",
              "type" : "text"
            },
            {
              "code" : "rank",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "suit",
              "type" : "codeVoice"
            },
            {
              "text" : " to build",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a description of the name and value of the card.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : " property uses optional binding to check whether there’s",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a second value to display, and if so,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "inserts additional description detail for that second value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "BlackjackCard",
              "type" : "codeVoice"
            },
            {
              "text" : " is a structure with no custom initializers,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it has an implicit memberwise initializer,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Memberwise-Initializers-for-Structure-Types",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use this initializer to initialize a new constant called ",
              "type" : "text"
            },
            {
              "code" : "theAceOfSpades",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let theAceOfSpades = BlackjackCard(rank: .ace, suit: .spades)",
            "print(\"theAceOfSpades: \\(theAceOfSpades.description)\")",
            "\/\/ Prints \"theAceOfSpades: suit is ♠, value is 1 or 11\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Even though ",
              "type" : "text"
            },
            {
              "code" : "Rank",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Suit",
              "type" : "codeVoice"
            },
            {
              "text" : " are nested within ",
              "type" : "text"
            },
            {
              "code" : "BlackjackCard",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "their type can be inferred from context,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so the initialization of this instance is able to refer to the enumeration cases",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by their case names (",
              "type" : "text"
            },
            {
              "code" : ".ace",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : ".spades",
              "type" : "codeVoice"
            },
            {
              "text" : ") alone.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the example above, the ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : " property correctly reports that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the Ace of Spades has a value of ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "11",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Referring-to-Nested-Types",
          "level" : 2,
          "text" : "Referring to Nested Types",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "To use a nested type outside of its definition context,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "prefix its name with the name of the type it’s nested within:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let heartsSymbol = BlackjackCard.Suit.hearts.rawValue",
            "\/\/ heartsSymbol is \"♡\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this enables the names of ",
              "type" : "text"
            },
            {
              "code" : "Suit",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "Rank",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "Values",
              "type" : "codeVoice"
            },
            {
              "text" : " to be kept deliberately short,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because their names are naturally qualified by the context in which they’re defined.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/the-swift-programming-language\/nestedtypes"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Memberwise-Initializers-for-Structure-Types": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Memberwise-Initializers-for-Structure-Types",
  "kind" : "section",
  "title" : "Memberwise Initializers for Structure Types",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/initialization#Memberwise-Initializers-for-Structure-Types"
}
}
}