{
  "abstract" : [
    {
      "text" : "Access the elements of a collection.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "The Swift Programming Language"
      }
    ],
    "title" : "Subscripts"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "text" : "Classes, structures, and enumerations can define ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "subscripts",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which are shortcuts for accessing the member elements of a collection, list, or sequence.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You use subscripts to set and retrieve values by index without needing",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separate methods for setting and retrieval.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, you access elements in an ",
              "type" : "text"
            },
            {
              "code" : "Array",
              "type" : "codeVoice"
            },
            {
              "text" : " instance as ",
              "type" : "text"
            },
            {
              "code" : "someArray[index]",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and elements in a ",
              "type" : "text"
            },
            {
              "code" : "Dictionary",
              "type" : "codeVoice"
            },
            {
              "text" : " instance as ",
              "type" : "text"
            },
            {
              "code" : "someDictionary[key]",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can define multiple subscripts for a single type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the appropriate subscript overload to use is selected",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "based on the type of index value you pass to the subscript.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Subscripts aren’t limited to a single dimension,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and you can define subscripts with multiple input parameters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to suit your custom type’s needs.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Subscript-Syntax",
          "level" : 2,
          "text" : "Subscript Syntax",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Subscripts enable you to query instances of a type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by writing one or more values in square brackets after the instance name.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Their syntax is similar to both instance method syntax and computed property syntax.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You write subscript definitions with the ",
              "type" : "text"
            },
            {
              "code" : "subscript",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and specify one or more input parameters and a return type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the same way as instance methods.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Unlike instance methods, subscripts can be read-write or read-only.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This behavior is communicated by a getter and setter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the same way as for computed properties:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "subscript(index: Int) -> Int {",
            "    get {",
            "        \/\/ Return an appropriate subscript value here.",
            "    }",
            "    set(newValue) {",
            "        \/\/ Perform a suitable setting action here.",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The type of ",
              "type" : "text"
            },
            {
              "code" : "newValue",
              "type" : "codeVoice"
            },
            {
              "text" : " is the same as the return value of the subscript.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As with computed properties, you can choose not to specify",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the setter’s ",
              "type" : "text"
            },
            {
              "code" : "(newValue)",
              "type" : "codeVoice"
            },
            {
              "text" : " parameter.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A default parameter called ",
              "type" : "text"
            },
            {
              "code" : "newValue",
              "type" : "codeVoice"
            },
            {
              "text" : " is provided to your setter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if you don’t provide one yourself.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "As with read-only computed properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can simplify the declaration of a read-only subscript",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by removing the ",
              "type" : "text"
            },
            {
              "code" : "get",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword and its braces:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "subscript(index: Int) -> Int {",
            "    \/\/ Return an appropriate subscript value here.",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s an example of a read-only subscript implementation,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which defines a ",
              "type" : "text"
            },
            {
              "code" : "TimesTable",
              "type" : "codeVoice"
            },
            {
              "text" : " structure to represent an ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "n",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : "-times-table of integers:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct TimesTable {",
            "    let multiplier: Int",
            "    subscript(index: Int) -> Int {",
            "        return multiplier * index",
            "    }",
            "}",
            "let threeTimesTable = TimesTable(multiplier: 3)",
            "print(\"six times three is \\(threeTimesTable[6])\")",
            "\/\/ Prints \"six times three is 18\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example, a new instance of ",
              "type" : "text"
            },
            {
              "code" : "TimesTable",
              "type" : "codeVoice"
            },
            {
              "text" : " is created",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to represent the three-times-table.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is indicated by passing a value of ",
              "type" : "text"
            },
            {
              "code" : "3",
              "type" : "codeVoice"
            },
            {
              "text" : " to the structure’s ",
              "type" : "text"
            },
            {
              "code" : "initializer",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as the value to use for the instance’s ",
              "type" : "text"
            },
            {
              "code" : "multiplier",
              "type" : "codeVoice"
            },
            {
              "text" : " parameter.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can query the ",
              "type" : "text"
            },
            {
              "code" : "threeTimesTable",
              "type" : "codeVoice"
            },
            {
              "text" : " instance by calling its subscript,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as shown in the call to ",
              "type" : "text"
            },
            {
              "code" : "threeTimesTable[6]",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This requests the sixth entry in the three-times-table,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which returns a value of ",
              "type" : "text"
            },
            {
              "code" : "18",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "3",
              "type" : "codeVoice"
            },
            {
              "text" : " times ",
              "type" : "text"
            },
            {
              "code" : "6",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "An ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "n",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : "-times-table is based on a fixed mathematical rule.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "It isn’t appropriate to set ",
                  "type" : "text"
                },
                {
                  "code" : "threeTimesTable[someIndex]",
                  "type" : "codeVoice"
                },
                {
                  "text" : " to a new value,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and so the subscript for ",
                  "type" : "text"
                },
                {
                  "code" : "TimesTable",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is defined as a read-only subscript.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Subscript-Usage",
          "level" : 2,
          "text" : "Subscript Usage",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The exact meaning of “subscript” depends on the context in which it’s used.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Subscripts are typically used as a shortcut for accessing",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the member elements in a collection, list, or sequence.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You are free to implement subscripts in the most appropriate way for",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "your particular class or structure’s functionality.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, Swift’s ",
              "type" : "text"
            },
            {
              "code" : "Dictionary",
              "type" : "codeVoice"
            },
            {
              "text" : " type implements a subscript",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to set and retrieve the values stored in a ",
              "type" : "text"
            },
            {
              "code" : "Dictionary",
              "type" : "codeVoice"
            },
            {
              "text" : " instance.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can set a value in a dictionary",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by providing a key of the dictionary’s key type within subscript brackets,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and assigning a value of the dictionary’s value type to the subscript:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var numberOfLegs = [\"spider\": 8, \"ant\": 6, \"cat\": 4]",
            "numberOfLegs[\"bird\"] = 2"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above defines a variable called ",
              "type" : "text"
            },
            {
              "code" : "numberOfLegs",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and initializes it with a dictionary literal containing three key-value pairs.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The type of the ",
              "type" : "text"
            },
            {
              "code" : "numberOfLegs",
              "type" : "codeVoice"
            },
            {
              "text" : " dictionary is inferred to be ",
              "type" : "text"
            },
            {
              "code" : "[String: Int]",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "After creating the dictionary,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this example uses subscript assignment to add",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " key of ",
              "type" : "text"
            },
            {
              "code" : "\"bird\"",
              "type" : "codeVoice"
            },
            {
              "text" : " and an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " value of ",
              "type" : "text"
            },
            {
              "code" : "2",
              "type" : "codeVoice"
            },
            {
              "text" : " to the dictionary.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information about ",
              "type" : "text"
            },
            {
              "code" : "Dictionary",
              "type" : "codeVoice"
            },
            {
              "text" : " subscripting,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Accessing-and-Modifying-a-Dictionary",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Swift’s ",
                  "type" : "text"
                },
                {
                  "code" : "Dictionary",
                  "type" : "codeVoice"
                },
                {
                  "text" : " type implements its key-value subscripting",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as a subscript that takes and returns an ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "optional",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " type.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "For the ",
                  "type" : "text"
                },
                {
                  "code" : "numberOfLegs",
                  "type" : "codeVoice"
                },
                {
                  "text" : " dictionary above,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the key-value subscript takes and returns a value of type ",
                  "type" : "text"
                },
                {
                  "code" : "Int?",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "or “optional int”.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The ",
                  "type" : "text"
                },
                {
                  "code" : "Dictionary",
                  "type" : "codeVoice"
                },
                {
                  "text" : " type uses an optional subscript type to model the fact that",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "not every key will have a value, and to give a way to delete a value for a key",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "by assigning a ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " value for that key.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Subscript-Options",
          "level" : 2,
          "text" : "Subscript Options",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Subscripts can take any number of input parameters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and these input parameters can be of any type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Subscripts can also return a value of any type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Like functions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "subscripts can take a varying number of parameters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and provide default values for their parameters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, unlike functions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "subscripts can’t use in-out parameters.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A class or structure can provide as many subscript implementations as it needs,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the appropriate subscript to be used will be inferred based on",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the types of the value or values that are contained within the subscript brackets",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "at the point that the subscript is used.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This definition of multiple subscripts is known as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "subscript overloading",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "While it’s most common for a subscript to take a single parameter,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can also define a subscript with multiple parameters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if it’s appropriate for your type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The following example defines a ",
              "type" : "text"
            },
            {
              "code" : "Matrix",
              "type" : "codeVoice"
            },
            {
              "text" : " structure,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which represents a two-dimensional matrix of ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Matrix",
              "type" : "codeVoice"
            },
            {
              "text" : " structure’s subscript takes two integer parameters:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Matrix {",
            "    let rows: Int, columns: Int",
            "    var grid: [Double]",
            "    init(rows: Int, columns: Int) {",
            "        self.rows = rows",
            "        self.columns = columns",
            "        grid = Array(repeating: 0.0, count: rows * columns)",
            "    }",
            "    func indexIsValid(row: Int, column: Int) -> Bool {",
            "        return row >= 0 && row < rows && column >= 0 && column < columns",
            "    }",
            "    subscript(row: Int, column: Int) -> Double {",
            "        get {",
            "            assert(indexIsValid(row: row, column: column), \"Index out of range\")",
            "            return grid[(row * columns) + column]",
            "        }",
            "        set {",
            "            assert(indexIsValid(row: row, column: column), \"Index out of range\")",
            "            grid[(row * columns) + column] = newValue",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "code" : "Matrix",
              "type" : "codeVoice"
            },
            {
              "text" : " provides an initializer that takes two parameters called ",
              "type" : "text"
            },
            {
              "code" : "rows",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "columns",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and creates an array that’s large enough to store ",
              "type" : "text"
            },
            {
              "code" : "rows * columns",
              "type" : "codeVoice"
            },
            {
              "text" : " values of type ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each position in the matrix is given an initial value of ",
              "type" : "text"
            },
            {
              "code" : "0.0",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To achieve this, the array’s size, and an initial cell value of ",
              "type" : "text"
            },
            {
              "code" : "0.0",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are passed to an array initializer that creates and initializes a new array of the correct size.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This initializer is described in more detail",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Creating-an-Array-with-a-Default-Value",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can construct a new ",
              "type" : "text"
            },
            {
              "code" : "Matrix",
              "type" : "codeVoice"
            },
            {
              "text" : " instance by passing",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an appropriate row and column count to its initializer:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var matrix = Matrix(rows: 2, columns: 2)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above creates a new ",
              "type" : "text"
            },
            {
              "code" : "Matrix",
              "type" : "codeVoice"
            },
            {
              "text" : " instance with two rows and two columns.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "grid",
              "type" : "codeVoice"
            },
            {
              "text" : " array for this ",
              "type" : "text"
            },
            {
              "code" : "Matrix",
              "type" : "codeVoice"
            },
            {
              "text" : " instance",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is effectively a flattened version of the matrix,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as read from top left to bottom right:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "subscriptMatrix01",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Values in the matrix can be set by passing row and column values into the subscript,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separated by a comma:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "matrix[0, 1] = 1.5",
            "matrix[1, 0] = 3.2"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "These two statements call the subscript’s setter to set",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a value of ",
              "type" : "text"
            },
            {
              "code" : "1.5",
              "type" : "codeVoice"
            },
            {
              "text" : " in the top right position of the matrix",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(where ",
              "type" : "text"
            },
            {
              "code" : "row",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "column",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "code" : "3.2",
              "type" : "codeVoice"
            },
            {
              "text" : " in the bottom left position",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(where ",
              "type" : "text"
            },
            {
              "code" : "row",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "column",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : "):",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "subscriptMatrix02",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Matrix",
              "type" : "codeVoice"
            },
            {
              "text" : " subscript’s getter and setter both contain an assertion",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to check that the subscript’s  ",
              "type" : "text"
            },
            {
              "code" : "row",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "column",
              "type" : "codeVoice"
            },
            {
              "text" : " values are valid.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To assist with these assertions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Matrix",
              "type" : "codeVoice"
            },
            {
              "text" : " includes a convenience method called ",
              "type" : "text"
            },
            {
              "code" : "indexIsValid(row:column:)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which checks whether the requested ",
              "type" : "text"
            },
            {
              "code" : "row",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "column",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are inside the bounds of the matrix:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func indexIsValid(row: Int, column: Int) -> Bool {",
            "    return row >= 0 && row < rows && column >= 0 && column < columns",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "An assertion is triggered if you try to access a subscript",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that’s outside of the matrix bounds:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let someValue = matrix[2, 2]",
            "\/\/ This triggers an assert, because [2, 2] is outside of the matrix bounds."
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Type-Subscripts",
          "level" : 2,
          "text" : "Type Subscripts",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Instance subscripts, as described above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are subscripts that you call on an instance of a particular type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can also define subscripts that are called on the type itself.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This kind of subscript is called a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type subscript",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You indicate a type subscript",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by writing the ",
              "type" : "text"
            },
            {
              "code" : "static",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword before the ",
              "type" : "text"
            },
            {
              "code" : "subscript",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Classes can use the ",
              "type" : "text"
            },
            {
              "code" : "class",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword instead,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to allow subclasses to override the superclass’s implementation of that subscript.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example below shows how you define and call a type subscript:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum Planet: Int {",
            "    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune",
            "    static subscript(n: Int) -> Planet {",
            "        return Planet(rawValue: n)!",
            "    }",
            "}",
            "let mars = Planet[4]",
            "print(mars)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/the-swift-programming-language\/subscripts"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Accessing-and-Modifying-a-Dictionary": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Accessing-and-Modifying-a-Dictionary",
  "kind" : "section",
  "title" : "Accessing and Modifying a Dictionary",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/collectiontypes#Accessing-and-Modifying-a-Dictionary"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Creating-an-Array-with-a-Default-Value": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Creating-an-Array-with-a-Default-Value",
  "kind" : "section",
  "title" : "Creating an Array with a Default Value",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/collectiontypes#Creating-an-Array-with-a-Default-Value"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Default-Parameter-Values": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values",
  "kind" : "section",
  "title" : "Default Parameter Values",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/functions#Default-Parameter-Values"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Variadic-Parameters": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters",
  "kind" : "section",
  "title" : "Variadic Parameters",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/functions#Variadic-Parameters"
},
"subscriptMatrix01": {
  "alt" : null,
  "identifier" : "subscriptMatrix01",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/subscriptMatrix01@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/subscriptMatrix01~dark@2x.png"
    }
  ]
},
"subscriptMatrix02": {
  "alt" : null,
  "identifier" : "subscriptMatrix02",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/subscriptMatrix02@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/subscriptMatrix02~dark@2x.png"
    }
  ]
}
}
}