{
  "abstract" : [
    {
      "text" : "Work with common kinds of data and write basic syntax.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "The Swift Programming Language"
      }
    ],
    "title" : "The Basics"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "text" : "Swift is a programming language for iOS, macOS, watchOS, and tvOS app development.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you have experience developing in C or Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "many parts of Swift will be familiar to you.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift provides its own versions of all fundamental C and Objective-C types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "including ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " for integers, ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Float",
              "type" : "codeVoice"
            },
            {
              "text" : " for floating-point values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " for Boolean values, and ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " for textual data.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift also provides powerful versions of the three primary collection types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Array",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "Set",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "Dictionary",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Like C, Swift uses variables to store and refer to values by an identifying name.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift also makes extensive use of variables whose values can’t be changed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These are known as constants, and are much more powerful than constants in C.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Constants are used throughout Swift to make code safer and clearer in intent",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when you work with values that don’t need to change.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In addition to familiar types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift introduces advanced types not found in Objective-C, such as tuples.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Tuples enable you to create and pass around groupings of values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use a tuple to return multiple values from a function as a single compound value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift also introduces optional types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which handle the absence of a value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Optionals say either “there ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "is",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " a value, and it equals ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "x",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : "”",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or “there ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "isn’t",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " a value at all”.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Using optionals is similar to using ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " with pointers in Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but they work for any type, not just classes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Not only are optionals safer and more expressive than ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " pointers in Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "they’re at the heart of many of Swift’s most powerful features.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift is a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type-safe",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " language,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which means the language helps you to be clear about the types of values your code can work with.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If part of your code requires a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "type safety prevents you from passing it an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " by mistake.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Likewise, type safety prevents you from",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "accidentally passing an optional ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to a piece of code that requires a non-optional ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Type safety helps you catch and fix errors as early as possible in the development process.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Constants-and-Variables",
          "level" : 2,
          "text" : "Constants and Variables",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Constants and variables associate a name",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(such as ",
              "type" : "text"
            },
            {
              "code" : "maximumNumberOfLoginAttempts",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "welcomeMessage",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a value of a particular type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(such as the number ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : " or the string ",
              "type" : "text"
            },
            {
              "code" : "\"Hello\"",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The value of a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "constant",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " can’t be changed once it’s set,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whereas a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "variable",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " can be set to a different value in the future.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Declaring-Constants-and-Variables",
          "level" : 3,
          "text" : "Declaring Constants and Variables",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Constants and variables must be declared before they’re used.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You declare constants with the ",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and variables with the ",
              "type" : "text"
            },
            {
              "code" : "var",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s an example of how constants and variables can be used",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to track the number of login attempts a user has made:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let maximumNumberOfLoginAttempts = 10",
            "var currentLoginAttempt = 0"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This code can be read as:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "“Declare a new constant called ",
              "type" : "text"
            },
            {
              "code" : "maximumNumberOfLoginAttempts",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and give it a value of ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Then, declare a new variable called ",
              "type" : "text"
            },
            {
              "code" : "currentLoginAttempt",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and give it an initial value of ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : ".”",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the maximum number of allowed login attempts is declared as a constant,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because the maximum value never changes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The current login attempt counter is declared as a variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because this value must be incremented after each failed login attempt.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can declare multiple constants or multiple variables on a single line,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separated by commas:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var x = 0.0, y = 0.0, z = 0.0"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "If a stored value in your code won’t change,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "always declare it as a constant with the ",
                  "type" : "text"
                },
                {
                  "code" : "let",
                  "type" : "codeVoice"
                },
                {
                  "text" : " keyword.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Use variables only for storing values that need to be able to change.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Type-Annotations",
          "level" : 3,
          "text" : "Type Annotations",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can provide a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type annotation",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " when you declare a constant or variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to be clear about the kind of values the constant or variable can store.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Write a type annotation by placing a colon after the constant or variable name,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by a space, followed by the name of the type to use.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example provides a type annotation for a variable called ",
              "type" : "text"
            },
            {
              "code" : "welcomeMessage",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that the variable can store ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " values:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var welcomeMessage: String"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The colon in the declaration means “…of type…,”",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so the code above can be read as:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "“Declare a variable called ",
              "type" : "text"
            },
            {
              "code" : "welcomeMessage",
              "type" : "codeVoice"
            },
            {
              "text" : " that’s of type ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".”",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The phrase “of type ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : "” means “can store any ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value.”",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Think of it as meaning “the type of thing” (or “the kind of thing”) that can be stored.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "welcomeMessage",
              "type" : "codeVoice"
            },
            {
              "text" : " variable can now be set to any string value without error:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "welcomeMessage = \"Hello\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can define multiple related variables of the same type on a single line,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separated by commas, with a single type annotation after the final variable name:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var red, green, blue: Double"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "It’s rare that you need to write type annotations in practice.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If you provide an initial value for a constant or variable at the point that it’s defined,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Swift can almost always infer the type to be used for that constant or variable,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as described in ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Type-Safety-and-Type-Inference",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "In the ",
                  "type" : "text"
                },
                {
                  "code" : "welcomeMessage",
                  "type" : "codeVoice"
                },
                {
                  "text" : " example above, no initial value is provided,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and so the type of the ",
                  "type" : "text"
                },
                {
                  "code" : "welcomeMessage",
                  "type" : "codeVoice"
                },
                {
                  "text" : " variable is specified with a type annotation",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "rather than being inferred from an initial value.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Naming-Constants-and-Variables",
          "level" : 3,
          "text" : "Naming Constants and Variables",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Constant and variable names can contain almost any character,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "including Unicode characters:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let π = 3.14159",
            "let 你好 = \"你好世界\"",
            "let 🐶🐮 = \"dogcow\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Constant and variable names can’t contain",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whitespace characters, mathematical symbols, arrows, private-use Unicode scalar values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or line- and box-drawing characters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Nor can they begin with a number,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "although numbers may be included elsewhere within the name.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Once you’ve declared a constant or variable of a certain type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can’t declare it again with the same name,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or change it to store values of a different type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Nor can you change a constant into a variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or a variable into a constant.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "If you need to give a constant or variable the same name as a reserved Swift keyword,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "surround the keyword with backticks (```) when using it as a name.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "However, avoid using keywords as names unless you have absolutely no choice.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can change the value of an existing variable to another value of a compatible type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In this example, the value of ",
              "type" : "text"
            },
            {
              "code" : "friendlyWelcome",
              "type" : "codeVoice"
            },
            {
              "text" : " is changed from",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "\"Hello!\"",
              "type" : "codeVoice"
            },
            {
              "text" : " to ",
              "type" : "text"
            },
            {
              "code" : "\"Bonjour!\"",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var friendlyWelcome = \"Hello!\"",
            "friendlyWelcome = \"Bonjour!\"",
            "\/\/ friendlyWelcome is now \"Bonjour!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike a variable, the value of a constant can’t be changed after it’s set.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Attempting to do so is reported as an error when your code is compiled:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let languageName = \"Swift\"",
            "languageName = \"Swift++\"",
            "\/\/ This is a compile-time error: languageName cannot be changed."
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Printing-Constants-and-Variables",
          "level" : 3,
          "text" : "Printing Constants and Variables",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can print the current value of a constant or variable with the ",
              "type" : "text"
            },
            {
              "code" : "print(_:separator:terminator:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(friendlyWelcome)",
            "\/\/ Prints \"Bonjour!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "print(_:separator:terminator:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is a global function that prints one or more values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to an appropriate output.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In Xcode, for example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "print(_:separator:terminator:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function prints its output in Xcode’s “console” pane.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "separator",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "terminator",
              "type" : "codeVoice"
            },
            {
              "text" : " parameter have default values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so you can omit them when you call this function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "By default, the function terminates the line it prints by adding a line break.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To print a value without a line break after it,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "pass an empty string as the terminator — for example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "print(someValue, terminator: \"\")",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For information about parameters with default values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift uses ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "string interpolation",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to include the name of a constant or variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as a placeholder in a longer string,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to prompt Swift to replace it with the current value of that constant or variable.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Wrap the name in parentheses and escape it with a backslash before the opening parenthesis:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"The current value of friendlyWelcome is \\(friendlyWelcome)\")",
            "\/\/ Prints \"The current value of friendlyWelcome is Bonjour!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "All options you can use with string interpolation",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "are described in ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Interpolation",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Comments",
          "level" : 2,
          "text" : "Comments",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use comments to include nonexecutable text in your code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as a note or reminder to yourself.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Comments are ignored by the Swift compiler when your code is compiled.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Comments in Swift are very similar to comments in C.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Single-line comments begin with two forward-slashes (",
              "type" : "text"
            },
            {
              "code" : "\/\/",
              "type" : "codeVoice"
            },
            {
              "text" : "):",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ This is a comment."
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Multiline comments start with a forward-slash followed by an asterisk (",
              "type" : "text"
            },
            {
              "code" : "\/*",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and end with an asterisk followed by a forward-slash (",
              "type" : "text"
            },
            {
              "code" : "*\/",
              "type" : "codeVoice"
            },
            {
              "text" : "):",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/* This is also a comment",
            "but is written over multiple lines. *\/"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike multiline comments in C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "multiline comments in Swift can be nested inside other multiline comments.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You write nested comments by starting a multiline comment block",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and then starting a second multiline comment within the first block.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The second block is then closed, followed by the first block:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/* This is the start of the first multiline comment.",
            "    \/* This is the second, nested multiline comment. *\/",
            "This is the end of the first multiline comment. *\/"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Nested multiline comments enable you to comment out large blocks of code quickly and easily,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even if the code already contains multiline comments.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Semicolons",
          "level" : 2,
          "text" : "Semicolons",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike many other languages,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift doesn’t require you to write a semicolon (",
              "type" : "text"
            },
            {
              "code" : ";",
              "type" : "codeVoice"
            },
            {
              "text" : ") after each statement in your code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "although you can do so if you wish.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, semicolons ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "are",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " required",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if you want to write multiple separate statements on a single line:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let cat = \"🐱\"; print(cat)",
            "\/\/ Prints \"🐱\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Integers",
          "level" : 2,
          "text" : "Integers",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Integers",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " are whole numbers with no fractional component,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as ",
              "type" : "text"
            },
            {
              "code" : "42",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "-23",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Integers are either ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "signed",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (positive, zero, or negative)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "unsigned",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (positive or zero).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift provides signed and unsigned integers in 8, 16, 32, and 64 bit forms.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These integers follow a naming convention similar to C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in that an 8-bit unsigned integer is of type ",
              "type" : "text"
            },
            {
              "code" : "UInt8",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a 32-bit signed integer is of type ",
              "type" : "text"
            },
            {
              "code" : "Int32",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Like all types in Swift, these integer types have capitalized names.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Integer-Bounds",
          "level" : 3,
          "text" : "Integer Bounds",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can access the minimum and maximum values of each integer type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with its ",
              "type" : "text"
            },
            {
              "code" : "min",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "max",
              "type" : "codeVoice"
            },
            {
              "text" : " properties:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let minValue = UInt8.min  \/\/ minValue is equal to 0, and is of type UInt8",
            "let maxValue = UInt8.max  \/\/ maxValue is equal to 255, and is of type UInt8"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The values of these properties are of the appropriate-sized number type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(such as ",
              "type" : "text"
            },
            {
              "code" : "UInt8",
              "type" : "codeVoice"
            },
            {
              "text" : " in the example above)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can therefore be used in expressions alongside other values of the same type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Int",
          "level" : 3,
          "text" : "Int",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In most cases, you don’t need to pick a specific size of integer to use in your code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift provides an additional integer type, ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which has the same size as the current platform’s native word size:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "On a 32-bit platform, ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is the same size as ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int32",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "On a 64-bit platform, ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is the same size as ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int64",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unless you need to work with a specific size of integer,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "always use ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " for integer values in your code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This aids code consistency and interoperability.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Even on 32-bit platforms, ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " can store any value between ",
              "type" : "text"
            },
            {
              "code" : "-2,147,483,648",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "2,147,483,647",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and is large enough for many integer ranges.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "UInt",
          "level" : 3,
          "text" : "UInt",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift also provides an unsigned integer type, ",
              "type" : "text"
            },
            {
              "code" : "UInt",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which has the same size as the current platform’s native word size:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "On a 32-bit platform, ",
                      "type" : "text"
                    },
                    {
                      "code" : "UInt",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is the same size as ",
                      "type" : "text"
                    },
                    {
                      "code" : "UInt32",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "On a 64-bit platform, ",
                      "type" : "text"
                    },
                    {
                      "code" : "UInt",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is the same size as ",
                      "type" : "text"
                    },
                    {
                      "code" : "UInt64",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Use ",
                  "type" : "text"
                },
                {
                  "code" : "UInt",
                  "type" : "codeVoice"
                },
                {
                  "text" : " only when you specifically need",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "an unsigned integer type with the same size as the platform’s native word size.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If this isn’t the case, ",
                  "type" : "text"
                },
                {
                  "code" : "Int",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is preferred,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "even when the values to be stored are known to be nonnegative.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "A consistent use of ",
                  "type" : "text"
                },
                {
                  "code" : "Int",
                  "type" : "codeVoice"
                },
                {
                  "text" : " for integer values aids code interoperability,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "avoids the need to convert between different number types,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and matches integer type inference, as described in ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Type-Safety-and-Type-Inference",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Floating-Point-Numbers",
          "level" : 2,
          "text" : "Floating-Point Numbers",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Floating-point numbers",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " are numbers with a fractional component,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as ",
              "type" : "text"
            },
            {
              "code" : "3.14159",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "0.1",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "-273.15",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Floating-point types can represent a much wider range of values than integer types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can store numbers that are much larger or smaller than can be stored in an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift provides two signed floating-point number types:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Double",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " represents a 64-bit floating-point number.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Float",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " represents a 32-bit floating-point number.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                },
                {
                  "code" : "Double",
                  "type" : "codeVoice"
                },
                {
                  "text" : " has a precision of at least 15 decimal digits,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "whereas the precision of ",
                  "type" : "text"
                },
                {
                  "code" : "Float",
                  "type" : "codeVoice"
                },
                {
                  "text" : " can be as little as 6 decimal digits.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The appropriate floating-point type to use depends on the nature and range of",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "values you need to work with in your code.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "In situations where either type would be appropriate, ",
                  "type" : "text"
                },
                {
                  "code" : "Double",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is preferred.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Type-Safety-and-Type-Inference",
          "level" : 2,
          "text" : "Type Safety and Type Inference",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift is a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type-safe",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " language.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A type safe language encourages you to be clear about",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the types of values your code can work with.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If part of your code requires a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ", you can’t pass it an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " by mistake.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because Swift is type safe,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it performs ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type checks",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " when compiling your code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and flags any mismatched types as errors.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This enables you to catch and fix errors as early as possible in the development process.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Type-checking helps you avoid errors when you’re working with different types of values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, this doesn’t mean that you have to specify the type of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "every constant and variable that you declare.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you don’t specify the type of value you need,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift uses ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type inference",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to work out the appropriate type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Type inference enables a compiler to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "deduce the type of a particular expression automatically when it compiles your code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "simply by examining the values you provide.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because of type inference, Swift requires far fewer type declarations",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "than languages such as C or Objective-C.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Constants and variables are still explicitly typed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but much of the work of specifying their type is done for you.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Type inference is particularly useful",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when you declare a constant or variable with an initial value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is often done by assigning a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "literal value",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (or ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "literal",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the constant or variable at the point that you declare it.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(A literal value is a value that appears directly in your source code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as ",
              "type" : "text"
            },
            {
              "code" : "42",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "3.14159",
              "type" : "codeVoice"
            },
            {
              "text" : " in the examples below.)",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, if you assign a literal value of ",
              "type" : "text"
            },
            {
              "code" : "42",
              "type" : "codeVoice"
            },
            {
              "text" : " to a new constant",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without saying what type it is,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift infers that you want the constant to be an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because you have initialized it with a number that looks like an integer:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let meaningOfLife = 42",
            "\/\/ meaningOfLife is inferred to be of type Int"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Likewise, if you don’t specify a type for a floating-point literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift infers that you want to create a ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let pi = 3.14159",
            "\/\/ pi is inferred to be of type Double"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift always chooses ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " (rather than ",
              "type" : "text"
            },
            {
              "code" : "Float",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when inferring the type of floating-point numbers.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you combine integer and floating-point literals in an expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a type of ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " will be inferred from the context:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let anotherPi = 3 + 0.14159",
            "\/\/ anotherPi is also inferred to be of type Double"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The literal value of ",
              "type" : "text"
            },
            {
              "code" : "3",
              "type" : "codeVoice"
            },
            {
              "text" : " has no explicit type in and of itself,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so an appropriate output type of ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " is inferred",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from the presence of a floating-point literal as part of the addition.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Numeric-Literals",
          "level" : 2,
          "text" : "Numeric Literals",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Integer literals can be written as:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "decimal",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " number, with no prefix",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "binary",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " number, with a ",
                      "type" : "text"
                    },
                    {
                      "code" : "0b",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " prefix",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "An ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "octal",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " number, with a ",
                      "type" : "text"
                    },
                    {
                      "code" : "0o",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " prefix",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "hexadecimal",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " number, with a ",
                      "type" : "text"
                    },
                    {
                      "code" : "0x",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " prefix",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "All of these integer literals have a decimal value of ",
              "type" : "text"
            },
            {
              "code" : "17",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let decimalInteger = 17",
            "let binaryInteger = 0b10001       \/\/ 17 in binary notation",
            "let octalInteger = 0o21           \/\/ 17 in octal notation",
            "let hexadecimalInteger = 0x11     \/\/ 17 in hexadecimal notation"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Floating-point literals can be decimal (with no prefix),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or hexadecimal (with a ",
              "type" : "text"
            },
            {
              "code" : "0x",
              "type" : "codeVoice"
            },
            {
              "text" : " prefix).",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "They must always have a number (or hexadecimal number) on both sides of the decimal point.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Decimal floats can also have an optional ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "exponent",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "indicated by an uppercase or lowercase ",
              "type" : "text"
            },
            {
              "code" : "e",
              "type" : "codeVoice"
            },
            {
              "text" : ";",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "hexadecimal floats must have an exponent,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "indicated by an uppercase or lowercase ",
              "type" : "text"
            },
            {
              "code" : "p",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For decimal numbers with an exponent of ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the base number is multiplied by 10ˣ:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "1.25e2",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " means 1.25 x 10², or ",
                      "type" : "text"
                    },
                    {
                      "code" : "125.0",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "1.25e-2",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " means 1.25 x 10⁻², or ",
                      "type" : "text"
                    },
                    {
                      "code" : "0.0125",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "For hexadecimal numbers with an exponent of ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the base number is multiplied by 2ˣ:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "0xFp2",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " means 15 x 2², or ",
                      "type" : "text"
                    },
                    {
                      "code" : "60.0",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "0xFp-2",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " means 15 x 2⁻², or ",
                      "type" : "text"
                    },
                    {
                      "code" : "3.75",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "All of these floating-point literals have a decimal value of ",
              "type" : "text"
            },
            {
              "code" : "12.1875",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let decimalDouble = 12.1875",
            "let exponentDouble = 1.21875e1",
            "let hexadecimalDouble = 0xC.3p0"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Numeric literals can contain extra formatting to make them easier to read.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Both integers and floats can be padded with extra zeros",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can contain underscores to help with readability.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Neither type of formatting affects the underlying value of the literal:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let paddedDouble = 000123.456",
            "let oneMillion = 1_000_000",
            "let justOverOneMillion = 1_000_000.000_000_1"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Numeric-Type-Conversion",
          "level" : 2,
          "text" : "Numeric Type Conversion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use the ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " type for all general-purpose integer constants and variables in your code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even if they’re known to be nonnegative.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Using the default integer type in everyday situations means that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "integer constants and variables are immediately interoperable in your code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and will match the inferred type for integer literal values.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use other integer types only when they’re specifically needed for the task at hand,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because of explicitly sized data from an external source,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or for performance, memory usage, or other necessary optimization.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Using explicitly sized types in these situations",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "helps to catch any accidental value overflows",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and implicitly documents the nature of the data being used.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Integer-Conversion",
          "level" : 3,
          "text" : "Integer Conversion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The range of numbers that can be stored in an integer constant or variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is different for each numeric type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "code" : "Int8",
              "type" : "codeVoice"
            },
            {
              "text" : " constant or variable can store numbers between ",
              "type" : "text"
            },
            {
              "code" : "-128",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "127",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whereas a ",
              "type" : "text"
            },
            {
              "code" : "UInt8",
              "type" : "codeVoice"
            },
            {
              "text" : " constant or variable can store numbers between ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "255",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A number that won’t fit into a constant or variable of a sized integer type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is reported as an error when your code is compiled:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let cannotBeNegative: UInt8 = -1",
            "\/\/ UInt8 can't store negative numbers, and so this will report an error",
            "let tooBig: Int8 = Int8.max + 1",
            "\/\/ Int8 can't store a number larger than its maximum value,",
            "\/\/ and so this will also report an error"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because each numeric type can store a different range of values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you must opt in to numeric type conversion on a case-by-case basis.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This opt-in approach prevents hidden conversion errors",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and helps make type conversion intentions explicit in your code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To convert one specific number type to another,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you initialize a new number of the desired type with the existing value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the example below,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the constant ",
              "type" : "text"
            },
            {
              "code" : "twoThousand",
              "type" : "codeVoice"
            },
            {
              "text" : " is of type ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whereas the constant ",
              "type" : "text"
            },
            {
              "code" : "one",
              "type" : "codeVoice"
            },
            {
              "text" : " is of type ",
              "type" : "text"
            },
            {
              "code" : "UInt8",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "They can’t be added together directly,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because they’re not of the same type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Instead, this example calls ",
              "type" : "text"
            },
            {
              "code" : "UInt16(one)",
              "type" : "codeVoice"
            },
            {
              "text" : " to create",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a new ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : " initialized with the value of ",
              "type" : "text"
            },
            {
              "code" : "one",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and uses this value in place of the original:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let twoThousand: UInt16 = 2_000",
            "let one: UInt8 = 1",
            "let twoThousandAndOne = twoThousand + UInt16(one)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because both sides of the addition are now of type ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the addition is allowed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The output constant (",
              "type" : "text"
            },
            {
              "code" : "twoThousandAndOne",
              "type" : "codeVoice"
            },
            {
              "text" : ") is inferred to be of type ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because it’s the sum of two ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : " values.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "code" : "SomeType(ofInitialValue)",
              "type" : "codeVoice"
            },
            {
              "text" : " is the default way to call the initializer of a Swift type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and pass in an initial value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Behind the scenes, ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : " has an initializer that accepts a ",
              "type" : "text"
            },
            {
              "code" : "UInt8",
              "type" : "codeVoice"
            },
            {
              "text" : " value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so this initializer is used to make a new ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : " from an existing ",
              "type" : "text"
            },
            {
              "code" : "UInt8",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can’t pass in ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "any",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " type here, however —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it has to be a type for which ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : " provides an initializer.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Extending existing types to provide initializers that accept new types",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(including your own type definitions)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is covered in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Integer-and-Floating-Point-Conversion",
          "level" : 3,
          "text" : "Integer and Floating-Point Conversion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Conversions between integer and floating-point numeric types must be made explicit:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let three = 3",
            "let pointOneFourOneFiveNine = 0.14159",
            "let pi = Double(three) + pointOneFourOneFiveNine",
            "\/\/ pi equals 3.14159, and is inferred to be of type Double"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here, the value of the constant ",
              "type" : "text"
            },
            {
              "code" : "three",
              "type" : "codeVoice"
            },
            {
              "text" : " is used to create a new value of type ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so that both sides of the addition are of the same type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Without this conversion in place, the addition would not be allowed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Floating-point to integer conversion must also be made explicit.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An integer type can be initialized with a ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "Float",
              "type" : "codeVoice"
            },
            {
              "text" : " value:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let integerPi = Int(pi)",
            "\/\/ integerPi equals 3, and is inferred to be of type Int"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Floating-point values are always truncated when used to initialize a new integer value in this way.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This means that ",
              "type" : "text"
            },
            {
              "code" : "4.75",
              "type" : "codeVoice"
            },
            {
              "text" : " becomes ",
              "type" : "text"
            },
            {
              "code" : "4",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "-3.9",
              "type" : "codeVoice"
            },
            {
              "text" : " becomes ",
              "type" : "text"
            },
            {
              "code" : "-3",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The rules for combining numeric constants and variables are different from",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the rules for numeric literals.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The literal value ",
                  "type" : "text"
                },
                {
                  "code" : "3",
                  "type" : "codeVoice"
                },
                {
                  "text" : " can be added directly to the literal value ",
                  "type" : "text"
                },
                {
                  "code" : "0.14159",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "because number literals don’t have an explicit type in and of themselves.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Their type is inferred only at the point that they’re evaluated by the compiler.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Type-Aliases",
          "level" : 2,
          "text" : "Type Aliases",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Type aliases",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " define an alternative name for an existing type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You define type aliases with the ",
              "type" : "text"
            },
            {
              "code" : "typealias",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Type aliases are useful when you want to refer to an existing type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by a name that’s contextually more appropriate,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as when working with data of a specific size from an external source:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "typealias AudioSample = UInt16"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Once you define a type alias,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use the alias anywhere you might use the original name:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var maxAmplitudeFound = AudioSample.min",
            "\/\/ maxAmplitudeFound is now 0"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here, ",
              "type" : "text"
            },
            {
              "code" : "AudioSample",
              "type" : "codeVoice"
            },
            {
              "text" : " is defined as an alias for ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because it’s an alias,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the call to ",
              "type" : "text"
            },
            {
              "code" : "AudioSample.min",
              "type" : "codeVoice"
            },
            {
              "text" : " actually calls ",
              "type" : "text"
            },
            {
              "code" : "UInt16.min",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which provides an initial value of ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " for the ",
              "type" : "text"
            },
            {
              "code" : "maxAmplitudeFound",
              "type" : "codeVoice"
            },
            {
              "text" : " variable.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Booleans",
          "level" : 2,
          "text" : "Booleans",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift has a basic ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Boolean",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " type, called ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Boolean values are referred to as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "logical",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because they can only ever be true or false.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift provides two Boolean constant values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let orangesAreOrange = true",
            "let turnipsAreDelicious = false"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The types of ",
              "type" : "text"
            },
            {
              "code" : "orangesAreOrange",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "turnipsAreDelicious",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "have been inferred as ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " from the fact that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "they were initialized with Boolean literal values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As with ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you don’t need to declare constants or variables as ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if you set them to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " as soon as you create them.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Type inference helps make Swift code more concise and readable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when it initializes constants or variables with other values whose type is already known.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Boolean values are particularly useful when you work with conditional statements",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if turnipsAreDelicious {",
            "    print(\"Mmm, tasty turnips!\")",
            "} else {",
            "    print(\"Eww, turnips are horrible.\")",
            "}",
            "\/\/ Prints \"Eww, turnips are horrible.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Conditional statements such as the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement are covered in more detail in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift’s type safety prevents non-Boolean values from being substituted for ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The following example reports a compile-time error:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let i = 1",
            "if i {",
            "    \/\/ this example will not compile, and will report an error",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "However, the alternative example below is valid:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let i = 1",
            "if i == 1 {",
            "    \/\/ this example will compile successfully",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The result of the ",
              "type" : "text"
            },
            {
              "code" : "i == 1",
              "type" : "codeVoice"
            },
            {
              "text" : " comparison is of type ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so this second example passes the type-check.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Comparisons like ",
              "type" : "text"
            },
            {
              "code" : "i == 1",
              "type" : "codeVoice"
            },
            {
              "text" : " are discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "As with other examples of type safety in Swift,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this approach avoids accidental errors",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ensures that the intention of a particular section of code is always clear.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Tuples",
          "level" : 2,
          "text" : "Tuples",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Tuples",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " group multiple values into a single compound value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The values within a tuple can be of any type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and don’t have to be of the same type as each other.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example, ",
              "type" : "text"
            },
            {
              "code" : "(404, \"Not Found\")",
              "type" : "codeVoice"
            },
            {
              "text" : " is a tuple that describes an ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "HTTP status code",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An HTTP status code is a special value returned by a web server whenever you request a web page.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A status code of ",
              "type" : "text"
            },
            {
              "code" : "404 Not Found",
              "type" : "codeVoice"
            },
            {
              "text" : " is returned if you request a webpage that doesn’t exist.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let http404Error = (404, \"Not Found\")",
            "\/\/ http404Error is of type (Int, String), and equals (404, \"Not Found\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "(404, \"Not Found\")",
              "type" : "codeVoice"
            },
            {
              "text" : " tuple groups together an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " and a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to give the HTTP status code two separate values:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a number and a human-readable description.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It can be described as “a tuple of type ",
              "type" : "text"
            },
            {
              "code" : "(Int, String)",
              "type" : "codeVoice"
            },
            {
              "text" : "”.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can create tuples from any permutation of types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and they can contain as many different types as you like.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "There’s nothing stopping you from having",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a tuple of type ",
              "type" : "text"
            },
            {
              "code" : "(Int, Int, Int)",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "(String, Bool)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or indeed any other permutation you require.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "decompose",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " a tuple’s contents into separate constants or variables,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which you then access as usual:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let (statusCode, statusMessage) = http404Error",
            "print(\"The status code is \\(statusCode)\")",
            "\/\/ Prints \"The status code is 404\"",
            "print(\"The status message is \\(statusMessage)\")",
            "\/\/ Prints \"The status message is Not Found\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you only need some of the tuple’s values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "ignore parts of the tuple with an underscore (",
              "type" : "text"
            },
            {
              "code" : "_",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when you decompose the tuple:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let (justTheStatusCode, _) = http404Error",
            "print(\"The status code is \\(justTheStatusCode)\")",
            "\/\/ Prints \"The status code is 404\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Alternatively,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "access the individual element values in a tuple using index numbers starting at zero:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"The status code is \\(http404Error.0)\")",
            "\/\/ Prints \"The status code is 404\"",
            "print(\"The status message is \\(http404Error.1)\")",
            "\/\/ Prints \"The status message is Not Found\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can name the individual elements in a tuple when the tuple is defined:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let http200Status = (statusCode: 200, description: \"OK\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you name the elements in a tuple,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use the element names to access the values of those elements:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"The status code is \\(http200Status.statusCode)\")",
            "\/\/ Prints \"The status code is 200\"",
            "print(\"The status message is \\(http200Status.description)\")",
            "\/\/ Prints \"The status message is OK\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Tuples are particularly useful as the return values of functions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A function that tries to retrieve a web page might return the ",
              "type" : "text"
            },
            {
              "code" : "(Int, String)",
              "type" : "codeVoice"
            },
            {
              "text" : " tuple type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to describe the success or failure of the page retrieval.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "By returning a tuple with two distinct values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "each of a different type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the function provides more useful information about its outcome",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "than if it could only return a single value of a single type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more information, see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-with-Multiple-Return-Values",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Tuples are useful for simple groups of related values.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "They’re not suited to the creation of complex data structures.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If your data structure is likely to be more complex,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "model it as a class or structure, rather than as a tuple.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "For more information, see ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Optionals",
          "level" : 2,
          "text" : "Optionals",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You use ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "optionals",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " in situations where a value may be absent.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An optional represents two possibilities:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Either there ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "is",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " a value, and you can unwrap the optional to access that value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or there ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "isn’t",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " a value at all.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The concept of optionals doesn’t exist in C or Objective-C.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The nearest thing in Objective-C is",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the ability to return ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " from a method that would otherwise return an object,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "with ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " meaning “the absence of a valid object.”",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "However, this only works for objects — it doesn’t work for",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "structures, basic C types, or enumeration values.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "For these types,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Objective-C methods typically return a special value (such as ",
                  "type" : "text"
                },
                {
                  "code" : "NSNotFound",
                  "type" : "codeVoice"
                },
                {
                  "text" : ")",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "to indicate the absence of a value.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This approach assumes that the method’s caller knows there’s a special value to test against",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and remembers to check for it.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Swift’s optionals let you indicate the absence of a value for ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "any type at all",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "without the need for special constants.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s an example of how optionals can be used to cope with the absence of a value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift’s ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " type has an initializer",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which tries to convert a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value into an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, not every string can be converted into an integer.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The string ",
              "type" : "text"
            },
            {
              "code" : "\"123\"",
              "type" : "codeVoice"
            },
            {
              "text" : " can be converted into the numeric value ",
              "type" : "text"
            },
            {
              "code" : "123",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but the string ",
              "type" : "text"
            },
            {
              "code" : "\"hello, world\"",
              "type" : "codeVoice"
            },
            {
              "text" : " doesn’t have an obvious numeric value to convert to.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below uses the initializer to try to convert a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " into an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let possibleNumber = \"123\"",
            "let convertedNumber = Int(possibleNumber)",
            "\/\/ convertedNumber is inferred to be of type \"Int?\", or \"optional Int\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because the initializer might fail,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it returns an ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "optional",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ", rather than an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An optional ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " is written as ",
              "type" : "text"
            },
            {
              "code" : "Int?",
              "type" : "codeVoice"
            },
            {
              "text" : ", not ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The question mark indicates that the value it contains is optional,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "meaning that it might contain ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "some",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or it might contain ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "no value at all",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(It can’t contain anything else, such as a ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " value or a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It’s either an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ", or it’s nothing at all.)",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "nil",
          "level" : 3,
          "text" : "nil",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You set an optional variable to a valueless state",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by assigning it the special value ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var serverResponseCode: Int? = 404",
            "\/\/ serverResponseCode contains an actual Int value of 404",
            "serverResponseCode = nil",
            "\/\/ serverResponseCode now contains no value"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "You can’t use ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " with non-optional constants and variables.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If a constant or variable in your code needs to work with",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the absence of a value under certain conditions,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "always declare it as an optional value of the appropriate type.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you define an optional variable without providing a default value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the variable is automatically set to ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " for you:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var surveyAnswer: String?",
            "\/\/ surveyAnswer is automatically set to nil"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Swift’s ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " isn’t the same as ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " in Objective-C.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "In Objective-C, ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is a pointer to a nonexistent object.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "In Swift, ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " isn’t a pointer — it’s the absence of a value of a certain type.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Optionals of ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "any",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " type can be set to ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", not just object types.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "If-Statements-and-Forced-Unwrapping",
          "level" : 3,
          "text" : "If Statements and Forced Unwrapping",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement to find out whether an optional contains a value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by comparing the optional against ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You perform this comparison with the “equal to” operator (",
              "type" : "text"
            },
            {
              "code" : "==",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or the “not equal to” operator (",
              "type" : "text"
            },
            {
              "code" : "!=",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If an optional has a value, it’s considered to be “not equal to” ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if convertedNumber != nil {",
            "    print(\"convertedNumber contains some integer value.\")",
            "}",
            "\/\/ Prints \"convertedNumber contains some integer value.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Once you’re sure that the optional ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "does",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " contain a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can access its underlying value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by adding an exclamation point (",
              "type" : "text"
            },
            {
              "code" : "!",
              "type" : "codeVoice"
            },
            {
              "text" : ") to the end of the optional’s name.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The exclamation point effectively says,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "“I know that this optional definitely has a value; please use it.”",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is known as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "forced unwrapping",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " of the optional’s value:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if convertedNumber != nil {",
            "    print(\"convertedNumber has an integer value of \\(convertedNumber!).\")",
            "}",
            "\/\/ Prints \"convertedNumber has an integer value of 123.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more about the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement, see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Trying to use ",
                  "type" : "text"
                },
                {
                  "code" : "!",
                  "type" : "codeVoice"
                },
                {
                  "text" : " to access a nonexistent optional value triggers",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "a runtime error.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Always make sure that an optional contains a non-",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " value",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "before using ",
                  "type" : "text"
                },
                {
                  "code" : "!",
                  "type" : "codeVoice"
                },
                {
                  "text" : " to force-unwrap its value.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Optional-Binding",
          "level" : 3,
          "text" : "Optional Binding",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You use ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "optional binding",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to find out whether an optional contains a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and if so, to make that value available as a temporary constant or variable.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Optional binding can be used with ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statements",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to check for a value inside an optional,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to extract that value into a constant or variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as part of a single action.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statements are described in more detail in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Write an optional binding for an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement as follows:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let <#constantName#> = <#someOptional#> {",
            "   <#statements#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can rewrite the ",
              "type" : "text"
            },
            {
              "code" : "possibleNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " example from",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " section",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to use optional binding rather than forced unwrapping:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let actualNumber = Int(possibleNumber) {",
            "    print(\"The string \\\"\\(possibleNumber)\\\" has an integer value of \\(actualNumber)\")",
            "} else {",
            "    print(\"The string \\\"\\(possibleNumber)\\\" couldn't be converted to an integer\")",
            "}",
            "\/\/ Prints \"The string \"123\" has an integer value of 123\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This code can be read as:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "“If the optional ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " returned by ",
              "type" : "text"
            },
            {
              "code" : "Int(possibleNumber)",
              "type" : "codeVoice"
            },
            {
              "text" : " contains a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "set a new constant called ",
              "type" : "text"
            },
            {
              "code" : "actualNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " to the value contained in the optional.”",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the conversion is successful,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "actualNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " constant becomes available for use within",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the first branch of the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has already been initialized with the value contained ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "within",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " the optional,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so you don’t use the ",
              "type" : "text"
            },
            {
              "code" : "!",
              "type" : "codeVoice"
            },
            {
              "text" : " suffix to access its value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In this example, ",
              "type" : "text"
            },
            {
              "code" : "actualNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " is simply used to print the result of the conversion.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you don’t need to refer to the original, optional constant or variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after accessing the value it contains,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use the same name for the new constant or variable:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let myNumber = Int(possibleNumber)",
            "\/\/ Here, myNumber is an optional integer",
            "if let myNumber = myNumber {",
            "    \/\/ Here, myNumber is a non-optional integer",
            "    print(\"My number is \\(myNumber)\")",
            "}",
            "\/\/ Prints \"My number is 123\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This code starts by checking whether ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " contains a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "just like the code in the previous example.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " has a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of a new constant named ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " is set to that value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Inside the body of the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "writing ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " refers to that new non-optional constant.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Before the beginning of the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement and after its end,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "writing ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " refers to the optional integer constant.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because this kind of code is so common,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use a shorter spelling to unwrap an optional value:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "write just the name of the constant or variable that you’re unwrapping.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The new, unwrapped constant or variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "implicitly uses the same name as the optional value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let myNumber {",
            "    print(\"My number is \\(myNumber)\")",
            "}",
            "\/\/ Prints \"My number is 123\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use both constants and variables with optional binding.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you wanted to manipulate the value of ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "within the first branch of the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you could write ",
              "type" : "text"
            },
            {
              "code" : "if var myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " instead,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the value contained within the optional",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "would be made available as a variable rather than a constant.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Changes you make to ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " inside the body of the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "apply only to that local variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "not",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to the original, optional constant or variable that you unwrapped.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can include as many optional bindings and Boolean conditions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in a single ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement as you need to,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separated by commas.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If any of the values in the optional bindings are ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or any Boolean condition evaluates to ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the whole ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s condition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is considered to be ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The following ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statements are equivalent:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let firstNumber = Int(\"4\"), let secondNumber = Int(\"42\"), firstNumber < secondNumber && secondNumber < 100 {",
            "    print(\"\\(firstNumber) < \\(secondNumber) < 100\")",
            "}",
            "\/\/ Prints \"4 < 42 < 100\"",
            "",
            "if let firstNumber = Int(\"4\") {",
            "    if let secondNumber = Int(\"42\") {",
            "        if firstNumber < secondNumber && secondNumber < 100 {",
            "            print(\"\\(firstNumber) < \\(secondNumber) < 100\")",
            "        }",
            "    }",
            "}",
            "\/\/ Prints \"4 < 42 < 100\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Constants and variables created with optional binding in an ",
                  "type" : "text"
                },
                {
                  "code" : "if",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "are available only within the body of the ",
                  "type" : "text"
                },
                {
                  "code" : "if",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "In contrast, the constants and variables created with a ",
                  "type" : "text"
                },
                {
                  "code" : "guard",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "are available in the lines of code that follow the ",
                  "type" : "text"
                },
                {
                  "code" : "guard",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as described in ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Early-Exit",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Implicitly-Unwrapped-Optionals",
          "level" : 3,
          "text" : "Implicitly Unwrapped Optionals",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "As described above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "optionals indicate that a constant or variable is allowed to have “no value”.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Optionals can be checked with an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement to see if a value exists,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can be conditionally unwrapped with optional binding",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to access the optional’s value if it does exist.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Sometimes it’s clear from a program’s structure that an optional will ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "always",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " have a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after that value is first set.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In these cases, it’s useful to remove the need",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to check and unwrap the optional’s value every time it’s accessed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because it can be safely assumed to have a value all of the time.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "These kinds of optionals are defined as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "implicitly unwrapped optionals",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You write an implicitly unwrapped optional by placing an exclamation point (",
              "type" : "text"
            },
            {
              "code" : "String!",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "rather than a question mark (",
              "type" : "text"
            },
            {
              "code" : "String?",
              "type" : "codeVoice"
            },
            {
              "text" : ") after the type that you want to make optional.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Rather than placing an exclamation point after the optional’s name when you use it,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you place an exclamation point after the optional’s type when you declare it.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Implicitly unwrapped optionals are useful when",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an optional’s value is confirmed to exist immediately after the optional is first defined",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can definitely be assumed to exist at every point thereafter.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The primary use of implicitly unwrapped optionals in Swift is during class initialization,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "An implicitly unwrapped optional is a normal optional behind the scenes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but can also be used like a non-optional value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without the need to unwrap the optional value each time it’s accessed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The following example shows the difference in behavior between",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an optional string and an implicitly unwrapped optional string",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when accessing their wrapped value as an explicit ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let possibleString: String? = \"An optional string.\"",
            "let forcedString: String = possibleString! \/\/ requires an exclamation point",
            "",
            "let assumedString: String! = \"An implicitly unwrapped optional string.\"",
            "let implicitString: String = assumedString \/\/ no need for an exclamation point"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can think of an implicitly unwrapped optional as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "giving permission for the optional to be force-unwrapped if needed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you use an implicitly unwrapped optional value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift first tries to use it as an ordinary optional value;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if it can’t be used as an optional, Swift force-unwraps the value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the code above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the optional value ",
              "type" : "text"
            },
            {
              "code" : "assumedString",
              "type" : "codeVoice"
            },
            {
              "text" : " is force-unwrapped",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "before assigning its value to ",
              "type" : "text"
            },
            {
              "code" : "implicitString",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because ",
              "type" : "text"
            },
            {
              "code" : "implicitString",
              "type" : "codeVoice"
            },
            {
              "text" : " has an explicit, non-optional type of ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In code below,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "optionalString",
              "type" : "codeVoice"
            },
            {
              "text" : " doesn’t have an explicit type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so it’s an ordinary optional.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let optionalString = assumedString",
            "\/\/ The type of optionalString is \"String?\" and assumedString isn't force-unwrapped."
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If an implicitly unwrapped optional is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " and you try to access its wrapped value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you’ll trigger a runtime error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The result is exactly the same as if you place an exclamation point",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after a normal optional that doesn’t contain a value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can check whether an implicitly unwrapped optional is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the same way you check a normal optional:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if assumedString != nil {",
            "    print(assumedString!)",
            "}",
            "\/\/ Prints \"An implicitly unwrapped optional string.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also use an implicitly unwrapped optional with optional binding,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to check and unwrap its value in a single statement:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let definiteString = assumedString {",
            "    print(definiteString)",
            "}",
            "\/\/ Prints \"An implicitly unwrapped optional string.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Don’t use an implicitly unwrapped optional when there’s a possibility of",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "a variable becoming ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " at a later point.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Always use a normal optional type if you need to check for a ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " value",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "during the lifetime of a variable.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Error-Handling",
          "level" : 2,
          "text" : "Error Handling",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You use ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "error handling",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to respond to error conditions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "your program may encounter during execution.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In contrast to optionals,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which can use the presence or absence of a value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to communicate success or failure of a function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "error handling allows you to determine the underlying cause of failure,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and, if necessary, propagate the error to another part of your program.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When a function encounters an error condition, it ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "throws",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " an error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "That function’s caller can then ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "catch",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " the error and respond appropriately.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func canThrowAnError() throws {",
            "    \/\/ this function may or may not throw an error",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A function indicates that it can throw an error",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by including the ",
              "type" : "text"
            },
            {
              "code" : "throws",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword in its declaration.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you call a function that can throw an error,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you prepend the ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword to the expression.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift automatically propagates errors out of their current scope",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "until they’re handled by a ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clause.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "do {",
            "    try canThrowAnError()",
            "    \/\/ no error was thrown",
            "} catch {",
            "    \/\/ an error was thrown",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : " statement creates a new containing scope,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which allows errors to be propagated to one or more ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clauses.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s an example of how error handling can be used",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to respond to different error conditions:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func makeASandwich() throws {",
            "    \/\/ ...",
            "}",
            "",
            "do {",
            "    try makeASandwich()",
            "    eatASandwich()",
            "} catch SandwichError.outOfCleanDishes {",
            "    washDishes()",
            "} catch SandwichError.missingIngredients(let ingredients) {",
            "    buyGroceries(ingredients)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example, the ",
              "type" : "text"
            },
            {
              "code" : "makeASandwich()",
              "type" : "codeVoice"
            },
            {
              "text" : " function will throw an error",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if no clean dishes are available",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or if any ingredients are missing.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "makeASandwich()",
              "type" : "codeVoice"
            },
            {
              "text" : " can throw an error,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the function call is wrapped in a ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "By wrapping the function call in a ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "any errors that are thrown will be propagated",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the provided ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clauses.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If no error is thrown, the ",
              "type" : "text"
            },
            {
              "code" : "eatASandwich()",
              "type" : "codeVoice"
            },
            {
              "text" : " function is called.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If an error is thrown and it matches the ",
              "type" : "text"
            },
            {
              "code" : "SandwichError.outOfCleanDishes",
              "type" : "codeVoice"
            },
            {
              "text" : " case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "then the ",
              "type" : "text"
            },
            {
              "code" : "washDishes()",
              "type" : "codeVoice"
            },
            {
              "text" : " function will be called.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If an error is thrown and it matches the ",
              "type" : "text"
            },
            {
              "code" : "SandwichError.missingIngredients",
              "type" : "codeVoice"
            },
            {
              "text" : " case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "then the ",
              "type" : "text"
            },
            {
              "code" : "buyGroceries(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function is called",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the associated ",
              "type" : "text"
            },
            {
              "code" : "[String]",
              "type" : "codeVoice"
            },
            {
              "text" : " value captured by the ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " pattern.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Throwing, catching, and propagating errors is covered in greater detail in",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Assertions-and-Preconditions",
          "level" : 2,
          "text" : "Assertions and Preconditions",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Assertions",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "preconditions",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are checks that happen at runtime.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You use them to make sure an essential condition is satisfied",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "before executing any further code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the Boolean condition in the assertion or precondition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "evaluates to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "code execution continues as usual.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the condition evaluates to ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the current state of the program is invalid;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "code execution ends, and your app is terminated.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You use assertions and preconditions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to express the assumptions you make",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the expectations you have",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "while coding,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so you can include them as part of your code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Assertions help you find mistakes and incorrect assumptions during development,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and preconditions help you detect issues in production.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In addition to verifying your expectations at runtime,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "assertions and preconditions also become a useful form of documentation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "within the code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Unlike the error conditions discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Error-Handling",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "assertions and preconditions aren’t used",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for recoverable or expected errors.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because a failed assertion or precondition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "indicates an invalid program state,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "there’s no way to catch a failed assertion.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Using assertions and preconditions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "isn’t a substitute for designing your code in such a way",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that invalid conditions are unlikely to arise.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using them to enforce valid data and state",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "causes your app to terminate more predictably",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if an invalid state occurs,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and helps make the problem easier to debug.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Stopping execution as soon as an invalid state is detected",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "also helps limit the damage caused by that invalid state.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The difference between assertions and preconditions is in when they’re checked:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Assertions are checked only in debug builds,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but preconditions are checked in both debug and production builds.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In production builds,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the condition inside an assertion isn’t evaluated.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This means you can use as many assertions as you want",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "during your development process,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without impacting performance in production.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Debugging-with-Assertions",
          "level" : 3,
          "text" : "Debugging with Assertions",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You write an assertion by calling the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from the Swift standard library.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You pass this function an expression that evaluates to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a message to display if the result of the condition is ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let age = -3",
            "assert(age >= 0, \"A person's age can't be less than zero.\")",
            "\/\/ This assertion fails because -3 isn't >= 0."
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example, code execution continues if ",
              "type" : "text"
            },
            {
              "code" : "age >= 0",
              "type" : "codeVoice"
            },
            {
              "text" : " evaluates to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that is, if the value of ",
              "type" : "text"
            },
            {
              "code" : "age",
              "type" : "codeVoice"
            },
            {
              "text" : " is nonnegative.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the value of ",
              "type" : "text"
            },
            {
              "code" : "age",
              "type" : "codeVoice"
            },
            {
              "text" : " is negative, as in the code above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "then ",
              "type" : "text"
            },
            {
              "code" : "age >= 0",
              "type" : "codeVoice"
            },
            {
              "text" : " evaluates to ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the assertion fails, terminating the application.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can omit the assertion message —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example, when it would just repeat the condition as prose.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "assert(age >= 0)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the code already checks the condition,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you use the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that an assertion has failed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if age > 10 {",
            "    print(\"You can ride the roller-coaster or the ferris wheel.\")",
            "} else if age >= 0 {",
            "    print(\"You can ride the ferris wheel.\")",
            "} else {",
            "    assertionFailure(\"A person's age can't be less than zero.\")",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Enforcing-Preconditions",
          "level" : 3,
          "text" : "Enforcing Preconditions",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use a precondition whenever a condition has the potential to be false,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but must ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "definitely",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " be true for your code to continue execution.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, use a precondition to check that a subscript isn’t out of bounds,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or to check that a function has been passed a valid value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You write a precondition by calling the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You pass this function an expression that evaluates to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a message to display if the result of the condition is ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ In the implementation of a subscript...",
            "precondition(index > 0, \"Index must be greater than zero.\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also call the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that a failure has occurred —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example, if the default case of a switch was taken,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but all valid input data should have been handled",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by one of the switch’s other cases.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "If you compile in unchecked mode (",
                  "type" : "text"
                },
                {
                  "code" : "-Ounchecked",
                  "type" : "codeVoice"
                },
                {
                  "text" : "),",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "preconditions aren’t checked.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The compiler assumes that preconditions are always true,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and it optimizes your code accordingly.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "However, the ",
                  "type" : "text"
                },
                {
                  "code" : "fatalError(_:file:line:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " function always halts execution,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "regardless of optimization settings.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "You can use the ",
                  "type" : "text"
                },
                {
                  "code" : "fatalError(_:file:line:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " function",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "during prototyping and early development",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "to create stubs for functionality that hasn’t been implemented yet,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "by writing ",
                  "type" : "text"
                },
                {
                  "code" : "fatalError(\"Unimplemented\")",
                  "type" : "codeVoice"
                },
                {
                  "text" : " as the stub implementation.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Because fatal errors are never optimized out,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "unlike assertions or preconditions,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you can be sure that execution always halts",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "if it encounters a stub implementation.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/the-swift-programming-language\/thebasics"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties",
  "kind" : "section",
  "title" : "Unowned References and Implicitly Unwrapped Optional Properties",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/automaticreferencecounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators": {
  "abstract" : [
    {
      "text" : "Perform assignment, arithmetic, comparison, and Boolean operations.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators",
  "kind" : "article",
  "role" : "article",
  "title" : "Basic Operators",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/basicoperators"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures": {
  "abstract" : [
    {
      "text" : "Model custom types that encapsulate data.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures",
  "kind" : "article",
  "role" : "article",
  "title" : "Structures and Classes",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/classesandstructures"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes": {
  "abstract" : [
    {
      "text" : "Organize data using arrays, sets, and dictionaries.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes",
  "kind" : "article",
  "role" : "article",
  "title" : "Collection Types",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/collectiontypes"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow": {
  "abstract" : [
    {
      "text" : "Structure code with branches, loops, and early exits.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
  "kind" : "article",
  "role" : "article",
  "title" : "Control Flow",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Early-Exit": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Early-Exit",
  "kind" : "section",
  "title" : "Early Exit",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow#Early-Exit"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling": {
  "abstract" : [
    {
      "text" : "Respond to and recover from errors.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling",
  "kind" : "article",
  "role" : "article",
  "title" : "Error Handling",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/errorhandling"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions": {
  "abstract" : [
    {
      "text" : "Add functionality to an existing type.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions",
  "kind" : "article",
  "role" : "article",
  "title" : "Extensions",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/extensions"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Default-Parameter-Values": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values",
  "kind" : "section",
  "title" : "Default Parameter Values",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/functions#Default-Parameter-Values"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-with-Multiple-Return-Values": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-with-Multiple-Return-Values",
  "kind" : "section",
  "title" : "Functions with Multiple Return Values",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/functions#Functions-with-Multiple-Return-Values"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#String-Interpolation": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Interpolation",
  "kind" : "section",
  "title" : "String Interpolation",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/stringsandcharacters#String-Interpolation"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Error-Handling": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Error-Handling",
  "kind" : "section",
  "title" : "Error Handling",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/thebasics#Error-Handling"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Optionals": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals",
  "kind" : "section",
  "title" : "Optionals",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/thebasics#Optionals"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Type-Safety-and-Type-Inference": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Type-Safety-and-Type-Inference",
  "kind" : "section",
  "title" : "Type Safety and Type Inference",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/thebasics#Type-Safety-and-Type-Inference"
},
"https://developer.apple.com/documentation/swift/1539374-preconditionfailure": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure",
  "title" : "preconditionFailure(_:file:line:)",
  "titleInlineContent" : [
    {
      "code" : "preconditionFailure(_:file:line:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure"
},
"https://developer.apple.com/documentation/swift/1539616-assertionfailure": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure",
  "title" : "assertionFailure(_:file:line:)",
  "titleInlineContent" : [
    {
      "code" : "assertionFailure(_:file:line:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure"
},
"https://developer.apple.com/documentation/swift/1540960-precondition": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition",
  "title" : "precondition(_:_:file:line:)",
  "titleInlineContent" : [
    {
      "code" : "precondition(_:_:file:line:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition"
},
"https://developer.apple.com/documentation/swift/1541112-assert": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert",
  "title" : "assert(_:_:file:line:)",
  "titleInlineContent" : [
    {
      "code" : "assert(_:_:file:line:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert"
}
}
}