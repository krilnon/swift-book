{
  "abstract" : [
    {
      "text" : "Access, modify, and assign values.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "The Swift Programming Language"
      }
    ],
    "title" : "Expressions"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "text" : "In Swift, there are four kinds of expressions:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "prefix expressions, infix expressions, primary expressions, and postfix expressions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Evaluating an expression returns a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "causes a side effect, or both.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Prefix and infix expressions let you",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "apply operators to smaller expressions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Primary expressions are conceptually the simplest kind of expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and they provide a way to access values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Postfix expressions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "like prefix and infix expressions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "let you build up more complex expressions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using postfixes such as function calls and member access.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each kind of expression is described in detail",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the sections below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "try-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "await-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "prefix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "infix-expressions",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "expression-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of an expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Prefix-Expressions",
          "level" : 2,
          "text" : "Prefix Expressions",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Prefix expressions",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " combine",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an optional prefix operator with an expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Prefix operators take one argument,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the expression that follows them.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For information about the behavior of these operators,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For information about the operators provided by the Swift standard library,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "prefix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "prefix-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "prefix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "in-out-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a prefix expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "In-Out-Expression",
          "level" : 3,
          "text" : "In-Out Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "in-out expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " marks a variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that’s being passed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as an in-out argument to a function call expression.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "&<#expression#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information about in-out parameters and to see an example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#In-Out-Parameters",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In-out expressions are also used",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when providing a non-pointer argument",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in a context where a pointer is needed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "in-out-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "&",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of an in-out expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Try-Operator",
          "level" : 3,
          "text" : "Try Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "try expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " consists of the ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by an expression that can throw an error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "try <#expression#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The value of a ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " expression is the value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "optional-try expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " consists of the ",
              "type" : "text"
            },
            {
              "code" : "try?",
              "type" : "codeVoice"
            },
            {
              "text" : " operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by an expression that can throw an error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "try? <#expression#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " doesn’t throw an error,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of the optional-try expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is an optional containing the value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Otherwise, the value of the optional-try expression is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "forced-try expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " consists of the ",
              "type" : "text"
            },
            {
              "code" : "try!",
              "type" : "codeVoice"
            },
            {
              "text" : " operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by an expression that can throw an error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "try! <#expression#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The value of a forced-try expression is the value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " throws an error,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a runtime error is produced.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When the expression on the left-hand side of an infix operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is marked with ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "try?",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "try!",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that operator applies to the whole infix expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "That said, you can use parentheses to be explicit about the scope of the operator’s application.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ try applies to both function calls",
            "sum = try someThrowingFunction() + anotherThrowingFunction()",
            "",
            "\/\/ try applies to both function calls",
            "sum = try (someThrowingFunction() + anotherThrowingFunction())",
            "",
            "\/\/ Error: try applies only to the first function call",
            "sum = (try someThrowingFunction()) + anotherThrowingFunction()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " expression can’t appear on the right-hand side of an infix operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "unless the infix operator is the assignment operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or the ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " expression is enclosed in parentheses.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If an expression includes both the ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " operator must appear first.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information and to see examples of how to use ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "try?",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "try!",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "try-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "try",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "try",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "?",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "try",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "!",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a try expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Await-Operator",
          "level" : 3,
          "text" : "Await Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "await expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " consists of the ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by an expression that uses the result of an asynchronous operation.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "await <#expression#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The value of an ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " expression is the value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "An expression marked with ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " is called a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "potential suspension point",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Execution of an asynchronous function can be suspended",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "at each expression that’s marked with ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In addition,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "execution of concurrent code is never suspended at any other point.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This means code between potential suspension points",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can safely update state that requires temporarily breaking invariants,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "provided that it completes the update",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "before the next potential suspension point.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " expression can appear only within an asynchronous context,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as the trailing closure passed to the ",
              "type" : "text"
            },
            {
              "code" : "async(priority:operation:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It can’t appear in the body of a ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or in an autoclosure of synchronous function type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When the expression on the left-hand side of an infix operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is marked with the ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that operator applies to the whole infix expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "That said, you can use parentheses",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to be explicit about the scope of the operator’s application.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ await applies to both function calls",
            "sum = await someAsyncFunction() + anotherAsyncFunction()",
            "",
            "\/\/ await applies to both function calls",
            "sum = await (someAsyncFunction() + anotherAsyncFunction())",
            "",
            "\/\/ Error: await applies only to the first function call",
            "sum = (await someAsyncFunction()) + anotherAsyncFunction()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " expression can’t appear on the right-hand side of an infix operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "unless the infix operator is the assignment operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or the ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " expression is enclosed in parentheses.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If an expression includes both the ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " operator must appear first.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "await-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "await",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of an await expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Infix-Expressions",
          "level" : 2,
          "text" : "Infix Expressions",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Infix expressions",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " combine",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an infix binary operator with the expression that it takes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as its left- and right-hand arguments.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<#left-hand argument#> <#operator#> <#right-hand argument#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For information about the behavior of these operators,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For information about the operators provided by the Swift standard library,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations",
              "isActive" : true,
              "overridingTitle" : "Operator Declarations",
              "overridingTitleInlineContent" : [
                {
                  "text" : "Operator Declarations",
                  "type" : "text"
                }
              ],
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "At parse time,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "an expression made up of infix operators is represented",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as a flat list.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This list is transformed into a tree",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "by applying operator precedence.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "For example, the expression ",
                  "type" : "text"
                },
                {
                  "code" : "2 + 3 * 5",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "is initially understood as a flat list of five items,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "2",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "+",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "3",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "*",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", and ",
                  "type" : "text"
                },
                {
                  "code" : "5",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This process transforms it into the tree (2 + (3 * 5)).",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "infix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "infix-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "prefix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "infix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "assignment-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "try-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "prefix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "infix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "conditional-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "try-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "prefix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "infix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type-casting-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "infix-expressions",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "infix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "infix-expressions",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of an infix expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Assignment-Operator",
          "level" : 3,
          "text" : "Assignment Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "assignment operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " sets a new value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for a given expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<#expression#> = <#value#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is set to the value obtained by evaluating the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "value",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is a tuple,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "value",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " must be a tuple",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the same number of elements.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(Nested tuples are allowed.)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Assignment is performed from each part of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "value",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the corresponding part of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "(a, _, (b, c)) = (\"test\", 9.45, (12, 3))",
            "\/\/ a is \"test\", b is 12, c is 3, and 9.45 is ignored"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The assignment operator doesn’t return any value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "assignment-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "=",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of an assignment operator",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Ternary-Conditional-Operator",
          "level" : 3,
          "text" : "Ternary Conditional Operator",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "ternary conditional operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " evaluates to one of two given values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "based on the value of a condition.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<#condition#> ? <#expression used if true#> : <#expression used if false#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "condition",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " evaluates to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the conditional operator evaluates the first expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and returns its value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Otherwise, it evaluates the second expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and returns its value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The unused expression isn’t evaluated.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For an example that uses the ternary conditional operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Ternary-Conditional-Operator",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "conditional-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "?",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a conditional operator",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Type-Casting-Operators",
          "level" : 3,
          "text" : "Type-Casting Operators",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "There are four type-casting operators:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "is",
              "type" : "codeVoice"
            },
            {
              "text" : " operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "as",
              "type" : "codeVoice"
            },
            {
              "text" : " operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "as?",
              "type" : "codeVoice"
            },
            {
              "text" : " operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the ",
              "type" : "text"
            },
            {
              "code" : "as!",
              "type" : "codeVoice"
            },
            {
              "text" : " operator.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "They have the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<#expression#> is <#type#>",
            "<#expression#> as <#type#>",
            "<#expression#> as? <#type#>",
            "<#expression#> as! <#type#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "is",
              "type" : "codeVoice"
            },
            {
              "text" : " operator checks at runtime whether the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be cast to the specified ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It returns ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " if the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " can be cast to the specified ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ";",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "otherwise, it returns ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "as",
              "type" : "codeVoice"
            },
            {
              "text" : " operator performs a cast",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when it’s known at compile time",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that the cast always succeeds,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as upcasting or bridging.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Upcasting lets you use an expression as an instance of its type’s supertype,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without using an intermediate variable.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The following approaches are equivalent:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func f(_ any: Any) { print(\"Function for Any\") }",
            "func f(_ int: Int) { print(\"Function for Int\") }",
            "let x = 10",
            "f(x)",
            "\/\/ Prints \"Function for Int\"",
            "",
            "let y: Any = x",
            "f(y)",
            "\/\/ Prints \"Function for Any\"",
            "",
            "f(x as Any)",
            "\/\/ Prints \"Function for Any\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Bridging lets you use an expression of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a Swift standard library type such as ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as its corresponding Foundation type such as ",
              "type" : "text"
            },
            {
              "code" : "NSString",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without needing to create a new instance.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more information on bridging,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective_c_apis\/working_with_foundation_types",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "as?",
              "type" : "codeVoice"
            },
            {
              "text" : " operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "performs a conditional cast of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the specified ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "as?",
              "type" : "codeVoice"
            },
            {
              "text" : " operator returns an optional of the specified ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "At runtime, if the cast succeeds,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is wrapped in an optional and returned;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "otherwise, the value returned is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If casting to the specified ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is guaranteed to fail or is guaranteed to succeed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a compile-time error is raised.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "as!",
              "type" : "codeVoice"
            },
            {
              "text" : " operator performs a forced cast of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to the specified ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "as!",
              "type" : "codeVoice"
            },
            {
              "text" : " operator returns a value of the specified ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ", not an optional type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the cast fails, a runtime error is raised.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The behavior of ",
              "type" : "text"
            },
            {
              "code" : "x as! T",
              "type" : "codeVoice"
            },
            {
              "text" : " is the same as the behavior of ",
              "type" : "text"
            },
            {
              "code" : "(x as? T)!",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information about type casting",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to see examples that use the type-casting operators,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "type-casting-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "is",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "type-casting-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "as",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "type-casting-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "as",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "?",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "type-casting-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "as",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "!",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a type-casting operator",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Primary-Expressions",
          "level" : 2,
          "text" : "Primary Expressions",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Primary expressions",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are the most basic kind of expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "They can be used as expressions on their own,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and they can be combined with other tokens",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to make prefix expressions, infix expressions, and postfix expressions.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "primary-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-argument-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "primary-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "literal-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "primary-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "self-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "primary-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "superclass-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "primary-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "primary-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "parenthesized-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "primary-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "tuple-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "primary-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "implicit-member-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "primary-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "wildcard-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "primary-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "primary-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "selector-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "primary-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-string-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a primary expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Literal-Expression",
          "level" : 3,
          "text" : "Literal Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "literal expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " consists of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "either an ordinary literal (such as a string or a number),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an array or dictionary literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a playground literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or one of the following special literals:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Type",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Value",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "#file",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "String",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "The path to the file in which it appears.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "#fileID",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "String",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "The name of the file and module in which it appears.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "#filePath",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "String",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "The path to the file in which it appears.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "#line",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "Int",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "The line number on which it appears.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "#column",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "Int",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "The column number in which it begins.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "#function",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "String",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "The name of the declaration in which it appears.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "#dsohandle",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "UnsafeRawPointer",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "The dynamic shared object (DSO) handle in use where it appears.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        },
        {
          "inlineContent" : [
            {
              "text" : "The string value of ",
              "type" : "text"
            },
            {
              "code" : "#file",
              "type" : "codeVoice"
            },
            {
              "text" : " depends on the language version,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to enable migration from the old ",
              "type" : "text"
            },
            {
              "code" : "#filePath",
              "type" : "codeVoice"
            },
            {
              "text" : " behavior",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the new ",
              "type" : "text"
            },
            {
              "code" : "#fileID",
              "type" : "codeVoice"
            },
            {
              "text" : " behavior.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Currently, ",
              "type" : "text"
            },
            {
              "code" : "#file",
              "type" : "codeVoice"
            },
            {
              "text" : " has the same value as ",
              "type" : "text"
            },
            {
              "code" : "#filePath",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In a future version of Swift,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "#file",
              "type" : "codeVoice"
            },
            {
              "text" : " will have the same value as ",
              "type" : "text"
            },
            {
              "code" : "#fileID",
              "type" : "codeVoice"
            },
            {
              "text" : " instead.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To adopt the future behavior,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "replace ",
              "type" : "text"
            },
            {
              "code" : "#file",
              "type" : "codeVoice"
            },
            {
              "text" : " with ",
              "type" : "text"
            },
            {
              "code" : "#fileID",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "#filePath",
              "type" : "codeVoice"
            },
            {
              "text" : " as appropriate.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The string value of a ",
              "type" : "text"
            },
            {
              "code" : "#fileID",
              "type" : "codeVoice"
            },
            {
              "text" : " expression has the form ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "module",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : "\/",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "file",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "where ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "file",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is the name of the file in which the expression appears",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "module",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is the name of the module that this file is part of.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The string value of a ",
              "type" : "text"
            },
            {
              "code" : "#filePath",
              "type" : "codeVoice"
            },
            {
              "text" : " expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is the full file-system path to the file in which the expression appears.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Both of these values can be changed by ",
              "type" : "text"
            },
            {
              "code" : "#sourceLocation",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "#fileID",
              "type" : "codeVoice"
            },
            {
              "text" : " doesn’t embed the full path to the source file,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "unlike ",
              "type" : "text"
            },
            {
              "code" : "#filePath",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it gives you better privacy and reduces the size of the compiled binary.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Avoid using ",
              "type" : "text"
            },
            {
              "code" : "#filePath",
              "type" : "codeVoice"
            },
            {
              "text" : " outside of tests, build scripts,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or other code that doesn’t become part of the shipping program.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "To parse a ",
                  "type" : "text"
                },
                {
                  "code" : "#fileID",
                  "type" : "codeVoice"
                },
                {
                  "text" : " expression,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "read the module name as the text before the first slash (",
                  "type" : "text"
                },
                {
                  "code" : "\/",
                  "type" : "codeVoice"
                },
                {
                  "text" : ")",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and the filename as the text after the last slash.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "In the future, the string might contain multiple slashes,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "such as ",
                  "type" : "text"
                },
                {
                  "code" : "MyModule\/some\/disambiguation\/MyFile.swift",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Inside a function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of ",
              "type" : "text"
            },
            {
              "code" : "#function",
              "type" : "codeVoice"
            },
            {
              "text" : " is the name of that function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "inside a method it’s the name of that method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "inside a property getter or setter it’s the name of that property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "inside special members like ",
              "type" : "text"
            },
            {
              "code" : "init",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "subscript",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s the name of that keyword,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and at the top level of a file it’s the name of the current module.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When used as the default value of a function or method parameter,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the special literal’s value is determined",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when the default value expression is evaluated at the call site.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func logFunctionName(string: String = #function) {",
            "    print(string)",
            "}",
            "func myFunction() {",
            "    logFunctionName() \/\/ Prints \"myFunction()\".",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "array literal",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an ordered collection of values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "[<#value 1#>, <#value 2#>, <#...#>]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The last expression in the array can be followed by an optional comma.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The value of an array literal has type ",
              "type" : "text"
            },
            {
              "code" : "[T]",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "where ",
              "type" : "text"
            },
            {
              "code" : "T",
              "type" : "codeVoice"
            },
            {
              "text" : " is the type of the expressions inside it.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If there are expressions of multiple types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "T",
              "type" : "codeVoice"
            },
            {
              "text" : " is their closest common supertype.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Empty array literals are written using an empty",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "pair of square brackets and can be used to create an empty array of a specified type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var emptyArray: [Double] = []"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "dictionary literal",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an unordered collection of key-value pairs.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "[<#key 1#>: <#value 1#>, <#key 2#>: <#value 2#>, <#...#>]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The last expression in the dictionary can be followed by an optional comma.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The value of a dictionary literal has type ",
              "type" : "text"
            },
            {
              "code" : "[Key: Value]",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "where ",
              "type" : "text"
            },
            {
              "code" : "Key",
              "type" : "codeVoice"
            },
            {
              "text" : " is the type of its key expressions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "code" : "Value",
              "type" : "codeVoice"
            },
            {
              "text" : " is the type of its value expressions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If there are expressions of multiple types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Key",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Value",
              "type" : "codeVoice"
            },
            {
              "text" : " are the closest common supertype",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for their respective values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An empty dictionary literal is written as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a colon inside a pair of brackets (",
              "type" : "text"
            },
            {
              "code" : "[:]",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to distinguish it from an empty array literal.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use an empty dictionary literal to create an empty dictionary literal",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of specified key and value types.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var emptyDictionary: [String: Double] = [:]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "playground literal",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is used by Xcode to create an interactive representation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of a color, file, or image within the program editor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Playground literals in plain text outside of Xcode",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are represented using a special literal syntax.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For information on using playground literals in Xcode,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev4c60242fc",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in Xcode Help.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "literal-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "literal-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "array-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "dictionary-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "playground-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "literal-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#file",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#fileID",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#filePath",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "literal-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#line",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#column",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#function",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#dsohandle",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "array-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "[",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "array-literal-items",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "]",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "array-literal-items",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "array-literal-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "array-literal-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "array-literal-items",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "array-literal-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "dictionary-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "[",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "dictionary-literal-items",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "]",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "[",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "]",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "dictionary-literal-items",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "dictionary-literal-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "dictionary-literal-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "dictionary-literal-items",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "dictionary-literal-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "playground-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#colorLiteral",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "red",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "green",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "blue",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "alpha",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "playground-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#fileLiteral",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "resourceName",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "playground-literal",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#imageLiteral",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "resourceName",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a literal expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Self-Expression",
          "level" : 3,
          "text" : "Self Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "self",
              "type" : "codeVoice"
            },
            {
              "text" : " expression is an explicit reference to the current type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or instance of the type in which it occurs.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following forms:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "self",
            "self.<#member name#>",
            "self[<#subscript index#>]",
            "self(<#initializer arguments#>)",
            "self.init(<#initializer arguments#>)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In an initializer, subscript, or instance method, ",
              "type" : "text"
            },
            {
              "code" : "self",
              "type" : "codeVoice"
            },
            {
              "text" : " refers to the current",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "instance of the type in which it occurs. In a type method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "self",
              "type" : "codeVoice"
            },
            {
              "text" : " refers to the current type in which it occurs.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "self",
              "type" : "codeVoice"
            },
            {
              "text" : " expression is used to specify scope when accessing members,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "providing disambiguation when there’s",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "another variable of the same name in scope,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as a function parameter.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class SomeClass {",
            "    var greeting: String",
            "    init(greeting: String) {",
            "        self.greeting = greeting",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In a mutating method of a value type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can assign a new instance of that value type to ",
              "type" : "text"
            },
            {
              "code" : "self",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Point {",
            "    var x = 0.0, y = 0.0",
            "    mutating func moveBy(x deltaX: Double, y deltaY: Double) {",
            "        self = Point(x: x + deltaX, y: y + deltaY)",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "self-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "self",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "self-method-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "self-subscript-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "self-initializer-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "self-method-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "self",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "self-subscript-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "self",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "[",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-argument-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "]",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "self-initializer-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "self",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "init",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a self expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Superclass-Expression",
          "level" : 3,
          "text" : "Superclass Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "superclass expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " lets a class",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "interact with its superclass.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has one of the following forms:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "super.<#member name#>",
            "super[<#subscript index#>]",
            "super.init(<#initializer arguments#>)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The first form is used to access a member of the superclass.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The second form is used to access the superclass’s subscript implementation.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The third form is used to access an initializer of the superclass.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Subclasses can use a superclass expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in their implementation of members, subscripting, and initializers",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to make use of the implementation in their superclass.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "superclass-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "superclass-method-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "superclass-subscript-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "superclass-initializer-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "superclass-method-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "super",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "superclass-subscript-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "super",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "[",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-argument-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "]",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "superclass-initializer-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "super",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "init",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a superclass expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Closure-Expression",
          "level" : 3,
          "text" : "Closure Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "closure expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " creates a closure,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "also known as a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "lambda",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " or an ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "anonymous function",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in other programming languages.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Like a function declaration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a closure contains statements,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and it captures constants and variables from its enclosing scope.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "{ (<#parameters#>) -> <#return type#> in",
            "   <#statements#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "parameters",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " have the same form",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as the parameters in a function declaration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Writing ",
              "type" : "text"
            },
            {
              "code" : "throws",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "async",
              "type" : "codeVoice"
            },
            {
              "text" : " in a closure expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "explicitly marks a closure as throwing or asynchronous.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "{ (<#parameters#>) async throws -> <#return type#> in",
            "   <#statements#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the body of a closure includes a try expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the closure is understood to be throwing.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Likewise, if it includes an await expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s understood to be asynchronous.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "There are several special forms",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that allow closures to be written more concisely:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A closure can omit the types",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "of its parameters, its return type, or both.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "If you omit the parameter names and both types,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "omit the ",
                      "type" : "text"
                    },
                    {
                      "code" : "in",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " keyword before the statements.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "If the omitted types can’t be inferred,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "a compile-time error is raised.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A closure may omit names for its parameters.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "Its parameters are then implicitly named",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "$",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " followed by their position:",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "$0",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "$1",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "$2",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", and so on.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A closure that consists of only a single expression",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "is understood to return the value of that expression.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "The contents of this expression are also considered",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "when performing type inference on the surrounding expression.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following closure expressions are equivalent:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "myFunction { (x: Int, y: Int) -> Int in",
            "    return x + y",
            "}",
            "",
            "myFunction { x, y in",
            "    return x + y",
            "}",
            "",
            "myFunction { return $0 + $1 }",
            "",
            "myFunction { $0 + $1 }"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For information about passing a closure as an argument to a function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Closure expressions can be used",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without being stored in a variable or constant,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as when you immediately use a closure as part of a function call.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The closure expressions passed to ",
              "type" : "text"
            },
            {
              "code" : "myFunction",
              "type" : "codeVoice"
            },
            {
              "text" : " in code above are",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "examples of this kind of immediate use.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As a result,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whether a closure expression is escaping or nonescaping depends",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "on the surrounding context of the expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A closure expression is nonescaping",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if it’s called immediately",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or passed as a nonescaping function argument.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Otherwise, the closure expression is escaping.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information about escaping closures, see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Capture-Lists",
          "level" : 4,
          "text" : "Capture Lists",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "By default, a closure expression captures",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "constants and variables from its surrounding scope",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with strong references to those values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "capture list",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to explicitly control",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "how values are captured in a closure.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A capture list is written as a comma-separated list of expressions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "surrounded by square brackets,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "before the list of parameters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you use a capture list, you must also use the ",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even if you omit the parameter names, parameter types, and return type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The entries in the capture list are initialized",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when the closure is created.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For each entry in the capture list,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a constant is initialized",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the value of the constant or variable that has the same name",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the surrounding scope.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example in the code below,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " is included in the capture list but ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : " is not,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which gives them different behavior.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var a = 0",
            "var b = 0",
            "let closure = { [a] in",
            " print(a, b)",
            "}",
            "",
            "a = 10",
            "b = 10",
            "closure()",
            "\/\/ Prints \"0 10\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "There are two different things named ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the variable in the surrounding scope",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the constant in the closure’s scope,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but only one variable named ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " in the inner scope is initialized",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the value of the ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " in the outer scope",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when the closure is created,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but their values aren’t connected in any special way.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This means that a change to the value of ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " in the outer scope",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "doesn’t affect the value of ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " in the inner scope,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "nor does a change to ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " inside the closure",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "affect the value of ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " outside the closure.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In contrast, there’s only one variable named ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : " —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : " in the outer scope —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so changes from inside or outside the closure are visible in both places.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This distinction isn’t visible",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when the captured variable’s type has reference semantics.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "there are two things named ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : " in the code below,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a variable in the outer scope and a constant in the inner scope,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but they both refer to the same object",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because of reference semantics.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class SimpleClass {",
            "    var value: Int = 0",
            "}",
            "var x = SimpleClass()",
            "var y = SimpleClass()",
            "let closure = { [x] in",
            "    print(x.value, y.value)",
            "}",
            "",
            "x.value = 10",
            "y.value = 10",
            "closure()",
            "\/\/ Prints \"10 10\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the type of the expression’s value is a class,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can mark the expression in a capture list",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with ",
              "type" : "text"
            },
            {
              "code" : "weak",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "unowned",
              "type" : "codeVoice"
            },
            {
              "text" : " to capture a weak or unowned reference",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the expression’s value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "myFunction { print(self.title) }                    \/\/ implicit strong capture",
            "myFunction { [self] in print(self.title) }          \/\/ explicit strong capture",
            "myFunction { [weak self] in print(self!.title) }    \/\/ weak capture",
            "myFunction { [unowned self] in print(self.title) }  \/\/ unowned capture"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also bind an arbitrary expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to a named value in a capture list.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The expression is evaluated when the closure is created,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the value is captured with the specified strength.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ Weak capture of \"self.parent\" as \"parent\"",
            "myFunction { [weak parent = self.parent] in print(parent!.title) }"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information and examples of closure expressions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Closure-Expressions",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more information and examples of capture lists,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-for-Closures",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "{",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "attributes",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-signature",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "statements",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "}",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-signature",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-parameter-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "async",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "throws",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "function-result",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "in",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-signature",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "in",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-parameter-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-parameter-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-parameter-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-parameter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-parameter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-parameter-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-parameter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-parameter-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type-annotation",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-parameter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-parameter-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type-annotation",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "...",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-parameter-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "[",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-list-items",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "]",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-list-items",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-list-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-list-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-list-items",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-list-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-specifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-list-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-specifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "=",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-list-item",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-specifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "self-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "capture-specifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "weak",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "unowned",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "unowned(safe)",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "unowned(unsafe)",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a closure expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Implicit-Member-Expression",
          "level" : 3,
          "text" : "Implicit Member Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "implicit member expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is an abbreviated way to access a member of a type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as an enumeration case or a type method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in a context where type inference",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can determine the implied type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            ".<#member name#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var x = MyEnumeration.someValue",
            "x = .anotherValue"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the inferred type is an optional,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can also use a member of the non-optional type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in an implicit member expression.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var someOptional: MyEnumeration? = .someValue"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Implicit member expressions can be followed by",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a postfix operator or other postfix syntax listed in",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Postfix-Expressions",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is called a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "chained implicit member expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Although it’s common for all of the chained postfix expressions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to have the same type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the only requirement is that the whole chained implicit member expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "needs to be convertible to the type implied by its context.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Specifically,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if the implied type is an optional",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use a value of the non-optional type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and if the implied type is a class type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use a value of one of its subclasses.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class SomeClass {",
            "    static var shared = SomeClass()",
            "    static var sharedSubclass = SomeSubclass()",
            "    var a = AnotherClass()",
            "}",
            "class SomeSubclass: SomeClass { }",
            "class AnotherClass {",
            "    static var s = SomeClass()",
            "    func f() -> SomeClass { return AnotherClass.s }",
            "}",
            "let x: SomeClass = .shared.a.f()",
            "let y: SomeClass? = .shared",
            "let z: SomeClass = .sharedSubclass"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the code above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the type of ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : " matches the type implied by its context exactly,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the type of ",
              "type" : "text"
            },
            {
              "code" : "y",
              "type" : "codeVoice"
            },
            {
              "text" : " is convertible from ",
              "type" : "text"
            },
            {
              "code" : "SomeClass",
              "type" : "codeVoice"
            },
            {
              "text" : " to ",
              "type" : "text"
            },
            {
              "code" : "SomeClass?",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the type of ",
              "type" : "text"
            },
            {
              "code" : "z",
              "type" : "codeVoice"
            },
            {
              "text" : " is convertible from ",
              "type" : "text"
            },
            {
              "code" : "SomeSubclass",
              "type" : "codeVoice"
            },
            {
              "text" : " to ",
              "type" : "text"
            },
            {
              "code" : "SomeClass",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "implicit-member-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "implicit-member-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a implicit member expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Parenthesized-Expression",
          "level" : 3,
          "text" : "Parenthesized Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "parenthesized expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " consists of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an expression surrounded by parentheses.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use parentheses to specify the precedence of operations",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by explicitly grouping expressions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Grouping parentheses don’t change an expression’s type —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example, the type of ",
              "type" : "text"
            },
            {
              "code" : "(1)",
              "type" : "codeVoice"
            },
            {
              "text" : " is simply ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "parenthesized-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a parenthesized expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Tuple-Expression",
          "level" : 3,
          "text" : "Tuple Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "tuple expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " consists of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a comma-separated list of expressions surrounded by parentheses.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each expression can have an optional identifier before it,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separated by a colon (",
              "type" : "text"
            },
            {
              "code" : ":",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "(<#identifier 1#>: <#expression 1#>, <#identifier 2#>: <#expression 2#>, <#...#>)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Each identifier in a tuple expression must be unique",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "within the scope of the tuple expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In a nested tuple expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "identifiers at the same level of nesting must be unique.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "(a: 10, a: 20)",
              "type" : "codeVoice"
            },
            {
              "text" : " is invalid",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because the label ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " appears twice at the same level.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, ",
              "type" : "text"
            },
            {
              "code" : "(a: 10, b: (a: 1, x: 2))",
              "type" : "codeVoice"
            },
            {
              "text" : " is valid —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "although ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " appears twice,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it appears once in the outer tuple and once in the inner tuple.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A tuple expression can contain zero expressions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or it can contain two or more expressions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A single expression inside parentheses is a parenthesized expression.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Both an empty tuple expression and an empty tuple type",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "are written ",
                  "type" : "text"
                },
                {
                  "code" : "()",
                  "type" : "codeVoice"
                },
                {
                  "text" : " in Swift.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Because ",
                  "type" : "text"
                },
                {
                  "code" : "Void",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is a type alias for ",
                  "type" : "text"
                },
                {
                  "code" : "()",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you can use it to write an empty tuple type.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "However, like all type aliases, ",
                  "type" : "text"
                },
                {
                  "code" : "Void",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is always a type —",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you can’t use it to write an empty tuple expression.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "tuple-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "tuple-element",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "tuple-element-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "tuple-element-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "tuple-element",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "tuple-element",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "tuple-element-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "tuple-element",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a tuple expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Wildcard-Expression",
          "level" : 3,
          "text" : "Wildcard Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "wildcard expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is used to explicitly ignore a value during an assignment.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, in the following assignment",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "10 is assigned to ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : " and 20 is ignored:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "(x, _) = (10, 20)",
            "\/\/ x is 10, and 20 is ignored"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "wildcard-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "_",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a wildcard expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Key-Path-Expression",
          "level" : 3,
          "text" : "Key-Path Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "key-path expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "refers to a property or subscript of a type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You use key-path expressions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in dynamic programming tasks,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as key-value observing.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "They have the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\\<#type name#>.<#path#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type name",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is the name of a concrete type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "including any generic parameters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "[Int]",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "Set<Int>",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "path",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " consists of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "property names, subscripts, optional-chaining expressions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and forced unwrapping expressions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each of these key-path components",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be repeated as many times as needed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in any order.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "At compile time, a key-path expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is replaced by an instance",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/keypath",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " class.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To access a value using a key path,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "pass the key path to the ",
              "type" : "text"
            },
            {
              "code" : "subscript(keyPath:)",
              "type" : "codeVoice"
            },
            {
              "text" : " subscript,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is available on all types.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct SomeStructure {",
            "    var someValue: Int",
            "}",
            "",
            "let s = SomeStructure(someValue: 12)",
            "let pathToProperty = \\SomeStructure.someValue",
            "",
            "let value = s[keyPath: pathToProperty]",
            "\/\/ value is 12"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type name",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " can be omitted",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in contexts where type inference",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can determine the implied type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The following code uses ",
              "type" : "text"
            },
            {
              "code" : "\\.someProperty",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "instead of ",
              "type" : "text"
            },
            {
              "code" : "\\SomeClass.someProperty",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class SomeClass: NSObject {",
            "    @objc dynamic var someProperty: Int",
            "    init(someProperty: Int) {",
            "        self.someProperty = someProperty",
            "    }",
            "}",
            "",
            "let c = SomeClass(someProperty: 10)",
            "c.observe(\\.someProperty) { object, change in",
            "    \/\/ ...",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "path",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " can refer to ",
              "type" : "text"
            },
            {
              "code" : "self",
              "type" : "codeVoice"
            },
            {
              "text" : " to create the identity key path (",
              "type" : "text"
            },
            {
              "code" : "\\.self",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The identity key path refers to a whole instance,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so you can use it to access and change all of the data stored in a variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in a single step.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var compoundValue = (a: 1, b: 2)",
            "\/\/ Equivalent to compoundValue = (a: 10, b: 20)",
            "compoundValue[keyPath: \\.self] = (a: 10, b: 20)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "path",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " can contain multiple property names,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separated by periods,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to refer to a property of a property’s value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This code uses the key path expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "\\OuterStructure.outer.someValue",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to access the ",
              "type" : "text"
            },
            {
              "code" : "someValue",
              "type" : "codeVoice"
            },
            {
              "text" : " property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of the ",
              "type" : "text"
            },
            {
              "code" : "OuterStructure",
              "type" : "codeVoice"
            },
            {
              "text" : " type’s ",
              "type" : "text"
            },
            {
              "code" : "outer",
              "type" : "codeVoice"
            },
            {
              "text" : " property:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct OuterStructure {",
            "    var outer: SomeStructure",
            "    init(someValue: Int) {",
            "        self.outer = SomeStructure(someValue: someValue)",
            "    }",
            "}",
            "",
            "let nested = OuterStructure(someValue: 24)",
            "let nestedKeyPath = \\OuterStructure.outer.someValue",
            "",
            "let nestedValue = nested[keyPath: nestedKeyPath]",
            "\/\/ nestedValue is 24"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "path",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " can include subscripts using brackets,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as long as the subscript’s parameter type conforms to the ",
              "type" : "text"
            },
            {
              "code" : "Hashable",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This example uses a subscript in a key path",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to access the second element of an array:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let greetings = [\"hello\", \"hola\", \"bonjour\", \"안녕\"]",
            "let myGreeting = greetings[keyPath: \\[String].[1]]",
            "\/\/ myGreeting is 'hola'"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The value used in a subscript can be a named value or a literal.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Values are captured in key paths using value semantics.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The following code uses the variable ",
              "type" : "text"
            },
            {
              "code" : "index",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in both a key-path expression and in a closure to access",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the third element of the ",
              "type" : "text"
            },
            {
              "code" : "greetings",
              "type" : "codeVoice"
            },
            {
              "text" : " array.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When ",
              "type" : "text"
            },
            {
              "code" : "index",
              "type" : "codeVoice"
            },
            {
              "text" : " is modified,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the key-path expression still references the third element,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "while the closure uses the new index.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var index = 2",
            "let path = \\[String].[index]",
            "let fn: ([String]) -> String = { strings in strings[index] }",
            "",
            "print(greetings[keyPath: path])",
            "\/\/ Prints \"bonjour\"",
            "print(fn(greetings))",
            "\/\/ Prints \"bonjour\"",
            "",
            "\/\/ Setting 'index' to a new value doesn't affect 'path'",
            "index += 1",
            "print(greetings[keyPath: path])",
            "\/\/ Prints \"bonjour\"",
            "",
            "\/\/ Because 'fn' closes over 'index', it uses the new value",
            "print(fn(greetings))",
            "\/\/ Prints \"안녕\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "path",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " can use optional chaining and forced unwrapping.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This code uses optional chaining in a key path",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to access a property of an optional string:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let firstGreeting: String? = greetings.first",
            "print(firstGreeting?.count as Any)",
            "\/\/ Prints \"Optional(5)\"",
            "",
            "\/\/ Do the same thing using a key path.",
            "let count = greetings[keyPath: \\[String].first?.count]",
            "print(count as Any)",
            "\/\/ Prints \"Optional(5)\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can mix and match components of key paths to access values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that are deeply nested within a type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The following code accesses different values and properties",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of a dictionary of arrays",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by using key-path expressions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that combine these components.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let interestingNumbers = [\"prime\": [2, 3, 5, 7, 11, 13, 17],",
            "                          \"triangular\": [1, 3, 6, 10, 15, 21, 28],",
            "                          \"hexagonal\": [1, 6, 15, 28, 45, 66, 91]]",
            "print(interestingNumbers[keyPath: \\[String: [Int]].[\"prime\"]] as Any)",
            "\/\/ Prints \"Optional([2, 3, 5, 7, 11, 13, 17])\"",
            "print(interestingNumbers[keyPath: \\[String: [Int]].[\"prime\"]![0]])",
            "\/\/ Prints \"2\"",
            "print(interestingNumbers[keyPath: \\[String: [Int]].[\"hexagonal\"]!.count])",
            "\/\/ Prints \"7\"",
            "print(interestingNumbers[keyPath: \\[String: [Int]].[\"hexagonal\"]!.count.bitWidth])",
            "\/\/ Prints \"64\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use a key path expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in contexts where you would normally provide a function or closure.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Specifically,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use a key path expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whose root type is ",
              "type" : "text"
            },
            {
              "code" : "SomeType",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and whose path produces a value of type ",
              "type" : "text"
            },
            {
              "code" : "Value",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "instead of a function or closure of type ",
              "type" : "text"
            },
            {
              "code" : "(SomeType) -> Value",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Task {",
            "    var description: String",
            "    var completed: Bool",
            "}",
            "var toDoList = [",
            "    Task(description: \"Practice ping-pong.\", completed: false),",
            "    Task(description: \"Buy a pirate costume.\", completed: true),",
            "    Task(description: \"Visit Boston in the Fall.\", completed: false),",
            "]",
            "",
            "\/\/ Both approaches below are equivalent.",
            "let descriptions = toDoList.filter(\\.completed).map(\\.description)",
            "let descriptions2 = toDoList.filter { $0.completed }.map { $0.description }"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Any side effects of a key path expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are evaluated only at the point where the expression is evaluated.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if you make a function call inside a subscript in a key path expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the function is called only once as part of evaluating the expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "not every time the key path is used.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func makeIndex() -> Int {",
            "    print(\"Made an index\")",
            "    return 0",
            "}",
            "\/\/ The line below calls makeIndex().",
            "let taskKeyPath = \\[Task][makeIndex()]",
            "\/\/ Prints \"Made an index\"",
            "",
            "\/\/ Using taskKeyPath doesn't call makeIndex() again.",
            "let someTask = toDoList[keyPath: taskKeyPath]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information about using key paths",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in code that interacts with Objective-C APIs,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/using_objective_c_runtime_features_in_swift",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For information about key-value coding and key-value observing,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueCoding\/index.html#\/\/apple_ref\/doc\/uid\/10000107i",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueObserving\/KeyValueObserving.html#\/\/apple_ref\/doc\/uid\/10000177i",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "\\",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-components",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-components",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-component",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-component",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-components",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-component",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-postfixes",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-postfixes",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-postfixes",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-postfix",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-postfixes",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-postfix",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "?",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "!",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "self",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "[",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-argument-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "]",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a key-path expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Selector-Expression",
          "level" : 3,
          "text" : "Selector Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A selector expression lets you access the selector",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "used to refer to a method or to a property’s",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "getter or setter in Objective-C.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "#selector(<#method name#>)",
            "#selector(getter: <#property name#>)",
            "#selector(setter: <#property name#>)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "method name",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "property name",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " must be a reference to a method or a property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that’s available in the Objective-C runtime.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The value of a selector expression is an instance of the ",
              "type" : "text"
            },
            {
              "code" : "Selector",
              "type" : "codeVoice"
            },
            {
              "text" : " type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class SomeClass: NSObject {",
            "    @objc let property: String",
            "",
            "    @objc(doSomethingWithInt:)",
            "    func doSomething(_ x: Int) { }",
            "",
            "    init(property: String) {",
            "        self.property = property",
            "    }",
            "}",
            "let selectorForMethod = #selector(SomeClass.doSomething(_:))",
            "let selectorForPropertyGetter = #selector(getter: SomeClass.property)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When creating a selector for a property’s getter,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "property name",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " can be a reference to a variable or constant property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In contrast, when creating a selector for a property’s setter,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "property name",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " must be a reference to a variable property only.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "method name",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " can contain parentheses for grouping,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as well the ",
              "type" : "text"
            },
            {
              "code" : "as",
              "type" : "codeVoice"
            },
            {
              "text" : " operator to disambiguate between methods that share a name",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but have different type signatures.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "extension SomeClass {",
            "    @objc(doSomethingWithString:)",
            "    func doSomething(_ x: String) { }",
            "}",
            "let anotherSelector = #selector(SomeClass.doSomething(_:) as (SomeClass) -> (String) -> Void)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because a selector is created at compile time, not at runtime,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler can check that a method or property exists",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and that they’re exposed to the Objective-C runtime.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Although the ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "method name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " and the ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "property name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " are expressions,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "they’re never evaluated.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information about using selectors",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in Swift code that interacts with Objective-C APIs,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/using_objective_c_runtime_features_in_swift",
              "isActive" : true,
              "overridingTitle" : "Using Objective-C Runtime Features in Swift",
              "overridingTitleInlineContent" : [
                {
                  "text" : "Using Objective-C Runtime Features in Swift",
                  "type" : "text"
                }
              ],
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "selector-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#selector",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "selector-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#selector",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "getter:",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "selector-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#selector",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "setter:",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a selector expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Key-Path-String-Expression",
          "level" : 3,
          "text" : "Key-Path String Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A key-path string expression lets you access the string",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "used to refer to a property in Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for use in key-value coding and key-value observing APIs.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "#keyPath(<#property name#>)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "property name",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " must be a reference to a property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that’s available in the Objective-C runtime.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "At compile time, the key-path string expression is replaced by a string literal.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class SomeClass: NSObject {",
            "    @objc var someProperty: Int",
            "    init(someProperty: Int) {",
            "       self.someProperty = someProperty",
            "    }",
            "}",
            "",
            "let c = SomeClass(someProperty: 12)",
            "let keyPath = #keyPath(SomeClass.someProperty)",
            "",
            "if let value = c.value(forKey: keyPath) {",
            "    print(value)",
            "}",
            "\/\/ Prints \"12\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you use a key-path string expression within a class,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can refer to a property of that class",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by writing just the property name, without the class name.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "extension SomeClass {",
            "    func getSomeKeyPath() -> String {",
            "        return #keyPath(someProperty)",
            "    }",
            "}",
            "print(keyPath == c.getSomeKeyPath())",
            "\/\/ Prints \"true\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because the key path string is created at compile time, not at runtime,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler can check that the property exists",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and that the property is exposed to the Objective-C runtime.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information about using key paths",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in Swift code that interacts with Objective-C APIs,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/using_objective_c_runtime_features_in_swift",
              "isActive" : true,
              "overridingTitle" : "Using Objective-C Runtime Features in Swift",
              "overridingTitleInlineContent" : [
                {
                  "text" : "Using Objective-C Runtime Features in Swift",
                  "type" : "text"
                }
              ],
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For information about key-value coding and key-value observing,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueCoding\/index.html#\/\/apple_ref\/doc\/uid\/10000107i",
              "isActive" : true,
              "overridingTitle" : "Key-Value Coding Programming Guide",
              "overridingTitleInlineContent" : [
                {
                  "text" : "Key-Value Coding Programming Guide",
                  "type" : "text"
                }
              ],
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueObserving\/KeyValueObserving.html#\/\/apple_ref\/doc\/uid\/10000177i",
              "isActive" : true,
              "overridingTitle" : "Key-Value Observing Programming Guide",
              "overridingTitleInlineContent" : [
                {
                  "text" : "Key-Value Observing Programming Guide",
                  "type" : "text"
                }
              ],
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Although the ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "property name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " is an expression, it’s never evaluated.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "key-path-string-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "#keyPath",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a key-path string expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Postfix-Expressions",
          "level" : 2,
          "text" : "Postfix Expressions",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Postfix expressions",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " are formed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by applying a postfix operator or other postfix syntax",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to an expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Syntactically, every primary expression is also a postfix expression.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For information about the behavior of these operators,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For information about the operators provided by the Swift standard library,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations",
              "isActive" : true,
              "overridingTitle" : "Operator Declarations",
              "overridingTitleInlineContent" : [
                {
                  "text" : "Operator Declarations",
                  "type" : "text"
                }
              ],
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "primary-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "initializer-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "explicit-member-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-self-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "subscript-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "forced-value-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "optional-chaining-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a postfix expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Function-Call-Expression",
          "level" : 3,
          "text" : "Function Call Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "function call expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " consists of a function name",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by a comma-separated list of the function’s arguments in parentheses.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Function call expressions have the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<#function name#>(<#argument value 1#>, <#argument value 2#>)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "function name",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " can be any expression whose value is of a function type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the function definition includes names for its parameters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the function call must include names before its argument values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separated by a colon (",
              "type" : "text"
            },
            {
              "code" : ":",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This kind of function call expression has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<#function name#>(<#argument name 1#>: <#argument value 1#>, <#argument name 2#>: <#argument value 2#>)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A function call expression can include trailing closures",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the form of closure expressions immediately after the closing parenthesis.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The trailing closures are understood as arguments to the function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "added after the last parenthesized argument.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The first closure expression is unlabeled;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "any additional closure expressions are preceded by their argument labels.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example below shows the equivalent version of function calls",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that do and don’t use trailing closure syntax:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ someFunction takes an integer and a closure as its arguments",
            "someFunction(x: x, f: { $0 == 13 })",
            "someFunction(x: x) { $0 == 13 }",
            "",
            "\/\/ anotherFunction takes an integer and two closures as its arguments",
            "anotherFunction(x: x, f: { $0 == 13 }, g: { print(99) })",
            "anotherFunction(x: x) { $0 == 13 } g: { print(99) }"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the trailing closure is the function’s only argument,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can omit the parentheses.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ someMethod takes a closure as its only argument",
            "myData.someMethod() { $0 == 13 }",
            "myData.someMethod { $0 == 13 }"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "To include the trailing closures in the arguments,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler examines the function’s parameters from left to right as follows:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Trailing Closure",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Parameter",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Action",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Labeled",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Labeled",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "If the labels are the same, the closure matches the parameter; otherwise, the parameter is skipped.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Labeled",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Unlabeled",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "The parameter is skipped.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Unlabeled",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Labeled or unlabeled",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "If the parameter structurally resembles a function type, as defined below, the closure matches the parameter; otherwise, the parameter is skipped.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        },
        {
          "inlineContent" : [
            {
              "text" : "The trailing closure is passed as the argument for the parameter that it matches.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Parameters that were skipped during the scanning process",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "don’t have an argument passed to them —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example, they can use a default parameter.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "After finding a match, scanning continues",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the next trailing closure and the next parameter.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "At the end of the matching process,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "all trailing closures must have a match.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A parameter ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "structurally resembles",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " a function type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if the parameter isn’t an in-out parameter,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the parameter is one of the following:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A parameter whose type is a function type,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "like ",
                      "type" : "text"
                    },
                    {
                      "code" : "(Bool) -> Int",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "An autoclosure parameter",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "whose wrapped expression’s type is a function type,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "like ",
                      "type" : "text"
                    },
                    {
                      "code" : "@autoclosure () -> ((Bool) -> Int)",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A variadic parameter",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "whose array element type is a function type,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "like ",
                      "type" : "text"
                    },
                    {
                      "code" : "((Bool) -> Int)...",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A parameter whose type is wrapped in one or more layers of optional,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "like ",
                      "type" : "text"
                    },
                    {
                      "code" : "Optional<(Bool) -> Int>",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A parameter whose type combines these allowed types,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "like ",
                      "type" : "text"
                    },
                    {
                      "code" : "(Optional<(Bool) -> Int>)...",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "When a trailing closure is matched to a parameter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whose type structurally resembles a function type, but isn’t a function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the closure is wrapped as needed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, if the parameter’s type is an optional type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the closure is wrapped in ",
              "type" : "text"
            },
            {
              "code" : "Optional",
              "type" : "codeVoice"
            },
            {
              "text" : " automatically.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To ease migration of code from versions of Swift prior to 5.3 —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which performed this matching from right to left —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler checks both the left-to-right and right-to-left orderings.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the scan directions produce different results,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the old right-to-left ordering is used",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the compiler generates a warning.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A future version of Swift will always use the left-to-right ordering.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "typealias Callback = (Int) -> Int",
            "func someFunction(firstClosure: Callback? = nil,",
            "                secondClosure: Callback? = nil) {",
            "    let first = firstClosure?(10)",
            "    let second = secondClosure?(20)",
            "    print(first ?? \"-\", second ?? \"-\")",
            "}",
            "",
            "someFunction()  \/\/ Prints \"- -\"",
            "someFunction { return $0 + 100 }  \/\/ Ambiguous",
            "someFunction { return $0 } secondClosure: { return $0 }  \/\/ Prints \"10 20\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the function call marked “Ambiguous”",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "prints “- 120” and produces a compiler warning on Swift 5.3.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A future version of Swift will print “110 -”.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A class, structure, or enumeration type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can enable syntactic sugar for function call syntax",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by declaring one of several methods,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Implicit-Conversion-to-a-Pointer-Type",
          "level" : 4,
          "text" : "Implicit Conversion to a Pointer Type",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In a function call expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if the argument and parameter have a different type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler tries to make their types match",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by applying one of the implicit conversions in the following list:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "inout SomeType",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " can become",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "UnsafePointer<SomeType>",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " or ",
                      "type" : "text"
                    },
                    {
                      "code" : "UnsafeMutablePointer<SomeType>",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "inout Array<SomeType>",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " can become",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "UnsafePointer<SomeType>",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " or ",
                      "type" : "text"
                    },
                    {
                      "code" : "UnsafeMutablePointer<SomeType>",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Array<SomeType>",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " can become ",
                      "type" : "text"
                    },
                    {
                      "code" : "UnsafePointer<SomeType>",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "String",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " can become ",
                      "type" : "text"
                    },
                    {
                      "code" : "UnsafePointer<CChar>",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following two function calls are equivalent:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func unsafeFunction(pointer: UnsafePointer<Int>) {",
            "    \/\/ ...",
            "}",
            "var myNumber = 1234",
            "",
            "unsafeFunction(pointer: &myNumber)",
            "withUnsafePointer(to: myNumber) { unsafeFunction(pointer: $0) }"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A pointer that’s created by these implicit conversions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is valid only for the duration of the function call.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To avoid undefined behavior,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "ensure that your code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "never persists the pointer after the function call ends.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "When implicitly converting an array to an unsafe pointer,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Swift ensures that the array’s storage is contiguous",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "by converting or copying the array as needed.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "For example, you can use this syntax",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "with an array that was bridged to ",
                  "type" : "text"
                },
                {
                  "code" : "Array",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "from an ",
                  "type" : "text"
                },
                {
                  "code" : "NSArray",
                  "type" : "codeVoice"
                },
                {
                  "text" : " subclass that makes no API contract about its storage.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If you need to guarantee that the array’s storage is already contiguous,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "so the implicit conversion never needs to do this work,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "use ",
                  "type" : "text"
                },
                {
                  "code" : "ContiguousArray",
                  "type" : "codeVoice"
                },
                {
                  "text" : " instead of ",
                  "type" : "text"
                },
                {
                  "code" : "Array",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Using ",
              "type" : "text"
            },
            {
              "code" : "&",
              "type" : "codeVoice"
            },
            {
              "text" : " instead of an explicit function like ",
              "type" : "text"
            },
            {
              "code" : "withUnsafePointer(to:)",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can help make calls to low-level C functions more readable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "especially when the function takes several pointer arguments.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, when calling functions from other Swift code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "avoid using ",
              "type" : "text"
            },
            {
              "code" : "&",
              "type" : "codeVoice"
            },
            {
              "text" : " instead of using the unsafe APIs explicitly.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-argument-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-argument-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "trailing-closures",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-argument-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-argument-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-argument-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-argument",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-argument",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-argument-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-argument",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-argument",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "trailing-closures",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "labeled-trailing-closures",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "labeled-trailing-closures",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "labeled-trailing-closure",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "labeled-trailing-closures",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "labeled-trailing-closure",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "closure-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a function call expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Initializer-Expression",
          "level" : 3,
          "text" : "Initializer Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "initializer expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " provides access",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to a type’s initializer.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<#expression#>.init(<#initializer arguments#>)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You use the initializer expression in a function call expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to initialize a new instance of a type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You also use an initializer expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to delegate to the initializer of a superclass.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class SomeSubClass: SomeSuperClass {",
            "    override init() {",
            "        \/\/ subclass initialization goes here",
            "        super.init()",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Like a function, an initializer can be used as a value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ Type annotation is required because String has multiple initializers.",
            "let initializer: (Int) -> String = String.init",
            "let oneTwoThree = [1, 2, 3].map(initializer).reduce(\"\", +)",
            "print(oneTwoThree)",
            "\/\/ Prints \"123\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you specify a type by name,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can access the type’s initializer without using an initializer expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In all other cases, you must use an initializer expression.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let s1 = SomeType.init(data: 3)  \/\/ Valid",
            "let s2 = SomeType(data: 1)       \/\/ Also valid",
            "",
            "let s3 = type(of: someValue).init(data: 7)  \/\/ Valid",
            "let s4 = type(of: someValue)(data: 5)       \/\/ Error"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "initializer-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "init",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "initializer-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "init",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "argument-names",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of an initializer expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Explicit-Member-Expression",
          "level" : 3,
          "text" : "Explicit Member Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "explicit member expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " allows access",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the members of a named type, a tuple, or a module.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It consists of a period (",
              "type" : "text"
            },
            {
              "code" : ".",
              "type" : "codeVoice"
            },
            {
              "text" : ") between the item",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the identifier of its member.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<#expression#>.<#member name#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The members of a named type are named",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as part of the type’s declaration or extension.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class SomeClass {",
            "    var someProperty = 42",
            "}",
            "let c = SomeClass()",
            "let y = c.someProperty  \/\/ Member access"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The members of a tuple",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are implicitly named using integers in the order they appear,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "starting from zero.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var t = (10, 20, 30)",
            "t.0 = t.1",
            "\/\/ Now t is (20, 20, 30)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The members of a module access",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the top-level declarations of that module.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Types declared with the ",
              "type" : "text"
            },
            {
              "code" : "dynamicMemberLookup",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "include members that are looked up at runtime,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To distinguish between methods or initializers",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whose names differ only by the names of their arguments,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "include the argument names in parentheses,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with each argument name followed by a colon (",
              "type" : "text"
            },
            {
              "code" : ":",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Write an underscore (",
              "type" : "text"
            },
            {
              "code" : "_",
              "type" : "codeVoice"
            },
            {
              "text" : ") for an argument with no name.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To distinguish between overloaded methods,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "use a type annotation.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class SomeClass {",
            "    func someMethod(x: Int, y: Int) {}",
            "    func someMethod(x: Int, z: Int) {}",
            "    func overloadedMethod(x: Int, y: Int) {}",
            "    func overloadedMethod(x: Int, y: Bool) {}",
            "}",
            "let instance = SomeClass()",
            "",
            "let a = instance.someMethod              \/\/ Ambiguous",
            "let b = instance.someMethod(x:y:)        \/\/ Unambiguous",
            "",
            "let d = instance.overloadedMethod        \/\/ Ambiguous",
            "let d = instance.overloadedMethod(x:y:)  \/\/ Still ambiguous",
            "let d: (Int, Bool) -> Void  = instance.overloadedMethod(x:y:)  \/\/ Unambiguous"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If a period appears at the beginning of a line,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s understood as part of an explicit member expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "not as an implicit member expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, the following listing shows chained method calls",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "split over several lines:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let x = [10, 3, 20, 15, 4]",
            "    .sorted()",
            "    .filter { $0 > 5 }",
            "    .map { $0 * 100 }"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can combine this multiline chained syntax",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with compiler control statements",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to control when each method is called.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the following code uses a different filtering rule on iOS:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let numbers = [10, 20, 33, 43, 50]",
            "#if os(iOS)",
            "    .filter { $0 < 40 }",
            "#else",
            "    .filter { $0 > 25 }",
            "#endif"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Between ",
              "type" : "text"
            },
            {
              "code" : "#if",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "#endif",
              "type" : "codeVoice"
            },
            {
              "text" : ", and other compilation directives,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the conditional compilation block can contain",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an implicit member expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by zero or more postfixes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to form a postfix expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It can also contain",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "another conditional compilation block,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or a combination of these expressions and blocks.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use this syntax anywhere that you can write",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an explicit member expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "not just in top-level code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the conditional compilation block,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the branch for the ",
              "type" : "text"
            },
            {
              "code" : "#if",
              "type" : "codeVoice"
            },
            {
              "text" : " compilation directive",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must contain at least one expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The other branches can be empty.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "explicit-member-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "decimal-digits",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "explicit-member-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-argument-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "explicit-member-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "argument-names",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "explicit-member-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "conditional-compilation-block",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "argument-names",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "argument-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "argument-names",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "argument-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of an explicit member expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Postfix-Self-Expression",
          "level" : 3,
          "text" : "Postfix Self Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A postfix ",
              "type" : "text"
            },
            {
              "code" : "self",
              "type" : "codeVoice"
            },
            {
              "text" : " expression consists of an expression or the name of a type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "immediately followed by ",
              "type" : "text"
            },
            {
              "code" : ".self",
              "type" : "codeVoice"
            },
            {
              "text" : ". It has the following forms:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<#expression#>.self",
            "<#type#>.self"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The first form evaluates to the value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, ",
              "type" : "text"
            },
            {
              "code" : "x.self",
              "type" : "codeVoice"
            },
            {
              "text" : " evaluates to ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The second form evaluates to the value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ". Use this form",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to access a type as a value. For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because ",
              "type" : "text"
            },
            {
              "code" : "SomeClass.self",
              "type" : "codeVoice"
            },
            {
              "text" : " evaluates to the ",
              "type" : "text"
            },
            {
              "code" : "SomeClass",
              "type" : "codeVoice"
            },
            {
              "text" : " type itself,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can pass it to a function or method that accepts a type-level argument.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-self-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ".",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "self",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a postfix self expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Subscript-Expression",
          "level" : 3,
          "text" : "Subscript Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "subscript expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " provides subscript access",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using the getter and setter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of the corresponding subscript declaration.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<#expression#>[<#index expressions#>]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "To evaluate the value of a subscript expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the subscript getter for the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : "’s type is called",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "index expressions",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " passed as the subscript parameters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To set its value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the subscript setter is called in the same way.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For information about subscript declarations,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Subscript-Declaration",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "subscript-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "[",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "function-call-argument-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "]",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a subscript expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Forced-Value-Expression",
          "level" : 3,
          "text" : "Forced-Value Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "forced-value expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " unwraps an optional value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that you are certain isn’t ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<#expression#>!"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the value of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " isn’t ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the optional value is unwrapped",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and returned with the corresponding non-optional type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Otherwise, a runtime error is raised.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The unwrapped value of a forced-value expression can be modified,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "either by mutating the value itself,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or by assigning to one of the value’s members.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var x: Int? = 0",
            "x! += 1",
            "\/\/ x is now 1",
            "",
            "var someDictionary = [\"a\": [1, 2, 3], \"b\": [10, 20]]",
            "someDictionary[\"a\"]![0] = 100",
            "\/\/ someDictionary is now [\"a\": [100, 2, 3], \"b\": [10, 20]]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "forced-value-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "!",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a forced-value expression",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Optional-Chaining-Expression",
          "level" : 3,
          "text" : "Optional-Chaining Expression",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "optional-chaining expression",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " provides a simplified syntax",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for using optional values in postfix expressions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<#expression#>?"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The postfix ",
              "type" : "text"
            },
            {
              "code" : "?",
              "type" : "codeVoice"
            },
            {
              "text" : " operator makes an optional-chaining expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from an expression without changing the expression’s value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Optional-chaining expressions must appear within a postfix expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and they cause the postfix expression to be evaluated in a special way.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the value of the optional-chaining expression is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "all of the other operations in the postfix expression are ignored",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the entire postfix expression evaluates to ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the value of the optional-chaining expression isn’t ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of the optional-chaining expression is unwrapped",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and used to evaluate the rest of the postfix expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In either case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of the postfix expression is still of an optional type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If a postfix expression that contains an optional-chaining expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is nested inside other postfix expressions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "only the outermost expression returns an optional type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the example below,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when ",
              "type" : "text"
            },
            {
              "code" : "c",
              "type" : "codeVoice"
            },
            {
              "text" : " isn’t ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "its value is unwrapped and used to evaluate ",
              "type" : "text"
            },
            {
              "code" : ".property",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of which is used to evaluate ",
              "type" : "text"
            },
            {
              "code" : ".performAction()",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The entire expression ",
              "type" : "text"
            },
            {
              "code" : "c?.property.performAction()",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "has a value of an optional type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var c: SomeClass?",
            "var result: Bool? = c?.property.performAction()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following example shows the behavior",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of the example above",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without using optional chaining.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var result: Bool?",
            "if let unwrappedC = c {",
            "    result = unwrappedC.property.performAction()",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The unwrapped value of an optional-chaining expression can be modified,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "either by mutating the value itself,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or by assigning to one of the value’s members.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the value of the optional-chaining expression is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the expression on the right-hand side of the assignment operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "isn’t evaluated.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func someFunctionWithSideEffects() -> Int {",
            "    return 42  \/\/ No actual side effects.",
            "}",
            "var someDictionary = [\"a\": [1, 2, 3], \"b\": [10, 20]]",
            "",
            "someDictionary[\"not here\"]?[0] = someFunctionWithSideEffects()",
            "\/\/ someFunctionWithSideEffects isn't evaluated",
            "\/\/ someDictionary is still [\"a\": [1, 2, 3], \"b\": [10, 20]]",
            "",
            "someDictionary[\"a\"]?[0] = someFunctionWithSideEffects()",
            "\/\/ someFunctionWithSideEffects is evaluated and returns 42",
            "\/\/ someDictionary is now [\"a\": [42, 2, 3], \"b\": [10, 20]]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "optional-chaining-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "postfix-expression",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "?",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of an optional-chaining expression",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/the-swift-programming-language\/expressions"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators": {
  "abstract" : [
    {
      "text" : "Define custom operators, perform bitwise operations, and use builder syntax.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators",
  "kind" : "article",
  "role" : "article",
  "title" : "Advanced Operators",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/advancedoperators"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes": {
  "abstract" : [
    {
      "text" : "Add information to declarations and types.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes",
  "kind" : "article",
  "role" : "article",
  "title" : "Attributes",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/attributes"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-for-Closures": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-for-Closures",
  "kind" : "section",
  "title" : "Resolving Strong Reference Cycles for Closures",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/automaticreferencecounting#Resolving-Strong-Reference-Cycles-for-Closures"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators": {
  "abstract" : [
    {
      "text" : "Perform assignment, arithmetic, comparison, and Boolean operations.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators",
  "kind" : "article",
  "role" : "article",
  "title" : "Basic Operators",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/basicoperators"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators#Ternary-Conditional-Operator": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Ternary-Conditional-Operator",
  "kind" : "section",
  "title" : "Ternary Conditional Operator",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/basicoperators#Ternary-Conditional-Operator"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Closure-Expressions": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Closure-Expressions",
  "kind" : "section",
  "title" : "Closure Expressions",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/closures#Closure-Expressions"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Escaping-Closures": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures",
  "kind" : "section",
  "title" : "Escaping Closures",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/closures#Escaping-Closures"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Function-Declaration": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration",
  "kind" : "section",
  "title" : "Function Declaration",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/declarations#Function-Declaration"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Methods-with-Special-Names": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names",
  "kind" : "section",
  "title" : "Methods with Special Names",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/declarations#Methods-with-Special-Names"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Subscript-Declaration": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Subscript-Declaration",
  "kind" : "section",
  "title" : "Protocol Subscript Declaration",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/declarations#Protocol-Subscript-Declaration"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling": {
  "abstract" : [
    {
      "text" : "Respond to and recover from errors.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling",
  "kind" : "article",
  "role" : "article",
  "title" : "Error Handling",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/errorhandling"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Function-Call-Expression": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression",
  "kind" : "section",
  "title" : "Function Call Expression",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/expressions#Function-Call-Expression"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Conversion-to-a-Pointer-Type": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type",
  "kind" : "section",
  "title" : "Implicit Conversion to a Pointer Type",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/expressions#Implicit-Conversion-to-a-Pointer-Type"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Postfix-Expressions": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Postfix-Expressions",
  "kind" : "section",
  "title" : "Postfix Expressions",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/expressions#Postfix-Expressions"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#In-Out-Parameters": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#In-Out-Parameters",
  "kind" : "section",
  "title" : "In-Out Parameters",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/functions#In-Out-Parameters"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Line-Control-Statement": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement",
  "kind" : "section",
  "title" : "Line Control Statement",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/statements#Line-Control-Statement"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting": {
  "abstract" : [
    {
      "text" : "Determine a value’s runtime type and give it more specific type information.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting",
  "kind" : "article",
  "role" : "article",
  "title" : "Type Casting",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/typecasting"
},
"https://developer.apple.com/documentation/swift/imported_c_and_objective_c_apis/working_with_foundation_types": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective_c_apis\/working_with_foundation_types",
  "title" : "Working with Foundation Types",
  "titleInlineContent" : [
    {
      "text" : "Working with Foundation Types",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective_c_apis\/working_with_foundation_types"
},
"https://developer.apple.com/documentation/swift/keypath": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/keypath",
  "title" : "KeyPath",
  "titleInlineContent" : [
    {
      "code" : "KeyPath",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/keypath"
},
"https://developer.apple.com/documentation/swift/operator_declarations": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations",
  "title" : "Operator Declarations",
  "titleInlineContent" : [
    {
      "text" : "Operator Declarations",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations"
},
"https://developer.apple.com/documentation/swift/using_objective_c_runtime_features_in_swift": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/using_objective_c_runtime_features_in_swift",
  "title" : "Using Objective-C Runtime Features in Swift",
  "titleInlineContent" : [
    {
      "text" : "Using Objective-C Runtime Features in Swift",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/using_objective_c_runtime_features_in_swift"
},
"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107i": {
  "identifier" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueCoding\/index.html#\/\/apple_ref\/doc\/uid\/10000107i",
  "title" : "Key-Value Coding Programming Guide",
  "titleInlineContent" : [
    {
      "text" : "Key-Value Coding Programming Guide",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueCoding\/index.html#\/\/apple_ref\/doc\/uid\/10000107i"
},
"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177i": {
  "identifier" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueObserving\/KeyValueObserving.html#\/\/apple_ref\/doc\/uid\/10000177i",
  "title" : "Key-Value Observing Programming Guide",
  "titleInlineContent" : [
    {
      "text" : "Key-Value Observing Programming Guide",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueObserving\/KeyValueObserving.html#\/\/apple_ref\/doc\/uid\/10000177i"
},
"https://help.apple.com/xcode/mac/current/#/dev4c60242fc": {
  "identifier" : "https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev4c60242fc",
  "title" : "Add a color, file, or image literal",
  "titleInlineContent" : [
    {
      "text" : "Add a color, file, or image literal",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev4c60242fc"
}
}
}