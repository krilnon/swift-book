{
  "abstract" : [
    {
      "text" : "Define and call functions, label their arguments, and use their return values.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions"
  },
  "kind" : "article",
  "metadata" : {
    "title" : "Functions"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Functions",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " are self-contained chunks of code that perform a specific task.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You give a function a name that identifies what it does,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and this name is used to “call” the function to perform its task when needed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift’s unified function syntax is flexible enough to express anything from",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a simple C-style function with no parameter names",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to a complex Objective-C-style method",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with names and argument labels for each parameter.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Parameters can provide default values to simplify function calls",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can be passed as in-out parameters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which modify a passed variable once the function has completed its execution.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Every function in Swift has a type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "consisting of the function’s parameter types and return type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use this type like any other type in Swift,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which makes it easy to pass functions as parameters to other functions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to return functions from functions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Functions can also be written within other functions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to encapsulate useful functionality within a nested function scope.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Defining-and-Calling-Functions",
          "level" : 2,
          "text" : "Defining and Calling Functions",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you define a function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can optionally define one or more named, typed values that the function takes as input,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "known as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "parameters",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can also optionally define",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a type of value that the function will pass back as output when it’s done,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "known as its ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "return type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Every function has a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "function name",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which describes the task that the function performs.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To use a function, you “call” that function with its name",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and pass it input values (known as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "arguments",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that match the types of the function’s parameters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A function’s arguments must always be provided in the same order",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as the function’s parameter list.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The function in the example below is called ",
              "type" : "text"
            },
            {
              "code" : "greet(person:)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because that’s what it does —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it takes a person’s name as input and returns a greeting for that person.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To accomplish this, you define one input parameter —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value called ",
              "type" : "text"
            },
            {
              "code" : "person",
              "type" : "codeVoice"
            },
            {
              "text" : " —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a return type of ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which will contain a greeting for that person:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func greet(person: String) -> String {",
            "    let greeting = \"Hello, \" + person + \"!\"",
            "    return greeting",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "All of this information is rolled up into the function’s ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "definition",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is prefixed with the ",
              "type" : "text"
            },
            {
              "code" : "func",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You indicate the function’s return type with the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "return arrow",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "->",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(a hyphen followed by a right angle bracket),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is followed by the name of the type to return.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The definition describes what the function does,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "what it expects to receive,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and what it returns when it’s done.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The definition makes it easy for the function to be called unambiguously",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from elsewhere in your code:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(greet(person: \"Anna\"))",
            "\/\/ Prints \"Hello, Anna!\"",
            "print(greet(person: \"Brian\"))",
            "\/\/ Prints \"Hello, Brian!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You call the ",
              "type" : "text"
            },
            {
              "code" : "greet(person:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by passing it a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value after the ",
              "type" : "text"
            },
            {
              "code" : "person",
              "type" : "codeVoice"
            },
            {
              "text" : " argument label,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as ",
              "type" : "text"
            },
            {
              "code" : "greet(person: \"Anna\")",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because the function returns a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "greet(person:)",
              "type" : "codeVoice"
            },
            {
              "text" : " can be wrapped in a call to the ",
              "type" : "text"
            },
            {
              "code" : "print(_:separator:terminator:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to print that string and see its return value, as shown above.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The ",
                  "type" : "text"
                },
                {
                  "code" : "print(_:separator:terminator:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " function",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "doesn’t have a label for its first argument,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and its other arguments are optional because they have a default value.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "These variations on function syntax are discussed below",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "in ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Function-Argument-Labels-and-Parameter-Names",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "The body of the ",
              "type" : "text"
            },
            {
              "code" : "greet(person:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function starts by",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "defining a new ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " constant called ",
              "type" : "text"
            },
            {
              "code" : "greeting",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and setting it to a simple greeting message.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This greeting is then passed back out of the function using the ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the line of code that says ",
              "type" : "text"
            },
            {
              "code" : "return greeting",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the function finishes its execution and returns the current value of ",
              "type" : "text"
            },
            {
              "code" : "greeting",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can call the ",
              "type" : "text"
            },
            {
              "code" : "greet(person:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function multiple times with different input values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example above shows what happens if it’s called with an input value of ",
              "type" : "text"
            },
            {
              "code" : "\"Anna\"",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and an input value of ",
              "type" : "text"
            },
            {
              "code" : "\"Brian\"",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The function returns a tailored greeting in each case.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To make the body of this function shorter,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can combine the message creation and the return statement into one line:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func greetAgain(person: String) -> String {",
            "    return \"Hello again, \" + person + \"!\"",
            "}",
            "print(greetAgain(person: \"Anna\"))",
            "\/\/ Prints \"Hello again, Anna!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Function-Parameters-and-Return-Values",
          "level" : 2,
          "text" : "Function Parameters and Return Values",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Function parameters and return values are extremely flexible in Swift.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can define anything from a simple utility function with a single unnamed parameter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to a complex function with expressive parameter names and different parameter options.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Functions-Without-Parameters",
          "level" : 3,
          "text" : "Functions Without Parameters",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Functions aren’t required to define input parameters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s a function with no input parameters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which always returns the same ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " message whenever it’s called:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func sayHelloWorld() -> String {",
            "    return \"hello, world\"",
            "}",
            "print(sayHelloWorld())",
            "\/\/ Prints \"hello, world\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The function definition still needs parentheses after the function’s name,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even though it doesn’t take any parameters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The function name is also followed by",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an empty pair of parentheses when the function is called.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Functions-With-Multiple-Parameters",
          "level" : 3,
          "text" : "Functions With Multiple Parameters",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Functions can have multiple input parameters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which are written within the function’s parentheses, separated by commas.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This function takes a person’s name",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and whether they have already been greeted as input,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and returns an appropriate greeting for that person:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func greet(person: String, alreadyGreeted: Bool) -> String {",
            "    if alreadyGreeted {",
            "        return greetAgain(person: person)",
            "    } else {",
            "        return greet(person: person)",
            "    }",
            "}",
            "print(greet(person: \"Tim\", alreadyGreeted: true))",
            "\/\/ Prints \"Hello again, Tim!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You call the ",
              "type" : "text"
            },
            {
              "code" : "greet(person:alreadyGreeted:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by passing it both a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " argument value labeled ",
              "type" : "text"
            },
            {
              "code" : "person",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " argument value labeled ",
              "type" : "text"
            },
            {
              "code" : "alreadyGreeted",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in parentheses, separated by commas.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Note that this function is distinct from the ",
              "type" : "text"
            },
            {
              "code" : "greet(person:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "shown in an earlier section.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Although both functions have names that begin with ",
              "type" : "text"
            },
            {
              "code" : "greet",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "greet(person:alreadyGreeted:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function takes two arguments",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but the ",
              "type" : "text"
            },
            {
              "code" : "greet(person:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function takes only one.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Functions-Without-Return-Values",
          "level" : 3,
          "text" : "Functions Without Return Values",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Functions aren’t required to define a return type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s a version of the ",
              "type" : "text"
            },
            {
              "code" : "greet(person:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which prints its own ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value rather than returning it:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func greet(person: String) {",
            "    print(\"Hello, \\(person)!\")",
            "}",
            "greet(person: \"Dave\")",
            "\/\/ Prints \"Hello, Dave!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because it doesn’t need to return a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the function’s definition doesn’t include the return arrow (",
              "type" : "text"
            },
            {
              "code" : "->",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or a return type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Strictly speaking, this version of the ",
                  "type" : "text"
                },
                {
                  "code" : "greet(person:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " function ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "does",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " still return a value,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "even though no return value is defined.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Functions without a defined return type return a special value of type ",
                  "type" : "text"
                },
                {
                  "code" : "Void",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This is simply an empty tuple,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "which is written as ",
                  "type" : "text"
                },
                {
                  "code" : "()",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "The return value of a function can be ignored when it’s called:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func printAndCount(string: String) -> Int {",
            "    print(string)",
            "    return string.count",
            "}",
            "func printWithoutCounting(string: String) {",
            "    let _ = printAndCount(string: string)",
            "}",
            "printAndCount(string: \"hello, world\")",
            "\/\/ prints \"hello, world\" and returns a value of 12",
            "printWithoutCounting(string: \"hello, world\")",
            "\/\/ prints \"hello, world\" but doesn't return a value"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The first function, ",
              "type" : "text"
            },
            {
              "code" : "printAndCount(string:)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "prints a string, and then returns its character count as an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The second function, ",
              "type" : "text"
            },
            {
              "code" : "printWithoutCounting(string:)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "calls the first function, but ignores its return value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When the second function is called,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the message is still printed by the first function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but the returned value isn’t used.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Return values can be ignored,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "but a function that says it will return a value must always do so.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "A function with a defined return type",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "can’t allow control to fall out of the bottom of the function",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "without returning a value,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and attempting to do so will result in a compile-time error.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Functions-with-Multiple-Return-Values",
          "level" : 3,
          "text" : "Functions with Multiple Return Values",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use a tuple type as the return type for a function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to return multiple values as part of one compound return value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below defines a function called ",
              "type" : "text"
            },
            {
              "code" : "minMax(array:)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which finds the smallest and largest numbers in an array of ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " values:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func minMax(array: [Int]) -> (min: Int, max: Int) {",
            "    var currentMin = array[0]",
            "    var currentMax = array[0]",
            "    for value in array[1..<array.count] {",
            "        if value < currentMin {",
            "            currentMin = value",
            "        } else if value > currentMax {",
            "            currentMax = value",
            "        }",
            "    }",
            "    return (currentMin, currentMax)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "minMax(array:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function returns a tuple containing two ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These values are labeled ",
              "type" : "text"
            },
            {
              "code" : "min",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "max",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so that they can be accessed by name when querying the function’s return value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The body of the ",
              "type" : "text"
            },
            {
              "code" : "minMax(array:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function starts by setting",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "two working variables called ",
              "type" : "text"
            },
            {
              "code" : "currentMin",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "currentMax",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the value of the first integer in the array.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The function then iterates over the remaining values in the array",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and checks each value to see if it’s smaller or larger than",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the values of ",
              "type" : "text"
            },
            {
              "code" : "currentMin",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "currentMax",
              "type" : "codeVoice"
            },
            {
              "text" : " respectively.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Finally, the overall minimum and maximum values are returned as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a tuple of two ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " values.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because the tuple’s member values are named as part of the function’s return type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "they can be accessed with dot syntax to retrieve the minimum and maximum found values:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let bounds = minMax(array: [8, -6, 2, 109, 3, 71])",
            "print(\"min is \\(bounds.min) and max is \\(bounds.max)\")",
            "\/\/ Prints \"min is -6 and max is 109\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that the tuple’s members don’t need to be named",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "at the point that the tuple is returned from the function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because their names are already specified as part of the function’s return type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Optional-Tuple-Return-Types",
          "level" : 4,
          "text" : "Optional Tuple Return Types",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the tuple type to be returned from a function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "has the potential to have “no value” for the entire tuple,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use an ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "optional",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " tuple return type to reflect the fact that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the entire tuple can be ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You write an optional tuple return type by placing a question mark",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after the tuple type’s closing parenthesis,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as ",
              "type" : "text"
            },
            {
              "code" : "(Int, Int)?",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "(String, Int, Bool)?",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "An optional tuple type such as ",
                  "type" : "text"
                },
                {
                  "code" : "(Int, Int)?",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "is different from a tuple that contains optional types",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "such as ",
                  "type" : "text"
                },
                {
                  "code" : "(Int?, Int?)",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "With an optional tuple type, the entire tuple is optional,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "not just each individual value within the tuple.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "minMax(array:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function above returns a tuple containing two ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, the function doesn’t perform any safety checks on the array it’s passed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the ",
              "type" : "text"
            },
            {
              "code" : "array",
              "type" : "codeVoice"
            },
            {
              "text" : " argument contains an empty array,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "minMax(array:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function, as defined above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "will trigger a runtime error when attempting to access ",
              "type" : "text"
            },
            {
              "code" : "array[0]",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To handle an empty array safely,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "write the ",
              "type" : "text"
            },
            {
              "code" : "minMax(array:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function with an optional tuple return type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and return a value of ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " when the array is empty:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func minMax(array: [Int]) -> (min: Int, max: Int)? {",
            "    if array.isEmpty { return nil }",
            "    var currentMin = array[0]",
            "    var currentMax = array[0]",
            "    for value in array[1..<array.count] {",
            "        if value < currentMin {",
            "            currentMin = value",
            "        } else if value > currentMax {",
            "            currentMax = value",
            "        }",
            "    }",
            "    return (currentMin, currentMax)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use optional binding to check whether this version of the ",
              "type" : "text"
            },
            {
              "code" : "minMax(array:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "returns an actual tuple value or ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let bounds = minMax(array: [8, -6, 2, 109, 3, 71]) {",
            "    print(\"min is \\(bounds.min) and max is \\(bounds.max)\")",
            "}",
            "\/\/ Prints \"min is -6 and max is 109\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Functions-With-an-Implicit-Return",
          "level" : 3,
          "text" : "Functions With an Implicit Return",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the entire body of the function is a single expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the function implicitly returns that expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "both functions below have the same behavior:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func greeting(for person: String) -> String {",
            "    \"Hello, \" + person + \"!\"",
            "}",
            "print(greeting(for: \"Dave\"))",
            "\/\/ Prints \"Hello, Dave!\"",
            "",
            "func anotherGreeting(for person: String) -> String {",
            "    return \"Hello, \" + person + \"!\"",
            "}",
            "print(anotherGreeting(for: \"Dave\"))",
            "\/\/ Prints \"Hello, Dave!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The entire definition of the ",
              "type" : "text"
            },
            {
              "code" : "greeting(for:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is the greeting message that it returns,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which means it can use this shorter form.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "anotherGreeting(for:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function returns the same greeting message,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using the ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword like a longer function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Any function that you write as just one ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " line can omit the ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "As you’ll see in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Shorthand-Getter-Declaration",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "property getters can also use an implicit return.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The code you write as an implicit return value",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "needs to return some value.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "For example,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you can’t use ",
                  "type" : "text"
                },
                {
                  "code" : "print(13)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as an implicit return value.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "However, you can use a function that never returns",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "like ",
                  "type" : "text"
                },
                {
                  "code" : "fatalError(\"Oh no!\")",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as an implicit return value,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "because Swift knows that the implicit return doesn’t happen.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Function-Argument-Labels-and-Parameter-Names",
          "level" : 2,
          "text" : "Function Argument Labels and Parameter Names",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Each function parameter has both an ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "argument label",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "parameter name",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The argument label is used when calling the function;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "each argument is written in the function call with its argument label before it.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The parameter name is used in the implementation of the function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "By default, parameters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "use their parameter name as their argument label.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func someFunction(firstParameterName: Int, secondParameterName: Int) {",
            "    \/\/ In the function body, firstParameterName and secondParameterName",
            "    \/\/ refer to the argument values for the first and second parameters.",
            "}",
            "someFunction(firstParameterName: 1, secondParameterName: 2)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "All parameters must have unique names.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Although it’s possible for multiple parameters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to have the same argument label,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "unique argument labels help make your code more readable.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Specifying-Argument-Labels",
          "level" : 3,
          "text" : "Specifying Argument Labels",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You write an argument label before the parameter name,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separated by a space:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func someFunction(argumentLabel parameterName: Int) {",
            "    \/\/ In the function body, parameterName refers to the argument value",
            "    \/\/ for that parameter.",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s a variation of the ",
              "type" : "text"
            },
            {
              "code" : "greet(person:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that takes a person’s name and hometown",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and returns a greeting:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func greet(person: String, from hometown: String) -> String {",
            "    return \"Hello \\(person)!  Glad you could visit from \\(hometown).\"",
            "}",
            "print(greet(person: \"Bill\", from: \"Cupertino\"))",
            "\/\/ Prints \"Hello Bill!  Glad you could visit from Cupertino.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The use of argument labels can allow a function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to be called in an expressive, sentence-like manner,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "while still providing a function body that’s readable and clear in intent.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Omitting-Argument-Labels",
          "level" : 3,
          "text" : "Omitting Argument Labels",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you don’t want an argument label for a parameter,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "write an underscore (",
              "type" : "text"
            },
            {
              "code" : "_",
              "type" : "codeVoice"
            },
            {
              "text" : ") instead of an explicit argument label for that parameter.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func someFunction(_ firstParameterName: Int, secondParameterName: Int) {",
            "    \/\/ In the function body, firstParameterName and secondParameterName",
            "    \/\/ refer to the argument values for the first and second parameters.",
            "}",
            "someFunction(1, secondParameterName: 2)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If a parameter has an argument label,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the argument ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "must",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " be labeled when you call the function.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Default-Parameter-Values",
          "level" : 3,
          "text" : "Default Parameter Values",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can define a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "default value",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " for any parameter in a function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by assigning a value to the parameter after that parameter’s type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If a default value is defined, you can omit that parameter when calling the function.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) {",
            "    \/\/ If you omit the second argument when calling this function, then",
            "    \/\/ the value of parameterWithDefault is 12 inside the function body.",
            "}",
            "someFunction(parameterWithoutDefault: 3, parameterWithDefault: 6) \/\/ parameterWithDefault is 6",
            "someFunction(parameterWithoutDefault: 4) \/\/ parameterWithDefault is 12"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Place parameters that don’t have default values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "at the beginning of a function’s parameter list,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "before the parameters that have default values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Parameters that don’t have default values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are usually more important to the function’s meaning —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "writing them first makes it easier to recognize",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that the same function is being called,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "regardless of whether any default parameters are omitted.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Variadic-Parameters",
          "level" : 3,
          "text" : "Variadic Parameters",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "variadic parameter",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " accepts zero or more values of a specified type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You use a variadic parameter to specify that the parameter can be passed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a varying number of input values when the function is called.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Write variadic parameters by inserting three period characters (",
              "type" : "text"
            },
            {
              "code" : "...",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after the parameter’s type name.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The values passed to a variadic parameter are made available within the function’s body",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as an array of the appropriate type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, a variadic parameter with a name of ",
              "type" : "text"
            },
            {
              "code" : "numbers",
              "type" : "codeVoice"
            },
            {
              "text" : " and a type of ",
              "type" : "text"
            },
            {
              "code" : "Double...",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is made available within the function’s body as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a constant array called ",
              "type" : "text"
            },
            {
              "code" : "numbers",
              "type" : "codeVoice"
            },
            {
              "text" : " of type ",
              "type" : "text"
            },
            {
              "code" : "[Double]",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below calculates the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "arithmetic mean",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(also known as the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "average",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ") for a list of numbers of any length:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func arithmeticMean(_ numbers: Double...) -> Double {",
            "    var total: Double = 0",
            "    for number in numbers {",
            "        total += number",
            "    }",
            "    return total \/ Double(numbers.count)",
            "}",
            "arithmeticMean(1, 2, 3, 4, 5)",
            "\/\/ returns 3.0, which is the arithmetic mean of these five numbers",
            "arithmeticMean(3, 8.25, 18.75)",
            "\/\/ returns 10.0, which is the arithmetic mean of these three numbers"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A function can have multiple variadic parameters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The first parameter that comes after a variadic parameter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must have an argument label.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The argument label makes it unambiguous",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which arguments are passed to the variadic parameter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and which arguments are passed to the parameters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that come after the variadic parameter.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "In-Out-Parameters",
          "level" : 3,
          "text" : "In-Out Parameters",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Function parameters are constants by default.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Trying to change the value of a function parameter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from within the body of that function results in a compile-time error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This means that you can’t change the value of a parameter by mistake.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you want a function to modify a parameter’s value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and you want those changes to persist after the function call has ended,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "define that parameter as an ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "in-out parameter",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " instead.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You write an in-out parameter by placing the ",
              "type" : "text"
            },
            {
              "code" : "inout",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "right before a parameter’s type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An in-out parameter has a value that’s passed ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "in",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to the function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is modified by the function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and is passed back ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "out",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " of the function to replace the original value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For a detailed discussion of the behavior of in-out parameters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and associated compiler optimizations,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can only pass a variable as the argument for an in-out parameter.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can’t pass a constant or a literal value as the argument,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because constants and literals can’t be modified.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You place an ampersand (",
              "type" : "text"
            },
            {
              "code" : "&",
              "type" : "codeVoice"
            },
            {
              "text" : ") directly before a variable’s name",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when you pass it as an argument to an in-out parameter,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that it can be modified by the function.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "In-out parameters can’t have default values,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and variadic parameters can’t be marked as ",
                  "type" : "text"
                },
                {
                  "code" : "inout",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s an example of a function called ",
              "type" : "text"
            },
            {
              "code" : "swapTwoInts(_:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which has two in-out integer parameters called ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func swapTwoInts(_ a: inout Int, _ b: inout Int) {",
            "    let temporaryA = a",
            "    a = b",
            "    b = temporaryA",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "swapTwoInts(_:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function simply swaps the value of ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : " into ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the value of ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " into ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The function performs this swap by storing the value of ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " in",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a temporary constant called ",
              "type" : "text"
            },
            {
              "code" : "temporaryA",
              "type" : "codeVoice"
            },
            {
              "text" : ", assigning the value of ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : " to ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and then assigning ",
              "type" : "text"
            },
            {
              "code" : "temporaryA",
              "type" : "codeVoice"
            },
            {
              "text" : " to ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can call the ",
              "type" : "text"
            },
            {
              "code" : "swapTwoInts(_:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function with two variables of type ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to swap their values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Note that the names of ",
              "type" : "text"
            },
            {
              "code" : "someInt",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "anotherInt",
              "type" : "codeVoice"
            },
            {
              "text" : " are prefixed with an ampersand",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when they’re passed to the ",
              "type" : "text"
            },
            {
              "code" : "swapTwoInts(_:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var someInt = 3",
            "var anotherInt = 107",
            "swapTwoInts(&someInt, &anotherInt)",
            "print(\"someInt is now \\(someInt), and anotherInt is now \\(anotherInt)\")",
            "\/\/ Prints \"someInt is now 107, and anotherInt is now 3\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above shows that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the original values of ",
              "type" : "text"
            },
            {
              "code" : "someInt",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "anotherInt",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are modified by the ",
              "type" : "text"
            },
            {
              "code" : "swapTwoInts(_:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even though they were originally defined outside of the function.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "In-out parameters aren’t the same as returning a value from a function.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The ",
                  "type" : "text"
                },
                {
                  "code" : "swapTwoInts",
                  "type" : "codeVoice"
                },
                {
                  "text" : " example above doesn’t define a return type or return a value,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "but it still modifies the values of ",
                  "type" : "text"
                },
                {
                  "code" : "someInt",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "anotherInt",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "In-out parameters are an alternative way for a function to have an effect",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "outside of the scope of its function body.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Function-Types",
          "level" : 2,
          "text" : "Function Types",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Every function has a specific ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "function type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "made up of the parameter types and the return type of the function.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func addTwoInts(_ a: Int, _ b: Int) -> Int {",
            "    return a + b",
            "}",
            "func multiplyTwoInts(_ a: Int, _ b: Int) -> Int {",
            "    return a * b",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example defines two simple mathematical functions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "called ",
              "type" : "text"
            },
            {
              "code" : "addTwoInts",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "multiplyTwoInts",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These functions each take two ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and return an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " value, which is the result of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "performing an appropriate mathematical operation.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The type of both of these functions is ",
              "type" : "text"
            },
            {
              "code" : "(Int, Int) -> Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This can be read as:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "“A function that has two parameters, both of type ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and that returns a value of type ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".”",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s another example, for a function with no parameters or return value:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func printHelloWorld() {",
            "    print(\"hello, world\")",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The type of this function is ",
              "type" : "text"
            },
            {
              "code" : "() -> Void",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or “a function that has no parameters, and returns ",
              "type" : "text"
            },
            {
              "code" : "Void",
              "type" : "codeVoice"
            },
            {
              "text" : ".”",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Using-Function-Types",
          "level" : 3,
          "text" : "Using Function Types",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You use function types just like any other types in Swift.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, you can define a constant or variable to be of a function type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and assign an appropriate function to that variable:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var mathFunction: (Int, Int) -> Int = addTwoInts"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This can be read as:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "“Define a variable called ",
              "type" : "text"
            },
            {
              "code" : "mathFunction",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which has a type of ‘a function that takes two ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and returns an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " value.’",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Set this new variable to refer to the function called ",
              "type" : "text"
            },
            {
              "code" : "addTwoInts",
              "type" : "codeVoice"
            },
            {
              "text" : ".”",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "addTwoInts(_:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function has the same type as the ",
              "type" : "text"
            },
            {
              "code" : "mathFunction",
              "type" : "codeVoice"
            },
            {
              "text" : " variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so this assignment is allowed by Swift’s type-checker.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can now call the assigned function with the name ",
              "type" : "text"
            },
            {
              "code" : "mathFunction",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"Result: \\(mathFunction(2, 3))\")",
            "\/\/ Prints \"Result: 5\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A different function with the same matching type can be assigned to the same variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the same way as for nonfunction types:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "mathFunction = multiplyTwoInts",
            "print(\"Result: \\(mathFunction(2, 3))\")",
            "\/\/ Prints \"Result: 6\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "As with any other type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can leave it to Swift to infer the function type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when you assign a function to a constant or variable:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let anotherMathFunction = addTwoInts",
            "\/\/ anotherMathFunction is inferred to be of type (Int, Int) -> Int"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Function-Types-as-Parameter-Types",
          "level" : 3,
          "text" : "Function Types as Parameter Types",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use a function type such as ",
              "type" : "text"
            },
            {
              "code" : "(Int, Int) -> Int",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as a parameter type for another function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This enables you to leave some aspects of a function’s implementation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for the function’s caller to provide when the function is called.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s an example to print the results of the math functions from above:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {",
            "    print(\"Result: \\(mathFunction(a, b))\")",
            "}",
            "printMathResult(addTwoInts, 3, 5)",
            "\/\/ Prints \"Result: 8\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example defines a function called ",
              "type" : "text"
            },
            {
              "code" : "printMathResult(_:_:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : ", which has three parameters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The first parameter is called ",
              "type" : "text"
            },
            {
              "code" : "mathFunction",
              "type" : "codeVoice"
            },
            {
              "text" : ", and is of type ",
              "type" : "text"
            },
            {
              "code" : "(Int, Int) -> Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can pass any function of that type as the argument for this first parameter.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The second and third parameters are called ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : ", and are both of type ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These are used as the two input values for the provided math function.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When ",
              "type" : "text"
            },
            {
              "code" : "printMathResult(_:_:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " is called,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s passed the ",
              "type" : "text"
            },
            {
              "code" : "addTwoInts(_:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function, and the integer values ",
              "type" : "text"
            },
            {
              "code" : "3",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "5",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It calls the provided function with the values ",
              "type" : "text"
            },
            {
              "code" : "3",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "5",
              "type" : "codeVoice"
            },
            {
              "text" : ", and prints the result of ",
              "type" : "text"
            },
            {
              "code" : "8",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The role of ",
              "type" : "text"
            },
            {
              "code" : "printMathResult(_:_:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " is to print the result of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a call to a math function of an appropriate type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It doesn’t matter what that function’s implementation actually does —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it matters only that the function is of the correct type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This enables ",
              "type" : "text"
            },
            {
              "code" : "printMathResult(_:_:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " to hand off some of its functionality",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the caller of the function in a type-safe way.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Function-Types-as-Return-Types",
          "level" : 3,
          "text" : "Function Types as Return Types",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use a function type as the return type of another function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You do this by writing a complete function type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "immediately after the return arrow (",
              "type" : "text"
            },
            {
              "code" : "->",
              "type" : "codeVoice"
            },
            {
              "text" : ") of the returning function.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The next example defines two simple functions called ",
              "type" : "text"
            },
            {
              "code" : "stepForward(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "stepBackward(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "stepForward(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function returns a value one more than its input value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the ",
              "type" : "text"
            },
            {
              "code" : "stepBackward(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function returns a value one less than its input value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Both functions have a type of ",
              "type" : "text"
            },
            {
              "code" : "(Int) -> Int",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func stepForward(_ input: Int) -> Int {",
            "    return input + 1",
            "}",
            "func stepBackward(_ input: Int) -> Int {",
            "    return input - 1",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s a function called ",
              "type" : "text"
            },
            {
              "code" : "chooseStepFunction(backward:)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whose return type is ",
              "type" : "text"
            },
            {
              "code" : "(Int) -> Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "chooseStepFunction(backward:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function returns the ",
              "type" : "text"
            },
            {
              "code" : "stepForward(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or the ",
              "type" : "text"
            },
            {
              "code" : "stepBackward(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function based on a Boolean parameter called ",
              "type" : "text"
            },
            {
              "code" : "backward",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func chooseStepFunction(backward: Bool) -> (Int) -> Int {",
            "    return backward ? stepBackward : stepForward",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can now use ",
              "type" : "text"
            },
            {
              "code" : "chooseStepFunction(backward:)",
              "type" : "codeVoice"
            },
            {
              "text" : " to obtain a function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that will step in one direction or the other:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var currentValue = 3",
            "let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)",
            "\/\/ moveNearerToZero now refers to the stepBackward() function"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above determines whether a positive or negative step is needed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to move a variable called ",
              "type" : "text"
            },
            {
              "code" : "currentValue",
              "type" : "codeVoice"
            },
            {
              "text" : " progressively closer to zero.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "currentValue",
              "type" : "codeVoice"
            },
            {
              "text" : " has an initial value of ",
              "type" : "text"
            },
            {
              "code" : "3",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which means that ",
              "type" : "text"
            },
            {
              "code" : "currentValue > 0",
              "type" : "codeVoice"
            },
            {
              "text" : " returns ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "causing ",
              "type" : "text"
            },
            {
              "code" : "chooseStepFunction(backward:)",
              "type" : "codeVoice"
            },
            {
              "text" : " to return the ",
              "type" : "text"
            },
            {
              "code" : "stepBackward(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A reference to the returned function is stored in a constant called ",
              "type" : "text"
            },
            {
              "code" : "moveNearerToZero",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Now that ",
              "type" : "text"
            },
            {
              "code" : "moveNearerToZero",
              "type" : "codeVoice"
            },
            {
              "text" : " refers to the correct function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it can be used to count to zero:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"Counting to zero:\")",
            "\/\/ Counting to zero:",
            "while currentValue != 0 {",
            "    print(\"\\(currentValue)... \")",
            "    currentValue = moveNearerToZero(currentValue)",
            "}",
            "print(\"zero!\")",
            "\/\/ 3...",
            "\/\/ 2...",
            "\/\/ 1...",
            "\/\/ zero!"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Nested-Functions",
          "level" : 2,
          "text" : "Nested Functions",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "All of the functions you have encountered so far in this chapter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "have been examples of ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "global functions",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ", which are defined at a global scope.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can also define functions inside the bodies of other functions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "known as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "nested functions",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Nested functions are hidden from the outside world by default,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but can still be called and used by their enclosing function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An enclosing function can also return one of its nested functions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to allow the nested function to be used in another scope.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can rewrite the ",
              "type" : "text"
            },
            {
              "code" : "chooseStepFunction(backward:)",
              "type" : "codeVoice"
            },
            {
              "text" : " example above",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to use and return nested functions:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func chooseStepFunction(backward: Bool) -> (Int) -> Int {",
            "    func stepForward(input: Int) -> Int { return input + 1 }",
            "    func stepBackward(input: Int) -> Int { return input - 1 }",
            "    return backward ? stepBackward : stepForward",
            "}",
            "var currentValue = -4",
            "let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)",
            "\/\/ moveNearerToZero now refers to the nested stepForward() function",
            "while currentValue != 0 {",
            "    print(\"\\(currentValue)... \")",
            "    currentValue = moveNearerToZero(currentValue)",
            "}",
            "print(\"zero!\")",
            "\/\/ -4...",
            "\/\/ -3...",
            "\/\/ -2...",
            "\/\/ -1...",
            "\/\/ zero!"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ]
, 
"references": {
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "article",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#In-Out-Parameters": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters",
  "kind" : "section",
  "title" : "In-Out Parameters",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/declarations#In-Out-Parameters"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Default-Parameter-Values": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values",
  "kind" : "section",
  "title" : "Default Parameter Values",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/functions#Default-Parameter-Values"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Function-Argument-Labels-and-Parameter-Names": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Function-Argument-Labels-and-Parameter-Names",
  "kind" : "section",
  "title" : "Function Argument Labels and Parameter Names",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/functions#Function-Argument-Labels-and-Parameter-Names"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Shorthand-Getter-Declaration": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Shorthand-Getter-Declaration",
  "kind" : "section",
  "title" : "Shorthand Getter Declaration",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/properties#Shorthand-Getter-Declaration"
}
}
}