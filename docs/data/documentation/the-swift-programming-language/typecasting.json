{
  "abstract" : [
    {
      "text" : "Determine a value’s runtime type and give it more specific type information.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "The Swift Programming Language"
      }
    ],
    "title" : "Type Casting"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Type casting",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is a way to check the type of an instance,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or to treat that instance as a different",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "superclass or subclass from somewhere else in its own class hierarchy.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Type casting in Swift is implemented with the ",
              "type" : "text"
            },
            {
              "code" : "is",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "as",
              "type" : "codeVoice"
            },
            {
              "text" : " operators.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These two operators provide a simple and expressive way",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to check the type of a value or cast a value to a different type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also use type casting to check whether a type conforms to a protocol,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Defining-a-Class-Hierarchy-for-Type-Casting",
          "level" : 2,
          "text" : "Defining a Class Hierarchy for Type Casting",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use type casting with a hierarchy of classes and subclasses",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to check the type of a particular class instance",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to cast that instance to another class within the same hierarchy.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The three code snippets below define a hierarchy of classes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and an array containing instances of those classes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for use in an example of type casting.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The first snippet defines a new base class called ",
              "type" : "text"
            },
            {
              "code" : "MediaItem",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This class provides basic functionality for any kind of item that appears",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in a digital media library.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Specifically, it declares a ",
              "type" : "text"
            },
            {
              "code" : "name",
              "type" : "codeVoice"
            },
            {
              "text" : " property of type ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and an ",
              "type" : "text"
            },
            {
              "code" : "init name",
              "type" : "codeVoice"
            },
            {
              "text" : " initializer.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(It’s assumed that all media items, including all movies and songs, will have a name.)",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class MediaItem {",
            "    var name: String",
            "    init(name: String) {",
            "        self.name = name",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The next snippet defines two subclasses of ",
              "type" : "text"
            },
            {
              "code" : "MediaItem",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The first subclass, ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : ", encapsulates additional information about a movie or film.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It adds a ",
              "type" : "text"
            },
            {
              "code" : "director",
              "type" : "codeVoice"
            },
            {
              "text" : " property on top of the base ",
              "type" : "text"
            },
            {
              "code" : "MediaItem",
              "type" : "codeVoice"
            },
            {
              "text" : " class,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a corresponding initializer.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The second subclass, ",
              "type" : "text"
            },
            {
              "code" : "Song",
              "type" : "codeVoice"
            },
            {
              "text" : ", adds an ",
              "type" : "text"
            },
            {
              "code" : "artist",
              "type" : "codeVoice"
            },
            {
              "text" : " property and initializer",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "on top of the base class:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class Movie: MediaItem {",
            "    var director: String",
            "    init(name: String, director: String) {",
            "        self.director = director",
            "        super.init(name: name)",
            "    }",
            "}",
            "",
            "class Song: MediaItem {",
            "    var artist: String",
            "    init(name: String, artist: String) {",
            "        self.artist = artist",
            "        super.init(name: name)",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The final snippet creates a constant array called ",
              "type" : "text"
            },
            {
              "code" : "library",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which contains two ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : " instances and three ",
              "type" : "text"
            },
            {
              "code" : "Song",
              "type" : "codeVoice"
            },
            {
              "text" : " instances.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The type of the ",
              "type" : "text"
            },
            {
              "code" : "library",
              "type" : "codeVoice"
            },
            {
              "text" : " array is inferred",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by initializing it with the contents of an array literal.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift’s type checker is able to deduce that ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Song",
              "type" : "codeVoice"
            },
            {
              "text" : " have",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a common superclass of ",
              "type" : "text"
            },
            {
              "code" : "MediaItem",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so it infers a type of ",
              "type" : "text"
            },
            {
              "code" : "[MediaItem]",
              "type" : "codeVoice"
            },
            {
              "text" : " for the ",
              "type" : "text"
            },
            {
              "code" : "library",
              "type" : "codeVoice"
            },
            {
              "text" : " array:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let library = [",
            "    Movie(name: \"Casablanca\", director: \"Michael Curtiz\"),",
            "    Song(name: \"Blue Suede Shoes\", artist: \"Elvis Presley\"),",
            "    Movie(name: \"Citizen Kane\", director: \"Orson Welles\"),",
            "    Song(name: \"The One And Only\", artist: \"Chesney Hawkes\"),",
            "    Song(name: \"Never Gonna Give You Up\", artist: \"Rick Astley\")",
            "]",
            "\/\/ the type of \"library\" is inferred to be [MediaItem]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The items stored in ",
              "type" : "text"
            },
            {
              "code" : "library",
              "type" : "codeVoice"
            },
            {
              "text" : " are still ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Song",
              "type" : "codeVoice"
            },
            {
              "text" : " instances behind the scenes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, if you iterate over the contents of this array,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the items you receive back are typed as ",
              "type" : "text"
            },
            {
              "code" : "MediaItem",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and not as ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "Song",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In order to work with them as their native type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you need to ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "check",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " their type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "downcast",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " them to a different type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Checking-Type",
          "level" : 2,
          "text" : "Checking Type",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type check operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "is",
              "type" : "codeVoice"
            },
            {
              "text" : ") to check",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whether an instance is of a certain subclass type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The type check operator returns ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " if the instance is of that subclass type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " if it’s not.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below defines two variables, ",
              "type" : "text"
            },
            {
              "code" : "movieCount",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "songCount",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which count the number of ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Song",
              "type" : "codeVoice"
            },
            {
              "text" : " instances in the ",
              "type" : "text"
            },
            {
              "code" : "library",
              "type" : "codeVoice"
            },
            {
              "text" : " array:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var movieCount = 0",
            "var songCount = 0",
            "",
            "for item in library {",
            "    if item is Movie {",
            "        movieCount += 1",
            "    } else if item is Song {",
            "        songCount += 1",
            "    }",
            "}",
            "",
            "print(\"Media library contains \\(movieCount) movies and \\(songCount) songs\")",
            "\/\/ Prints \"Media library contains 2 movies and 3 songs\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example iterates through all items in the ",
              "type" : "text"
            },
            {
              "code" : "library",
              "type" : "codeVoice"
            },
            {
              "text" : " array.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "On each pass, the ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop sets the ",
              "type" : "text"
            },
            {
              "code" : "item",
              "type" : "codeVoice"
            },
            {
              "text" : " constant",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the next ",
              "type" : "text"
            },
            {
              "code" : "MediaItem",
              "type" : "codeVoice"
            },
            {
              "text" : " in the array.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "code" : "item is Movie",
              "type" : "codeVoice"
            },
            {
              "text" : " returns ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " if the current ",
              "type" : "text"
            },
            {
              "code" : "MediaItem",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is a ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : " instance and ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " if it’s not.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Similarly, ",
              "type" : "text"
            },
            {
              "code" : "item is Song",
              "type" : "codeVoice"
            },
            {
              "text" : " checks whether the item is a ",
              "type" : "text"
            },
            {
              "code" : "Song",
              "type" : "codeVoice"
            },
            {
              "text" : " instance.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "At the end of the ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop, the values of ",
              "type" : "text"
            },
            {
              "code" : "movieCount",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "songCount",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "contain a count of how many ",
              "type" : "text"
            },
            {
              "code" : "MediaItem",
              "type" : "codeVoice"
            },
            {
              "text" : " instances were found of each type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Downcasting",
          "level" : 2,
          "text" : "Downcasting",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A constant or variable of a certain class type may actually refer to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an instance of a subclass behind the scenes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Where you believe this is the case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can try to ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "downcast",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to the subclass type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type cast operator",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "as?",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "as!",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because downcasting can fail,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the type cast operator comes in two different forms.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The conditional form, ",
              "type" : "text"
            },
            {
              "code" : "as?",
              "type" : "codeVoice"
            },
            {
              "text" : ", returns an optional value of the type you are trying to downcast to.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The forced form, ",
              "type" : "text"
            },
            {
              "code" : "as!",
              "type" : "codeVoice"
            },
            {
              "text" : ", attempts the downcast and force-unwraps the result",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as a single compound action.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use the conditional form of the type cast operator (",
              "type" : "text"
            },
            {
              "code" : "as?",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when you aren’t sure if the downcast will succeed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This form of the operator will always return an optional value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the value will be ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " if the downcast was not possible.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This enables you to check for a successful downcast.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use the forced form of the type cast operator (",
              "type" : "text"
            },
            {
              "code" : "as!",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "only when you are sure that the downcast will always succeed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This form of the operator will trigger a runtime error",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if you try to downcast to an incorrect class type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below iterates over each ",
              "type" : "text"
            },
            {
              "code" : "MediaItem",
              "type" : "codeVoice"
            },
            {
              "text" : " in ",
              "type" : "text"
            },
            {
              "code" : "library",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and prints an appropriate description for each item.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To do this, it needs to access each item as a true ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "Song",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and not just as a ",
              "type" : "text"
            },
            {
              "code" : "MediaItem",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is necessary in order for it to be able to access",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "director",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "artist",
              "type" : "codeVoice"
            },
            {
              "text" : " property of a ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "Song",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for use in the description.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example, each item in the array might be a ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or it might be a ",
              "type" : "text"
            },
            {
              "code" : "Song",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You don’t know in advance which actual class to use for each item,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so it’s appropriate to use the conditional form of the type cast operator (",
              "type" : "text"
            },
            {
              "code" : "as?",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to check the downcast each time through the loop:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for item in library {",
            "    if let movie = item as? Movie {",
            "        print(\"Movie: \\(movie.name), dir. \\(movie.director)\")",
            "    } else if let song = item as? Song {",
            "        print(\"Song: \\(song.name), by \\(song.artist)\")",
            "    }",
            "}",
            "",
            "\/\/ Movie: Casablanca, dir. Michael Curtiz",
            "\/\/ Song: Blue Suede Shoes, by Elvis Presley",
            "\/\/ Movie: Citizen Kane, dir. Orson Welles",
            "\/\/ Song: The One And Only, by Chesney Hawkes",
            "\/\/ Song: Never Gonna Give You Up, by Rick Astley"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example starts by trying to downcast the current ",
              "type" : "text"
            },
            {
              "code" : "item",
              "type" : "codeVoice"
            },
            {
              "text" : " as a ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "item",
              "type" : "codeVoice"
            },
            {
              "text" : " is a ",
              "type" : "text"
            },
            {
              "code" : "MediaItem",
              "type" : "codeVoice"
            },
            {
              "text" : " instance, it’s possible that it ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "might",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " be a ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : ";",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "equally, it’s also possible that it might be a ",
              "type" : "text"
            },
            {
              "code" : "Song",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or even just a base ",
              "type" : "text"
            },
            {
              "code" : "MediaItem",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because of this uncertainty, the ",
              "type" : "text"
            },
            {
              "code" : "as?",
              "type" : "codeVoice"
            },
            {
              "text" : " form of the type cast operator returns an ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "optional",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when attempting to downcast to a subclass type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The result of ",
              "type" : "text"
            },
            {
              "code" : "item as? Movie",
              "type" : "codeVoice"
            },
            {
              "text" : " is of type ",
              "type" : "text"
            },
            {
              "code" : "Movie?",
              "type" : "codeVoice"
            },
            {
              "text" : ", or “optional ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : "”.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Downcasting to ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : " fails when applied to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "Song",
              "type" : "codeVoice"
            },
            {
              "text" : " instances in the library array.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To cope with this, the example above uses optional binding",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to check whether the optional ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : " actually contains a value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(that is, to find out whether the downcast succeeded.)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This optional binding is written “",
              "type" : "text"
            },
            {
              "code" : "if let movie = item as? Movie",
              "type" : "codeVoice"
            },
            {
              "text" : "”,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which can be read as:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "“Try to access ",
              "type" : "text"
            },
            {
              "code" : "item",
              "type" : "codeVoice"
            },
            {
              "text" : " as a ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If this is successful,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "set a new temporary constant called ",
              "type" : "text"
            },
            {
              "code" : "movie",
              "type" : "codeVoice"
            },
            {
              "text" : " to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value stored in the returned optional ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : ".”",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the downcasting succeeds, the properties of ",
              "type" : "text"
            },
            {
              "code" : "movie",
              "type" : "codeVoice"
            },
            {
              "text" : " are then used",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to print a description for that ",
              "type" : "text"
            },
            {
              "code" : "Movie",
              "type" : "codeVoice"
            },
            {
              "text" : " instance, including the name of its ",
              "type" : "text"
            },
            {
              "code" : "director",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A similar principle is used to check for ",
              "type" : "text"
            },
            {
              "code" : "Song",
              "type" : "codeVoice"
            },
            {
              "text" : " instances,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to print an appropriate description (including ",
              "type" : "text"
            },
            {
              "code" : "artist",
              "type" : "codeVoice"
            },
            {
              "text" : " name)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whenever a ",
              "type" : "text"
            },
            {
              "code" : "Song",
              "type" : "codeVoice"
            },
            {
              "text" : " is found in the library.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Casting doesn’t actually modify the instance or change its values.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The underlying instance remains the same; it’s simply treated and accessed",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as an instance of the type to which it has been cast.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Type-Casting-for-Any-and-AnyObject",
          "level" : 2,
          "text" : "Type Casting for Any and AnyObject",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift provides two special types for working with nonspecific types:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Any",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " can represent an instance of any type at all, including function types.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "AnyObject",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " can represent an instance of any class type.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use ",
              "type" : "text"
            },
            {
              "code" : "Any",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "AnyObject",
              "type" : "codeVoice"
            },
            {
              "text" : " only when you explicitly need",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the behavior and capabilities they provide.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It’s always better to be specific about the types you expect to work with in your code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s an example of using ",
              "type" : "text"
            },
            {
              "code" : "Any",
              "type" : "codeVoice"
            },
            {
              "text" : " to work with a mix of different types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "including function types and nonclass types.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example creates an array called ",
              "type" : "text"
            },
            {
              "code" : "things",
              "type" : "codeVoice"
            },
            {
              "text" : ", which can store values of type ",
              "type" : "text"
            },
            {
              "code" : "Any",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var things: [Any] = []",
            "",
            "things.append(0)",
            "things.append(0.0)",
            "things.append(42)",
            "things.append(3.14159)",
            "things.append(\"hello\")",
            "things.append((3.0, 5.0))",
            "things.append(Movie(name: \"Ghostbusters\", director: \"Ivan Reitman\"))",
            "things.append({ (name: String) -> String in \"Hello, \\(name)\" })"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "things",
              "type" : "codeVoice"
            },
            {
              "text" : " array contains",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "two ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " values, two ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " values, a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a tuple of type ",
              "type" : "text"
            },
            {
              "code" : "(Double, Double)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the movie “Ghostbusters”,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a closure expression that takes a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and returns another ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To discover the specific type of a constant or variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that’s known only to be of type ",
              "type" : "text"
            },
            {
              "code" : "Any",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "AnyObject",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use an ",
              "type" : "text"
            },
            {
              "code" : "is",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "as",
              "type" : "codeVoice"
            },
            {
              "text" : " pattern in a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s cases.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example below iterates over the items in the ",
              "type" : "text"
            },
            {
              "code" : "things",
              "type" : "codeVoice"
            },
            {
              "text" : " array",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and queries the type of each item with a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Several of the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s cases bind their matched value to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a constant of the specified type to enable its value to be printed:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for thing in things {",
            "    switch thing {",
            "    case 0 as Int:",
            "        print(\"zero as an Int\")",
            "    case 0 as Double:",
            "        print(\"zero as a Double\")",
            "    case let someInt as Int:",
            "        print(\"an integer value of \\(someInt)\")",
            "    case let someDouble as Double where someDouble > 0:",
            "        print(\"a positive double value of \\(someDouble)\")",
            "    case is Double:",
            "        print(\"some other double value that I don't want to print\")",
            "    case let someString as String:",
            "        print(\"a string value of \\\"\\(someString)\\\"\")",
            "    case let (x, y) as (Double, Double):",
            "        print(\"an (x, y) point at \\(x), \\(y)\")",
            "    case let movie as Movie:",
            "        print(\"a movie called \\(movie.name), dir. \\(movie.director)\")",
            "    case let stringConverter as (String) -> String:",
            "        print(stringConverter(\"Michael\"))",
            "    default:",
            "        print(\"something else\")",
            "    }",
            "}",
            "",
            "\/\/ zero as an Int",
            "\/\/ zero as a Double",
            "\/\/ an integer value of 42",
            "\/\/ a positive double value of 3.14159",
            "\/\/ a string value of \"hello\"",
            "\/\/ an (x, y) point at 3.0, 5.0",
            "\/\/ a movie called Ghostbusters, dir. Ivan Reitman",
            "\/\/ Hello, Michael"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The ",
                  "type" : "text"
                },
                {
                  "code" : "Any",
                  "type" : "codeVoice"
                },
                {
                  "text" : " type represents values of any type, including optional types.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Swift gives you a warning if you use an optional value",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "where a value of type ",
                  "type" : "text"
                },
                {
                  "code" : "Any",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is expected.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If you really do need to use an optional value as an ",
                  "type" : "text"
                },
                {
                  "code" : "Any",
                  "type" : "codeVoice"
                },
                {
                  "text" : " value,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you can use the ",
                  "type" : "text"
                },
                {
                  "code" : "as",
                  "type" : "codeVoice"
                },
                {
                  "text" : " operator to explicitly cast the optional to ",
                  "type" : "text"
                },
                {
                  "code" : "Any",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as shown below.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "code" : [
                "let optionalNumber: Int? = 3",
                "things.append(optionalNumber)        \/\/ Warning",
                "things.append(optionalNumber as Any) \/\/ No warning"
              ],
              "syntax" : "swift",
              "type" : "codeListing"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/the-swift-programming-language\/typecasting"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Checking-for-Protocol-Conformance": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance",
  "kind" : "section",
  "title" : "Checking for Protocol Conformance",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/protocols#Checking-for-Protocol-Conformance"
}
}
}