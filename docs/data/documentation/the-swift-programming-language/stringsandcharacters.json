{
  "abstract" : [
    {
      "text" : "Store and manipulate text.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "The Swift Programming Language"
      }
    ],
    "title" : "Strings and Characters"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "string",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is a series of characters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as ",
              "type" : "text"
            },
            {
              "code" : "\"hello, world\"",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "\"albatross\"",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift strings are represented by the ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The contents of a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " can be accessed in various ways,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "including as a collection of ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " values.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift’s ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " types provide",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a fast, Unicode-compliant way to work with text in your code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The syntax for string creation and manipulation is lightweight and readable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a string literal syntax that’s similar to C.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "String concatenation is as simple as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "combining two strings with the ",
              "type" : "text"
            },
            {
              "code" : "+",
              "type" : "codeVoice"
            },
            {
              "text" : " operator,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and string mutability is managed by choosing between a constant or a variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "just like any other value in Swift.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can also use strings to insert",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "constants, variables, literals, and expressions into longer strings,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in a process known as string interpolation.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This makes it easy to create custom string values for display, storage, and printing.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Despite this simplicity of syntax,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift’s ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " type is a fast, modern string implementation.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Every string is composed of encoding-independent Unicode characters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and provides support for accessing those characters in various Unicode representations.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Swift’s ",
                  "type" : "text"
                },
                {
                  "code" : "String",
                  "type" : "codeVoice"
                },
                {
                  "text" : " type is bridged with Foundation’s ",
                  "type" : "text"
                },
                {
                  "code" : "NSString",
                  "type" : "codeVoice"
                },
                {
                  "text" : " class.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Foundation also extends ",
                  "type" : "text"
                },
                {
                  "code" : "String",
                  "type" : "codeVoice"
                },
                {
                  "text" : " to expose methods defined by ",
                  "type" : "text"
                },
                {
                  "code" : "NSString",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This means, if you import Foundation,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you can access those ",
                  "type" : "text"
                },
                {
                  "code" : "NSString",
                  "type" : "codeVoice"
                },
                {
                  "text" : " methods on ",
                  "type" : "text"
                },
                {
                  "code" : "String",
                  "type" : "codeVoice"
                },
                {
                  "text" : " without casting.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "For more information about using ",
                  "type" : "text"
                },
                {
                  "code" : "String",
                  "type" : "codeVoice"
                },
                {
                  "text" : " with Foundation and Cocoa,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "see ",
                  "type" : "text"
                },
                {
                  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/string#2919514",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "String-Literals",
          "level" : 2,
          "text" : "String Literals",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can include predefined ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " values within your code as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "string literals",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A string literal is a sequence of characters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "surrounded by double quotation marks (",
              "type" : "text"
            },
            {
              "code" : "\"",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use a string literal as an initial value for a constant or variable:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let someString = \"Some string literal value\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that Swift infers a type of ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " for the ",
              "type" : "text"
            },
            {
              "code" : "someString",
              "type" : "codeVoice"
            },
            {
              "text" : " constant",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because it’s initialized with a string literal value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Multiline-String-Literals",
          "level" : 3,
          "text" : "Multiline String Literals",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you need a string that spans several lines,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "use a multiline string literal —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a sequence of characters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "surrounded by three double quotation marks:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let quotation = \"\"\"",
            "The White Rabbit put on his spectacles.  \"Where shall I begin,",
            "please your Majesty?\" he asked.",
            "",
            "\"Begin at the beginning,\" the King said gravely, \"and go on",
            "till you come to the end; then stop.\"",
            "\"\"\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A multiline string literal includes all of the lines between",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "its opening and closing quotation marks.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The string begins on the first line after the opening quotation marks (",
              "type" : "text"
            },
            {
              "code" : "\"\"\"",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ends on the line before the closing quotation marks,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which means that neither of the strings below",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "start or end with a line break:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let singleLineString = \"These are the same.\"",
            "let multilineString = \"\"\"",
            "These are the same.",
            "\"\"\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When your source code includes a line break",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "inside of a multiline string literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that line break also appears in the string’s value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you want to use line breaks",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to make your source code easier to read,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but you don’t want the line breaks to be part of the string’s value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "write a backslash (",
              "type" : "text"
            },
            {
              "code" : "\\",
              "type" : "codeVoice"
            },
            {
              "text" : ") at the end of those lines:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let softWrappedQuotation = \"\"\"",
            "The White Rabbit put on his spectacles.  \"Where shall I begin, \\",
            "please your Majesty?\" he asked.",
            "",
            "\"Begin at the beginning,\" the King said gravely, \"and go on \\",
            "till you come to the end; then stop.\"",
            "\"\"\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "To make a multiline string literal that begins or ends with a line feed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "write a blank line as the first or last line.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let lineBreaks = \"\"\"",
            "",
            "This string starts with a line break.",
            "It also ends with a line break.",
            "",
            "\"\"\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A multiline string can be indented to match the surrounding code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The whitespace before the closing quotation marks (",
              "type" : "text"
            },
            {
              "code" : "\"\"\"",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "tells Swift what whitespace to ignore before all of the other lines.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, if you write whitespace at the beginning of a line",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in addition to what’s before the closing quotation marks,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that whitespace ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "is",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " included.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "multilineStringWhitespace",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even though the entire multiline string literal is indented,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the first and last lines in the string don’t begin with any whitespace.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The middle line has more indentation than the closing quotation marks,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so it starts with that extra four-space indentation.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Special-Characters-in-String-Literals",
          "level" : 3,
          "text" : "Special Characters in String Literals",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "String literals can include the following special characters:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The escaped special characters ",
                      "type" : "text"
                    },
                    {
                      "code" : "\\0",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (null character), ",
                      "type" : "text"
                    },
                    {
                      "code" : "\\\\",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (backslash),",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "\\t",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (horizontal tab), ",
                      "type" : "text"
                    },
                    {
                      "code" : "\\n",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (line feed), ",
                      "type" : "text"
                    },
                    {
                      "code" : "\\r",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (carriage return),",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "\\\"",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (double quotation mark) and ",
                      "type" : "text"
                    },
                    {
                      "code" : "\\'",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (single quotation mark)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "An arbitrary Unicode scalar value, written as ",
                      "type" : "text"
                    },
                    {
                      "code" : "\\\\u{",
                      "type" : "codeVoice"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "n",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "code" : "}",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "where ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "n",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " is a 1–8 digit hexadecimal number",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "(Unicode is discussed in ",
                      "type" : "text"
                    },
                    {
                      "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Unicode",
                      "isActive" : true,
                      "type" : "reference"
                    },
                    {
                      "text" : " below)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "The code below shows four examples of these special characters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "wiseWords",
              "type" : "codeVoice"
            },
            {
              "text" : " constant contains two escaped double quotation marks.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "dollarSign",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "blackHeart",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "sparklingHeart",
              "type" : "codeVoice"
            },
            {
              "text" : " constants",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "demonstrate the Unicode scalar format:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let wiseWords = \"\\\"Imagination is more important than knowledge\\\" - Einstein\"",
            "\/\/ \"Imagination is more important than knowledge\" - Einstein",
            "let dollarSign = \"\\u{24}\"        \/\/ $,  Unicode scalar U+0024",
            "let blackHeart = \"\\u{2665}\"      \/\/ ♥,  Unicode scalar U+2665",
            "let sparklingHeart = \"\\u{1F496}\" \/\/ 💖, Unicode scalar U+1F496"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because multiline string literals use three double quotation marks instead of just one,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can include a double quotation mark (",
              "type" : "text"
            },
            {
              "code" : "\"",
              "type" : "codeVoice"
            },
            {
              "text" : ") inside of a multiline string literal",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without escaping it.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To include the text ",
              "type" : "text"
            },
            {
              "code" : "\"\"\"",
              "type" : "codeVoice"
            },
            {
              "text" : " in a multiline string,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "escape at least one of the quotation marks.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let threeDoubleQuotationMarks = \"\"\"",
            "Escaping the first quotation mark \\\"\"\"",
            "Escaping all three quotation marks \\\"\\\"\\\"",
            "\"\"\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Extended-String-Delimiters",
          "level" : 3,
          "text" : "Extended String Delimiters",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can place a string literal within ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "extended delimiters",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to include special characters in a string",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without invoking their effect.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You place your string within quotation marks (",
              "type" : "text"
            },
            {
              "code" : "\"",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and surround that with number signs (",
              "type" : "text"
            },
            {
              "code" : "#",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, printing the string literal ",
              "type" : "text"
            },
            {
              "code" : "#\"Line 1\\nLine 2\"#",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "prints the line feed escape sequence (",
              "type" : "text"
            },
            {
              "code" : "\\n",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "rather than printing the string across two lines.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you need the special effects of a character in a string literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "match the number of number signs within the string",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "following the escape character (",
              "type" : "text"
            },
            {
              "code" : "\\",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, if your string is ",
              "type" : "text"
            },
            {
              "code" : "#\"Line 1\\nLine 2\"#",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and you want to break the line,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use ",
              "type" : "text"
            },
            {
              "code" : "#\"Line 1\\#nLine 2\"#",
              "type" : "codeVoice"
            },
            {
              "text" : " instead.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Similarly, ",
              "type" : "text"
            },
            {
              "code" : "###\"Line1\\###nLine2\"###",
              "type" : "codeVoice"
            },
            {
              "text" : " also breaks the line.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "String literals created using extended delimiters can also be multiline string literals.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use extended delimiters to include the text ",
              "type" : "text"
            },
            {
              "code" : "\"\"\"",
              "type" : "codeVoice"
            },
            {
              "text" : " in a multiline string,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "overriding the default behavior that ends the literal. For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let threeMoreDoubleQuotationMarks = #\"\"\"",
            "Here are three more double quotes: \"\"\"",
            "\"\"\"#"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Initializing-an-Empty-String",
          "level" : 2,
          "text" : "Initializing an Empty String",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "To create an empty ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value as the starting point",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for building a longer string,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "either assign an empty string literal to a variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or initialize a new ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " instance with initializer syntax:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var emptyString = \"\"               \/\/ empty string literal",
            "var anotherEmptyString = String()  \/\/ initializer syntax",
            "\/\/ these two strings are both empty, and are equivalent to each other"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Find out whether a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value is empty",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by checking its Boolean ",
              "type" : "text"
            },
            {
              "code" : "isEmpty",
              "type" : "codeVoice"
            },
            {
              "text" : " property:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if emptyString.isEmpty {",
            "    print(\"Nothing to see here\")",
            "}",
            "\/\/ Prints \"Nothing to see here\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "String-Mutability",
          "level" : 2,
          "text" : "String Mutability",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You indicate whether a particular ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " can be modified (or ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "mutated",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by assigning it to a variable (in which case it can be modified),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or to a constant (in which case it can’t be modified):",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var variableString = \"Horse\"",
            "variableString += \" and carriage\"",
            "\/\/ variableString is now \"Horse and carriage\"",
            "",
            "let constantString = \"Highlander\"",
            "constantString += \" and another Highlander\"",
            "\/\/ this reports a compile-time error - a constant string cannot be modified"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "This approach is different from string mutation in Objective-C and Cocoa,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "where you choose between two classes (",
                  "type" : "text"
                },
                {
                  "code" : "NSString",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "NSMutableString",
                  "type" : "codeVoice"
                },
                {
                  "text" : ")",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "to indicate whether a string can be mutated.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Strings-Are-Value-Types",
          "level" : 2,
          "text" : "Strings Are Value Types",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift’s ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " type is a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "value type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you create a new ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value is ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "copied",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " when it’s passed to a function or method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or when it’s assigned to a constant or variable.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In each case, a new copy of the existing ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value is created,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the new copy is passed or assigned, not the original version.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Value types are described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift’s copy-by-default ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " behavior ensures that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when a function or method passes you a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s clear that you own that exact ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "regardless of where it came from.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can be confident that the string you are passed won’t be modified",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "unless you modify it yourself.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Behind the scenes, Swift’s compiler optimizes string usage",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so that actual copying takes place only when absolutely necessary.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This means you always get great performance",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when working with strings as value types.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Working-with-Characters",
          "level" : 2,
          "text" : "Working with Characters",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can access the individual ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " values for a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by iterating over the string with a ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for character in \"Dog!🐶\" {",
            "    print(character)",
            "}",
            "\/\/ D",
            "\/\/ o",
            "\/\/ g",
            "\/\/ !",
            "\/\/ 🐶"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop is described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Alternatively, you can create a stand-alone ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " constant or variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from a single-character string literal by providing a ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " type annotation:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let exclamationMark: Character = \"!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " values can be constructed by passing an array of ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as an argument to its initializer:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let catCharacters: [Character] = [\"C\", \"a\", \"t\", \"!\", \"🐱\"]",
            "let catString = String(catCharacters)",
            "print(catString)",
            "\/\/ Prints \"Cat!🐱\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Concatenating-Strings-and-Characters",
          "level" : 2,
          "text" : "Concatenating Strings and Characters",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " values can be added together (or ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "concatenated",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the addition operator (",
              "type" : "text"
            },
            {
              "code" : "+",
              "type" : "codeVoice"
            },
            {
              "text" : ") to create a new ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let string1 = \"hello\"",
            "let string2 = \" there\"",
            "var welcome = string1 + string2",
            "\/\/ welcome now equals \"hello there\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also append a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value to an existing ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the addition assignment operator (",
              "type" : "text"
            },
            {
              "code" : "+=",
              "type" : "codeVoice"
            },
            {
              "text" : "):",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var instruction = \"look over\"",
            "instruction += string2",
            "\/\/ instruction now equals \"look over there\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can append a ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " value to a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " type’s ",
              "type" : "text"
            },
            {
              "code" : "append()",
              "type" : "codeVoice"
            },
            {
              "text" : " method:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let exclamationMark: Character = \"!\"",
            "welcome.append(exclamationMark)",
            "\/\/ welcome now equals \"hello there!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "You can’t append a ",
                  "type" : "text"
                },
                {
                  "code" : "String",
                  "type" : "codeVoice"
                },
                {
                  "text" : " or ",
                  "type" : "text"
                },
                {
                  "code" : "Character",
                  "type" : "codeVoice"
                },
                {
                  "text" : " to an existing ",
                  "type" : "text"
                },
                {
                  "code" : "Character",
                  "type" : "codeVoice"
                },
                {
                  "text" : " variable,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "because a ",
                  "type" : "text"
                },
                {
                  "code" : "Character",
                  "type" : "codeVoice"
                },
                {
                  "text" : " value must contain a single character only.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you’re using multiline string literals",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to build up the lines of a longer string,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you want every line in the string to end with a line break,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "including the last line.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let badStart = \"\"\"",
            "    one",
            "    two",
            "    \"\"\"",
            "let end = \"\"\"",
            "    three",
            "    \"\"\"",
            "print(badStart + end)",
            "\/\/ Prints two lines:",
            "\/\/ one",
            "\/\/ twothree",
            "",
            "let goodStart = \"\"\"",
            "    one",
            "    two",
            "",
            "    \"\"\"",
            "print(goodStart + end)",
            "\/\/ Prints three lines:",
            "\/\/ one",
            "\/\/ two",
            "\/\/ three"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the code above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "concatenating ",
              "type" : "text"
            },
            {
              "code" : "badStart",
              "type" : "codeVoice"
            },
            {
              "text" : " with ",
              "type" : "text"
            },
            {
              "code" : "end",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "produces a two-line string,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which isn’t the desired result.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because the last line of ",
              "type" : "text"
            },
            {
              "code" : "badStart",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "doesn’t end with a line break,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that line gets combined with the first line of ",
              "type" : "text"
            },
            {
              "code" : "end",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In contrast,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "both lines of ",
              "type" : "text"
            },
            {
              "code" : "goodStart",
              "type" : "codeVoice"
            },
            {
              "text" : " end with a line break,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so when it’s combined with ",
              "type" : "text"
            },
            {
              "code" : "end",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the result has three lines,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as expected.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "String-Interpolation",
          "level" : 2,
          "text" : "String Interpolation",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "String interpolation",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is a way to construct a new ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from a mix of constants, variables, literals, and expressions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by including their values inside a string literal.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use string interpolation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in both single-line and multiline string literals.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each item that you insert into the string literal is wrapped in",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a pair of parentheses, prefixed by a backslash (",
              "type" : "text"
            },
            {
              "code" : "\\",
              "type" : "codeVoice"
            },
            {
              "text" : "):",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let multiplier = 3",
            "let message = \"\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)\"",
            "\/\/ message is \"3 times 2.5 is 7.5\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of ",
              "type" : "text"
            },
            {
              "code" : "multiplier",
              "type" : "codeVoice"
            },
            {
              "text" : " is inserted into a string literal as ",
              "type" : "text"
            },
            {
              "code" : "\\(multiplier)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This placeholder is replaced with the actual value of ",
              "type" : "text"
            },
            {
              "code" : "multiplier",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when the string interpolation is evaluated to create an actual string.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The value of ",
              "type" : "text"
            },
            {
              "code" : "multiplier",
              "type" : "codeVoice"
            },
            {
              "text" : " is also part of a larger expression later in the string.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This expression calculates the value of ",
              "type" : "text"
            },
            {
              "code" : "Double(multiplier) * 2.5",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and inserts the result (",
              "type" : "text"
            },
            {
              "code" : "7.5",
              "type" : "codeVoice"
            },
            {
              "text" : ") into the string.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In this case, the expression is written as ",
              "type" : "text"
            },
            {
              "code" : "\\(Double(multiplier) * 2.5)",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when it’s included inside the string literal.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use extended string delimiters to create strings containing",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "characters that would otherwise be treated as a string interpolation.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(#\"Write an interpolated string in Swift using \\(multiplier).\"#)",
            "\/\/ Prints \"Write an interpolated string in Swift using \\(multiplier).\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "To use string interpolation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "inside a string that uses extended delimiters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "match the number of number signs after the backslash",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the number of number signs at the beginning and end of the string.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(#\"6 times 7 is \\#(6 * 7).\"#)",
            "\/\/ Prints \"6 times 7 is 42.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The expressions you write inside parentheses within an interpolated string",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "can’t contain an unescaped backslash (",
                  "type" : "text"
                },
                {
                  "code" : "\\",
                  "type" : "codeVoice"
                },
                {
                  "text" : "), a carriage return, or a line feed.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "However, they can contain other string literals.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Unicode",
          "level" : 2,
          "text" : "Unicode",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Unicode",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is an international standard for",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "encoding, representing, and processing text in different writing systems.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It enables you to represent almost any character from any language in a standardized form,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to read and write those characters to and from an external source",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as a text file or web page.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift’s ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " types are fully Unicode-compliant,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in this section.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Unicode-Scalar-Values",
          "level" : 3,
          "text" : "Unicode Scalar Values",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Behind the scenes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift’s native ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " type is built from ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Unicode scalar values",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A Unicode scalar value is a unique 21-bit number for a character or modifier,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as ",
              "type" : "text"
            },
            {
              "code" : "U+0061",
              "type" : "codeVoice"
            },
            {
              "text" : " for ",
              "type" : "text"
            },
            {
              "code" : "LATIN SMALL LETTER A",
              "type" : "codeVoice"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "\"a\"",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or ",
              "type" : "text"
            },
            {
              "code" : "U+1F425",
              "type" : "codeVoice"
            },
            {
              "text" : " for ",
              "type" : "text"
            },
            {
              "code" : "FRONT-FACING BABY CHICK",
              "type" : "codeVoice"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "\"🐥\"",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that not all 21-bit Unicode scalar values are assigned to a character —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "some scalars are reserved for future assignment or for use in UTF-16 encoding.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Scalar values that have been assigned to a character typically also have a name,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as ",
              "type" : "text"
            },
            {
              "code" : "LATIN SMALL LETTER A",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "FRONT-FACING BABY CHICK",
              "type" : "codeVoice"
            },
            {
              "text" : " in the examples above.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Extended-Grapheme-Clusters",
          "level" : 3,
          "text" : "Extended Grapheme Clusters",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Every instance of Swift’s ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " type represents",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a single ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "extended grapheme cluster",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An extended grapheme cluster is a sequence of one or more Unicode scalars",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that (when combined) produce a single human-readable character.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s an example.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The letter ",
              "type" : "text"
            },
            {
              "code" : "é",
              "type" : "codeVoice"
            },
            {
              "text" : " can be represented as the single Unicode scalar ",
              "type" : "text"
            },
            {
              "code" : "é",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(",
              "type" : "text"
            },
            {
              "code" : "LATIN SMALL LETTER E WITH ACUTE",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "U+00E9",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, the same letter can also be represented as a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "pair",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " of scalars —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a standard letter ",
              "type" : "text"
            },
            {
              "code" : "e",
              "type" : "codeVoice"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "LATIN SMALL LETTER E",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "U+0065",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by the ",
              "type" : "text"
            },
            {
              "code" : "COMBINING ACUTE ACCENT",
              "type" : "codeVoice"
            },
            {
              "text" : " scalar (",
              "type" : "text"
            },
            {
              "code" : "U+0301",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "COMBINING ACUTE ACCENT",
              "type" : "codeVoice"
            },
            {
              "text" : " scalar is graphically applied to the scalar that precedes it,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "turning an ",
              "type" : "text"
            },
            {
              "code" : "e",
              "type" : "codeVoice"
            },
            {
              "text" : " into an ",
              "type" : "text"
            },
            {
              "code" : "é",
              "type" : "codeVoice"
            },
            {
              "text" : " when it’s rendered by",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a Unicode-aware text-rendering system.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In both cases, the letter ",
              "type" : "text"
            },
            {
              "code" : "é",
              "type" : "codeVoice"
            },
            {
              "text" : " is represented as a single Swift ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that represents an extended grapheme cluster.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the first case, the cluster contains a single scalar;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the second case, it’s a cluster of two scalars:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let eAcute: Character = \"\\u{E9}\"                         \/\/ é",
            "let combinedEAcute: Character = \"\\u{65}\\u{301}\"          \/\/ e followed by ́",
            "\/\/ eAcute is é, combinedEAcute is é"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Extended grapheme clusters are a flexible way to represent",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "many complex script characters as a single ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, Hangul syllables from the Korean alphabet",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be represented as either a precomposed or decomposed sequence.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Both of these representations qualify as a single ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " value in Swift:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let precomposed: Character = \"\\u{D55C}\"                  \/\/ 한",
            "let decomposed: Character = \"\\u{1112}\\u{1161}\\u{11AB}\"   \/\/ ᄒ, ᅡ, ᆫ",
            "\/\/ precomposed is 한, decomposed is 한"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Extended grapheme clusters enable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "scalars for enclosing marks (such as ",
              "type" : "text"
            },
            {
              "code" : "COMBINING ENCLOSING CIRCLE",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "U+20DD",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to enclose other Unicode scalars as part of a single ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " value:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let enclosedEAcute: Character = \"\\u{E9}\\u{20DD}\"",
            "\/\/ enclosedEAcute is é⃝"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unicode scalars for regional indicator symbols",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be combined in pairs to make a single ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as this combination of ",
              "type" : "text"
            },
            {
              "code" : "REGIONAL INDICATOR SYMBOL LETTER U",
              "type" : "codeVoice"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "U+1F1FA",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "code" : "REGIONAL INDICATOR SYMBOL LETTER S",
              "type" : "codeVoice"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "U+1F1F8",
              "type" : "codeVoice"
            },
            {
              "text" : "):",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let regionalIndicatorForUS: Character = \"\\u{1F1FA}\\u{1F1F8}\"",
            "\/\/ regionalIndicatorForUS is 🇺🇸"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Counting-Characters",
          "level" : 2,
          "text" : "Counting Characters",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "To retrieve a count of the ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " values in a string,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "use the ",
              "type" : "text"
            },
            {
              "code" : "count",
              "type" : "codeVoice"
            },
            {
              "text" : " property of the string:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let unusualMenagerie = \"Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪\"",
            "print(\"unusualMenagerie has \\(unusualMenagerie.count) characters\")",
            "\/\/ Prints \"unusualMenagerie has 40 characters\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that Swift’s use of extended grapheme clusters for ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "means that string concatenation and modification may not always affect",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a string’s character count.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, if you initialize a new string with the four-character word ",
              "type" : "text"
            },
            {
              "code" : "cafe",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and then append a ",
              "type" : "text"
            },
            {
              "code" : "COMBINING ACUTE ACCENT",
              "type" : "codeVoice"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "U+0301",
              "type" : "codeVoice"
            },
            {
              "text" : ") to the end of the string,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the resulting string will still have a character count of ",
              "type" : "text"
            },
            {
              "code" : "4",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a fourth character of ",
              "type" : "text"
            },
            {
              "code" : "é",
              "type" : "codeVoice"
            },
            {
              "text" : ", not ",
              "type" : "text"
            },
            {
              "code" : "e",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var word = \"cafe\"",
            "print(\"the number of characters in \\(word) is \\(word.count)\")",
            "\/\/ Prints \"the number of characters in cafe is 4\"",
            "",
            "word += \"\\u{301}\"    \/\/ COMBINING ACUTE ACCENT, U+0301",
            "",
            "print(\"the number of characters in \\(word) is \\(word.count)\")",
            "\/\/ Prints \"the number of characters in café is 4\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Extended grapheme clusters can be composed of multiple Unicode scalars.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This means that different characters—",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and different representations of the same character—",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "can require different amounts of memory to store.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Because of this, characters in Swift don’t each take up",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the same amount of memory within a string’s representation.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "As a result, the number of characters in a string can’t be calculated",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "without iterating through the string to determine",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "its extended grapheme cluster boundaries.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If you are working with particularly long string values,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "be aware that the ",
                  "type" : "text"
                },
                {
                  "code" : "count",
                  "type" : "codeVoice"
                },
                {
                  "text" : " property",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "must iterate over the Unicode scalars in the entire string",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "in order to determine the characters for that string.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "The count of the characters returned by the ",
                  "type" : "text"
                },
                {
                  "code" : "count",
                  "type" : "codeVoice"
                },
                {
                  "text" : " property",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "isn’t always the same as the ",
                  "type" : "text"
                },
                {
                  "code" : "length",
                  "type" : "codeVoice"
                },
                {
                  "text" : " property of",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "an ",
                  "type" : "text"
                },
                {
                  "code" : "NSString",
                  "type" : "codeVoice"
                },
                {
                  "text" : " that contains the same characters.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The length of an ",
                  "type" : "text"
                },
                {
                  "code" : "NSString",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is based on",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the number of 16-bit code units within the string’s UTF-16 representation",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and not the number of Unicode extended grapheme clusters within the string.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Accessing-and-Modifying-a-String",
          "level" : 2,
          "text" : "Accessing and Modifying a String",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You access and modify a string through its methods and properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or by using subscript syntax.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "String-Indices",
          "level" : 3,
          "text" : "String Indices",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Each ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value has an associated ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "index type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "String.Index",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which corresponds to the position of each ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " in the string.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "As mentioned above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "different characters can require different amounts of memory to store,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so in order to determine which ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " is at a particular position,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you must iterate over each Unicode scalar from the start or end of that ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For this reason, Swift strings can’t be indexed by integer values.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use the ",
              "type" : "text"
            },
            {
              "code" : "startIndex",
              "type" : "codeVoice"
            },
            {
              "text" : " property to access",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the position of the first ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " of a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "endIndex",
              "type" : "codeVoice"
            },
            {
              "text" : " property is the position after the last character in a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As a result,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "endIndex",
              "type" : "codeVoice"
            },
            {
              "text" : " property isn’t a valid argument to a string’s subscript.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " is empty, ",
              "type" : "text"
            },
            {
              "code" : "startIndex",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "endIndex",
              "type" : "codeVoice"
            },
            {
              "text" : " are equal.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You access the indices before and after a given index",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using the ",
              "type" : "text"
            },
            {
              "code" : "index(before:)",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "index(after:)",
              "type" : "codeVoice"
            },
            {
              "text" : " methods of ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To access an index farther away from the given index,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use the ",
              "type" : "text"
            },
            {
              "code" : "index(_:offsetBy:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "instead of calling one of these methods multiple times.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use subscript syntax to access",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " at a particular ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " index.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let greeting = \"Guten Tag!\"",
            "greeting[greeting.startIndex]",
            "\/\/ G",
            "greeting[greeting.index(before: greeting.endIndex)]",
            "\/\/ !",
            "greeting[greeting.index(after: greeting.startIndex)]",
            "\/\/ u",
            "let index = greeting.index(greeting.startIndex, offsetBy: 7)",
            "greeting[index]",
            "\/\/ a"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Attempting to access an index outside of a string’s range",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or a ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " at an index outside of a string’s range",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "will trigger a runtime error.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "greeting[greeting.endIndex] \/\/ Error",
            "greeting.index(after: greeting.endIndex) \/\/ Error"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use the ",
              "type" : "text"
            },
            {
              "code" : "indices",
              "type" : "codeVoice"
            },
            {
              "text" : " property to access all of the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "indices of individual characters in a string.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for index in greeting.indices {",
            "    print(\"\\(greeting[index]) \", terminator: \"\")",
            "}",
            "\/\/ Prints \"G u t e n   T a g ! \""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "You can use the ",
                  "type" : "text"
                },
                {
                  "code" : "startIndex",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "endIndex",
                  "type" : "codeVoice"
                },
                {
                  "text" : " properties",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and the ",
                  "type" : "text"
                },
                {
                  "code" : "index(before:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "index(after:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", and ",
                  "type" : "text"
                },
                {
                  "code" : "index(_:offsetBy:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " methods",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "on any type that conforms to the ",
                  "type" : "text"
                },
                {
                  "code" : "Collection",
                  "type" : "codeVoice"
                },
                {
                  "text" : " protocol.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This includes ",
                  "type" : "text"
                },
                {
                  "code" : "String",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", as shown here,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as well as collection types such as ",
                  "type" : "text"
                },
                {
                  "code" : "Array",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "Dictionary",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", and ",
                  "type" : "text"
                },
                {
                  "code" : "Set",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Inserting-and-Removing",
          "level" : 3,
          "text" : "Inserting and Removing",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "To insert a single character into a string at a specified index,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "use the ",
              "type" : "text"
            },
            {
              "code" : "insert(_:at:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to insert the contents of another string at a specified index,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "use the ",
              "type" : "text"
            },
            {
              "code" : "insert(contentsOf:at:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var welcome = \"hello\"",
            "welcome.insert(\"!\", at: welcome.endIndex)",
            "\/\/ welcome now equals \"hello!\"",
            "",
            "welcome.insert(contentsOf: \" there\", at: welcome.index(before: welcome.endIndex))",
            "\/\/ welcome now equals \"hello there!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "To remove a single character from a string at a specified index,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "use the ",
              "type" : "text"
            },
            {
              "code" : "remove(at:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to remove a substring at a specified range,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "use the ",
              "type" : "text"
            },
            {
              "code" : "removeSubrange(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "welcome.remove(at: welcome.index(before: welcome.endIndex))",
            "\/\/ welcome now equals \"hello there\"",
            "",
            "let range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex",
            "welcome.removeSubrange(range)",
            "\/\/ welcome now equals \"hello\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "You can use the ",
                  "type" : "text"
                },
                {
                  "code" : "insert(_:at:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "insert(contentsOf:at:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "remove(at:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", and ",
                  "type" : "text"
                },
                {
                  "code" : "removeSubrange(_:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " methods",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "on any type that conforms to the ",
                  "type" : "text"
                },
                {
                  "code" : "RangeReplaceableCollection",
                  "type" : "codeVoice"
                },
                {
                  "text" : " protocol.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This includes ",
                  "type" : "text"
                },
                {
                  "code" : "String",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", as shown here,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as well as collection types such as ",
                  "type" : "text"
                },
                {
                  "code" : "Array",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "Dictionary",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", and ",
                  "type" : "text"
                },
                {
                  "code" : "Set",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Substrings",
          "level" : 2,
          "text" : "Substrings",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you get a substring from a string —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example, using a subscript or a method like ",
              "type" : "text"
            },
            {
              "code" : "prefix(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the result is an instance",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/substring",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "not another string.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Substrings in Swift have most of the same methods as strings,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which means you can work with substrings",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the same way you work with strings.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, unlike strings,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you use substrings for only a short amount of time",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "while performing actions on a string.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you’re ready to store the result for a longer time,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you convert the substring to an instance of ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let greeting = \"Hello, world!\"",
            "let index = greeting.firstIndex(of: \",\") ?? greeting.endIndex",
            "let beginning = greeting[..<index]",
            "\/\/ beginning is \"Hello\"",
            "",
            "\/\/ Convert the result to a String for long-term storage.",
            "let newString = String(beginning)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Like strings, each substring has a region of memory",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "where the characters that make up the substring are stored.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The difference between strings and substrings",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is that, as a performance optimization,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a substring can reuse part of the memory",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that’s used to store the original string,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or part of the memory that’s used to store another substring.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(Strings have a similar optimization,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but if two strings share memory, they’re equal.)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This performance optimization means",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you don’t have to pay the performance cost of copying memory",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "until you modify either the string or substring.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As mentioned above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "substrings aren’t suitable for long-term storage —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because they reuse the storage of the original string,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the entire original string must be kept in memory",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as long as any of its substrings are being used.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "greeting",
              "type" : "codeVoice"
            },
            {
              "text" : " is a string,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which means it has a region of memory",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "where the characters that make up the string are stored.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "beginning",
              "type" : "codeVoice"
            },
            {
              "text" : " is a substring of ",
              "type" : "text"
            },
            {
              "code" : "greeting",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it reuses the memory that ",
              "type" : "text"
            },
            {
              "code" : "greeting",
              "type" : "codeVoice"
            },
            {
              "text" : " uses.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In contrast,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "newString",
              "type" : "codeVoice"
            },
            {
              "text" : " is a string —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when it’s created from the substring,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it has its own storage.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The figure below shows these relationships:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "stringSubstring",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Both ",
                  "type" : "text"
                },
                {
                  "code" : "String",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "Substring",
                  "type" : "codeVoice"
                },
                {
                  "text" : " conform to the",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : " protocol,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "which means it’s often convenient for string-manipulation functions",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "to accept a ",
                  "type" : "text"
                },
                {
                  "code" : "StringProtocol",
                  "type" : "codeVoice"
                },
                {
                  "text" : " value.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "You can call such functions with either a ",
                  "type" : "text"
                },
                {
                  "code" : "String",
                  "type" : "codeVoice"
                },
                {
                  "text" : " or ",
                  "type" : "text"
                },
                {
                  "code" : "Substring",
                  "type" : "codeVoice"
                },
                {
                  "text" : " value.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Comparing-Strings",
          "level" : 2,
          "text" : "Comparing Strings",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift provides three ways to compare textual values:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "string and character equality, prefix equality, and suffix equality.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "String-and-Character-Equality",
          "level" : 3,
          "text" : "String and Character Equality",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "String and character equality is checked with the “equal to” operator (",
              "type" : "text"
            },
            {
              "code" : "==",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the “not equal to” operator (",
              "type" : "text"
            },
            {
              "code" : "!=",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Comparison-Operators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let quotation = \"We're a lot alike, you and I.\"",
            "let sameQuotation = \"We're a lot alike, you and I.\"",
            "if quotation == sameQuotation {",
            "    print(\"These two strings are considered equal\")",
            "}",
            "\/\/ Prints \"These two strings are considered equal\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Two ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " values (or two ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " values) are considered equal if",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "their extended grapheme clusters are ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "canonically equivalent",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Extended grapheme clusters are canonically equivalent if they have",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the same linguistic meaning and appearance,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even if they’re composed from different Unicode scalars behind the scenes.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, ",
              "type" : "text"
            },
            {
              "code" : "LATIN SMALL LETTER E WITH ACUTE",
              "type" : "codeVoice"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "U+00E9",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is canonically equivalent to ",
              "type" : "text"
            },
            {
              "code" : "LATIN SMALL LETTER E",
              "type" : "codeVoice"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "U+0065",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by ",
              "type" : "text"
            },
            {
              "code" : "COMBINING ACUTE ACCENT",
              "type" : "codeVoice"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "U+0301",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Both of these extended grapheme clusters are valid ways to represent the character ",
              "type" : "text"
            },
            {
              "code" : "é",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so they’re considered to be canonically equivalent:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ \"Voulez-vous un café?\" using LATIN SMALL LETTER E WITH ACUTE",
            "let eAcuteQuestion = \"Voulez-vous un caf\\u{E9}?\"",
            "",
            "\/\/ \"Voulez-vous un café?\" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT",
            "let combinedEAcuteQuestion = \"Voulez-vous un caf\\u{65}\\u{301}?\"",
            "",
            "if eAcuteQuestion == combinedEAcuteQuestion {",
            "    print(\"These two strings are considered equal\")",
            "}",
            "\/\/ Prints \"These two strings are considered equal\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Conversely, ",
              "type" : "text"
            },
            {
              "code" : "LATIN CAPITAL LETTER A",
              "type" : "codeVoice"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "U+0041",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "\"A\"",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as used in English, is ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "not",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " equivalent to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "CYRILLIC CAPITAL LETTER A",
              "type" : "codeVoice"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "U+0410",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "\"А\"",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as used in Russian.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The characters are visually similar,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but don’t have the same linguistic meaning:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let latinCapitalLetterA: Character = \"\\u{41}\"",
            "",
            "let cyrillicCapitalLetterA: Character = \"\\u{0410}\"",
            "",
            "if latinCapitalLetterA != cyrillicCapitalLetterA {",
            "    print(\"These two characters aren't equivalent.\")",
            "}",
            "\/\/ Prints \"These two characters aren't equivalent.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "String and character comparisons in Swift aren’t locale-sensitive.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Prefix-and-Suffix-Equality",
          "level" : 3,
          "text" : "Prefix and Suffix Equality",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "To check whether a string has a particular string prefix or suffix,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "call the string’s ",
              "type" : "text"
            },
            {
              "code" : "hasPrefix(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "hasSuffix(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " methods,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "both of which take a single argument of type ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " and return a Boolean value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The examples below consider an array of strings representing",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the scene locations from the first two acts of Shakespeare’s ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Romeo and Juliet",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let romeoAndJuliet = [",
            "    \"Act 1 Scene 1: Verona, A public place\",",
            "    \"Act 1 Scene 2: Capulet's mansion\",",
            "    \"Act 1 Scene 3: A room in Capulet's mansion\",",
            "    \"Act 1 Scene 4: A street outside Capulet's mansion\",",
            "    \"Act 1 Scene 5: The Great Hall in Capulet's mansion\",",
            "    \"Act 2 Scene 1: Outside Capulet's mansion\",",
            "    \"Act 2 Scene 2: Capulet's orchard\",",
            "    \"Act 2 Scene 3: Outside Friar Lawrence's cell\",",
            "    \"Act 2 Scene 4: A street in Verona\",",
            "    \"Act 2 Scene 5: Capulet's mansion\",",
            "    \"Act 2 Scene 6: Friar Lawrence's cell\"",
            "]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use the ",
              "type" : "text"
            },
            {
              "code" : "hasPrefix(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method with the ",
              "type" : "text"
            },
            {
              "code" : "romeoAndJuliet",
              "type" : "codeVoice"
            },
            {
              "text" : " array",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to count the number of scenes in Act 1 of the play:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var act1SceneCount = 0",
            "for scene in romeoAndJuliet {",
            "    if scene.hasPrefix(\"Act 1 \") {",
            "        act1SceneCount += 1",
            "    }",
            "}",
            "print(\"There are \\(act1SceneCount) scenes in Act 1\")",
            "\/\/ Prints \"There are 5 scenes in Act 1\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Similarly, use the ",
              "type" : "text"
            },
            {
              "code" : "hasSuffix(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method to count the number of scenes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that take place in or around Capulet’s mansion and Friar Lawrence’s cell:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var mansionCount = 0",
            "var cellCount = 0",
            "for scene in romeoAndJuliet {",
            "    if scene.hasSuffix(\"Capulet's mansion\") {",
            "        mansionCount += 1",
            "    } else if scene.hasSuffix(\"Friar Lawrence's cell\") {",
            "        cellCount += 1",
            "    }",
            "}",
            "print(\"\\(mansionCount) mansion scenes; \\(cellCount) cell scenes\")",
            "\/\/ Prints \"6 mansion scenes; 2 cell scenes\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The ",
                  "type" : "text"
                },
                {
                  "code" : "hasPrefix(_:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "hasSuffix(_:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " methods",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "perform a character-by-character canonical equivalence comparison between",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the extended grapheme clusters in each string,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as described in ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-and-Character-Equality",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Unicode-Representations-of-Strings",
          "level" : 2,
          "text" : "Unicode Representations of Strings",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "When a Unicode string is written to a text file or some other storage,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the Unicode scalars in that string are encoded in one of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "several Unicode-defined ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "encoding forms",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each form encodes the string in small chunks known as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "code units",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These include the UTF-8 encoding form (which encodes a string as 8-bit code units),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the UTF-16 encoding form (which encodes a string as 16-bit code units),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the UTF-32 encoding form (which encodes a string as 32-bit code units).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift provides several different ways to access Unicode representations of strings.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can iterate over the string with a ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to access its individual ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " values as Unicode extended grapheme clusters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This process is described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Working-with-Characters",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Alternatively, access a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in one of three other Unicode-compliant representations:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A collection of UTF-8 code units (accessed with the string’s ",
                      "type" : "text"
                    },
                    {
                      "code" : "utf8",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " property)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A collection of UTF-16 code units (accessed with the string’s ",
                      "type" : "text"
                    },
                    {
                      "code" : "utf16",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " property)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A collection of 21-bit Unicode scalar values,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "equivalent to the string’s UTF-32 encoding form",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "(accessed with the string’s ",
                      "type" : "text"
                    },
                    {
                      "code" : "unicodeScalars",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " property)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Each example below shows a different representation of the following string,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is made up of the characters ",
              "type" : "text"
            },
            {
              "code" : "D",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "o",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "g",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "‼",
              "type" : "codeVoice"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "code" : "DOUBLE EXCLAMATION MARK",
              "type" : "codeVoice"
            },
            {
              "text" : ", or Unicode scalar ",
              "type" : "text"
            },
            {
              "code" : "U+203C",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the 🐶 character (",
              "type" : "text"
            },
            {
              "code" : "DOG FACE",
              "type" : "codeVoice"
            },
            {
              "text" : ", or Unicode scalar ",
              "type" : "text"
            },
            {
              "code" : "U+1F436",
              "type" : "codeVoice"
            },
            {
              "text" : "):",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let dogString = \"Dog‼🐶\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "UTF-8-Representation",
          "level" : 3,
          "text" : "UTF-8 Representation",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can access a UTF-8 representation of a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by iterating over its ",
              "type" : "text"
            },
            {
              "code" : "utf8",
              "type" : "codeVoice"
            },
            {
              "text" : " property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This property is of type ",
              "type" : "text"
            },
            {
              "code" : "String.UTF8View",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is a collection of unsigned 8-bit (",
              "type" : "text"
            },
            {
              "code" : "UInt8",
              "type" : "codeVoice"
            },
            {
              "text" : ") values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "one for each byte in the string’s UTF-8 representation:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "UTF8",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for codeUnit in dogString.utf8 {",
            "    print(\"\\(codeUnit) \", terminator: \"\")",
            "}",
            "print(\"\")",
            "\/\/ Prints \"68 111 103 226 128 188 240 159 144 182 \""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the example above, the first three decimal ",
              "type" : "text"
            },
            {
              "code" : "codeUnit",
              "type" : "codeVoice"
            },
            {
              "text" : " values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(",
              "type" : "text"
            },
            {
              "code" : "68",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "111",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "103",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "represent the characters ",
              "type" : "text"
            },
            {
              "code" : "D",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "o",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "g",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whose UTF-8 representation is the same as their ASCII representation.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The next three decimal ",
              "type" : "text"
            },
            {
              "code" : "codeUnit",
              "type" : "codeVoice"
            },
            {
              "text" : " values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(",
              "type" : "text"
            },
            {
              "code" : "226",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "128",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "188",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are a three-byte UTF-8 representation of the ",
              "type" : "text"
            },
            {
              "code" : "DOUBLE EXCLAMATION MARK",
              "type" : "codeVoice"
            },
            {
              "text" : " character.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The last four ",
              "type" : "text"
            },
            {
              "code" : "codeUnit",
              "type" : "codeVoice"
            },
            {
              "text" : " values (",
              "type" : "text"
            },
            {
              "code" : "240",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "159",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "144",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "182",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are a four-byte UTF-8 representation of the ",
              "type" : "text"
            },
            {
              "code" : "DOG FACE",
              "type" : "codeVoice"
            },
            {
              "text" : " character.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "UTF-16-Representation",
          "level" : 3,
          "text" : "UTF-16 Representation",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can access a UTF-16 representation of a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by iterating over its ",
              "type" : "text"
            },
            {
              "code" : "utf16",
              "type" : "codeVoice"
            },
            {
              "text" : " property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This property is of type ",
              "type" : "text"
            },
            {
              "code" : "String.UTF16View",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is a collection of unsigned 16-bit (",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : ") values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "one for each 16-bit code unit in the string’s UTF-16 representation:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "UTF16",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for codeUnit in dogString.utf16 {",
            "    print(\"\\(codeUnit) \", terminator: \"\")",
            "}",
            "print(\"\")",
            "\/\/ Prints \"68 111 103 8252 55357 56374 \""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Again, the first three ",
              "type" : "text"
            },
            {
              "code" : "codeUnit",
              "type" : "codeVoice"
            },
            {
              "text" : " values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(",
              "type" : "text"
            },
            {
              "code" : "68",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "111",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "103",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "represent the characters ",
              "type" : "text"
            },
            {
              "code" : "D",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "o",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "g",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whose UTF-16 code units have the same values as in the string’s UTF-8 representation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(because these Unicode scalars represent ASCII characters).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The fourth ",
              "type" : "text"
            },
            {
              "code" : "codeUnit",
              "type" : "codeVoice"
            },
            {
              "text" : " value (",
              "type" : "text"
            },
            {
              "code" : "8252",
              "type" : "codeVoice"
            },
            {
              "text" : ") is a decimal equivalent of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the hexadecimal value ",
              "type" : "text"
            },
            {
              "code" : "203C",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which represents the Unicode scalar ",
              "type" : "text"
            },
            {
              "code" : "U+203C",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for the ",
              "type" : "text"
            },
            {
              "code" : "DOUBLE EXCLAMATION MARK",
              "type" : "codeVoice"
            },
            {
              "text" : " character.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This character can be represented as a single code unit in UTF-16.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The fifth and sixth ",
              "type" : "text"
            },
            {
              "code" : "codeUnit",
              "type" : "codeVoice"
            },
            {
              "text" : " values (",
              "type" : "text"
            },
            {
              "code" : "55357",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "56374",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are a UTF-16 surrogate pair representation of the ",
              "type" : "text"
            },
            {
              "code" : "DOG FACE",
              "type" : "codeVoice"
            },
            {
              "text" : " character.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These values are a high-surrogate value of ",
              "type" : "text"
            },
            {
              "code" : "U+D83D",
              "type" : "codeVoice"
            },
            {
              "text" : " (decimal value ",
              "type" : "text"
            },
            {
              "code" : "55357",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a low-surrogate value of ",
              "type" : "text"
            },
            {
              "code" : "U+DC36",
              "type" : "codeVoice"
            },
            {
              "text" : " (decimal value ",
              "type" : "text"
            },
            {
              "code" : "56374",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Unicode-Scalar-Representation",
          "level" : 3,
          "text" : "Unicode Scalar Representation",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can access a Unicode scalar representation of a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by iterating over its ",
              "type" : "text"
            },
            {
              "code" : "unicodeScalars",
              "type" : "codeVoice"
            },
            {
              "text" : " property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This property is of type ",
              "type" : "text"
            },
            {
              "code" : "UnicodeScalarView",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is a collection of values of type ",
              "type" : "text"
            },
            {
              "code" : "UnicodeScalar",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Each ",
              "type" : "text"
            },
            {
              "code" : "UnicodeScalar",
              "type" : "codeVoice"
            },
            {
              "text" : " has a ",
              "type" : "text"
            },
            {
              "code" : "value",
              "type" : "codeVoice"
            },
            {
              "text" : " property that returns",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the scalar’s 21-bit value, represented within a ",
              "type" : "text"
            },
            {
              "code" : "UInt32",
              "type" : "codeVoice"
            },
            {
              "text" : " value:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "UnicodeScalar",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for scalar in dogString.unicodeScalars {",
            "    print(\"\\(scalar.value) \", terminator: \"\")",
            "}",
            "print(\"\")",
            "\/\/ Prints \"68 111 103 8252 128054 \""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "value",
              "type" : "codeVoice"
            },
            {
              "text" : " properties for the first three ",
              "type" : "text"
            },
            {
              "code" : "UnicodeScalar",
              "type" : "codeVoice"
            },
            {
              "text" : " values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(",
              "type" : "text"
            },
            {
              "code" : "68",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "111",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "103",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "once again represent the characters ",
              "type" : "text"
            },
            {
              "code" : "D",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "o",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "g",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The fourth ",
              "type" : "text"
            },
            {
              "code" : "codeUnit",
              "type" : "codeVoice"
            },
            {
              "text" : " value (",
              "type" : "text"
            },
            {
              "code" : "8252",
              "type" : "codeVoice"
            },
            {
              "text" : ") is again a decimal equivalent of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the hexadecimal value ",
              "type" : "text"
            },
            {
              "code" : "203C",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which represents the Unicode scalar ",
              "type" : "text"
            },
            {
              "code" : "U+203C",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for the ",
              "type" : "text"
            },
            {
              "code" : "DOUBLE EXCLAMATION MARK",
              "type" : "codeVoice"
            },
            {
              "text" : " character.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "value",
              "type" : "codeVoice"
            },
            {
              "text" : " property of the fifth and final ",
              "type" : "text"
            },
            {
              "code" : "UnicodeScalar",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "128054",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is a decimal equivalent of the hexadecimal value ",
              "type" : "text"
            },
            {
              "code" : "1F436",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which represents the Unicode scalar ",
              "type" : "text"
            },
            {
              "code" : "U+1F436",
              "type" : "codeVoice"
            },
            {
              "text" : " for the ",
              "type" : "text"
            },
            {
              "code" : "DOG FACE",
              "type" : "codeVoice"
            },
            {
              "text" : " character.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "As an alternative to querying their ",
              "type" : "text"
            },
            {
              "code" : "value",
              "type" : "codeVoice"
            },
            {
              "text" : " properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "each ",
              "type" : "text"
            },
            {
              "code" : "UnicodeScalar",
              "type" : "codeVoice"
            },
            {
              "text" : " value can also be used to construct a new ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as with string interpolation:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for scalar in dogString.unicodeScalars {",
            "    print(\"\\(scalar) \")",
            "}",
            "\/\/ D",
            "\/\/ o",
            "\/\/ g",
            "\/\/ ‼",
            "\/\/ 🐶"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/the-swift-programming-language\/stringsandcharacters"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"UTF16": {
  "alt" : null,
  "identifier" : "UTF16",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/UTF16@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/UTF16~dark@2x.png"
    }
  ]
},
"UTF8": {
  "alt" : null,
  "identifier" : "UTF8",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/UTF8@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/UTF8~dark@2x.png"
    }
  ]
},
"UnicodeScalar": {
  "alt" : null,
  "identifier" : "UnicodeScalar",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/UnicodeScalar@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/UnicodeScalar~dark@2x.png"
    }
  ]
},
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators#Comparison-Operators": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Comparison-Operators",
  "kind" : "section",
  "title" : "Comparison Operators",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/basicoperators#Comparison-Operators"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types",
  "kind" : "section",
  "title" : "Structures and Enumerations Are Value Types",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/classesandstructures#Structures-and-Enumerations-Are-Value-Types"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#For-In-Loops": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops",
  "kind" : "section",
  "title" : "For-In Loops",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow#For-In-Loops"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#String-and-Character-Equality": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-and-Character-Equality",
  "kind" : "section",
  "title" : "String and Character Equality",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/stringsandcharacters#String-and-Character-Equality"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#Unicode": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Unicode",
  "kind" : "section",
  "title" : "Unicode",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/stringsandcharacters#Unicode"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#Working-with-Characters": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Working-with-Characters",
  "kind" : "section",
  "title" : "Working with Characters",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/stringsandcharacters#Working-with-Characters"
},
"https://developer.apple.com/documentation/swift/string#2919514": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/string#2919514",
  "title" : "Bridging Between String and NSString",
  "titleInlineContent" : [
    {
      "text" : "Bridging Between String and NSString",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/string#2919514"
},
"https://developer.apple.com/documentation/swift/stringprotocol": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol",
  "title" : "StringProtocol",
  "titleInlineContent" : [
    {
      "code" : "StringProtocol",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol"
},
"https://developer.apple.com/documentation/swift/substring": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/substring",
  "title" : "Substring",
  "titleInlineContent" : [
    {
      "code" : "Substring",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/substring"
},
"multilineStringWhitespace": {
  "alt" : null,
  "identifier" : "multilineStringWhitespace",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/multilineStringWhitespace@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/multilineStringWhitespace~dark@2x.png"
    }
  ]
},
"stringSubstring": {
  "alt" : null,
  "identifier" : "stringSubstring",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/stringSubstring@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/stringSubstring~dark@2x.png"
    }
  ]
}
}
}