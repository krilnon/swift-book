{
  "abstract" : [
    {
      "text" : "Subclass to add or override functionality.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "The Swift Programming Language"
      }
    ],
    "title" : "Inheritance"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "text" : "A class can ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "inherit",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " methods, properties, and other characteristics",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from another class.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When one class inherits from another,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the inheriting class is known as a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "subclass",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the class it inherits from is known as its ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "superclass",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Inheritance is a fundamental behavior that differentiates classes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from other types in Swift.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Classes in Swift can call and access",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "methods, properties, and subscripts belonging to their superclass",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can provide their own overriding versions of those methods, properties, and subscripts",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to refine or modify their behavior.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift helps to ensure your overrides are correct",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by checking that the override definition has a matching superclass definition.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Classes can also add property observers to inherited properties",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in order to be notified when the value of a property changes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Property observers can be added to any property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "regardless of whether it was originally defined as a stored or computed property.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Defining-a-Base-Class",
          "level" : 2,
          "text" : "Defining a Base Class",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Any class that doesn’t inherit from another class is known as a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "base class",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Swift classes don’t inherit from a universal base class.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Classes you define without specifying a superclass",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "automatically become base classes for you to build upon.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below defines a base class called ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This base class defines a stored property called ",
              "type" : "text"
            },
            {
              "code" : "currentSpeed",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a default value of ",
              "type" : "text"
            },
            {
              "code" : "0.0",
              "type" : "codeVoice"
            },
            {
              "text" : " (inferring a property type of ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "currentSpeed",
              "type" : "codeVoice"
            },
            {
              "text" : " property’s value is used by",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a read-only computed ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " property called ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to create a description of the vehicle.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : " base class also defines a method called ",
              "type" : "text"
            },
            {
              "code" : "makeNoise",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This method doesn’t actually do anything for a base ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : " instance,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but will be customized by subclasses of ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : " later on:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class Vehicle {",
            "    var currentSpeed = 0.0",
            "    var description: String {",
            "        return \"traveling at \\(currentSpeed) miles per hour\"",
            "    }",
            "    func makeNoise() {",
            "        \/\/ do nothing - an arbitrary vehicle doesn't necessarily make a noise",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You create a new instance of ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : " with ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "initializer syntax",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is written as a type name followed by empty parentheses:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let someVehicle = Vehicle()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Having created a new ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : " instance,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can access its ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : " property to print",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a human-readable description of the vehicle’s current speed:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"Vehicle: \\(someVehicle.description)\")",
            "\/\/ Vehicle: traveling at 0.0 miles per hour"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : " class defines common characteristics for an arbitrary vehicle,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but isn’t much use in itself.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To make it more useful,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you need to refine it to describe more specific kinds of vehicles.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Subclassing",
          "level" : 2,
          "text" : "Subclassing",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Subclassing",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is the act of basing a new class on an existing class.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The subclass inherits characteristics from the existing class, which you can then refine.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can also add new characteristics to the subclass.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To indicate that a subclass has a superclass,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "write the subclass name before the superclass name,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separated by a colon:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class SomeSubclass: SomeSuperclass {",
            "    \/\/ subclass definition goes here",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following example defines a subclass called ",
              "type" : "text"
            },
            {
              "code" : "Bicycle",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a superclass of ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class Bicycle: Vehicle {",
            "    var hasBasket = false",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The new ",
              "type" : "text"
            },
            {
              "code" : "Bicycle",
              "type" : "codeVoice"
            },
            {
              "text" : " class automatically gains all of the characteristics of ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as its ",
              "type" : "text"
            },
            {
              "code" : "currentSpeed",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : " properties and its ",
              "type" : "text"
            },
            {
              "code" : "makeNoise()",
              "type" : "codeVoice"
            },
            {
              "text" : " method.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In addition to the characteristics it inherits,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "Bicycle",
              "type" : "codeVoice"
            },
            {
              "text" : " class defines a new stored property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "hasBasket",
              "type" : "codeVoice"
            },
            {
              "text" : ", with a default value of ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(inferring a type of ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " for the property).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "By default, any new ",
              "type" : "text"
            },
            {
              "code" : "Bicycle",
              "type" : "codeVoice"
            },
            {
              "text" : " instance you create will not have a basket.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can set the ",
              "type" : "text"
            },
            {
              "code" : "hasBasket",
              "type" : "codeVoice"
            },
            {
              "text" : " property to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " for a particular ",
              "type" : "text"
            },
            {
              "code" : "Bicycle",
              "type" : "codeVoice"
            },
            {
              "text" : " instance",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after that instance is created:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let bicycle = Bicycle()",
            "bicycle.hasBasket = true"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also modify the inherited ",
              "type" : "text"
            },
            {
              "code" : "currentSpeed",
              "type" : "codeVoice"
            },
            {
              "text" : " property of a ",
              "type" : "text"
            },
            {
              "code" : "Bicycle",
              "type" : "codeVoice"
            },
            {
              "text" : " instance,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and query the instance’s inherited ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : " property:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "bicycle.currentSpeed = 15.0",
            "print(\"Bicycle: \\(bicycle.description)\")",
            "\/\/ Bicycle: traveling at 15.0 miles per hour"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Subclasses can themselves be subclassed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The next example creates a subclass of ",
              "type" : "text"
            },
            {
              "code" : "Bicycle",
              "type" : "codeVoice"
            },
            {
              "text" : " for a two-seater bicycle",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "known as a “tandem”:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class Tandem: Bicycle {",
            "    var currentNumberOfPassengers = 0",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "code" : "Tandem",
              "type" : "codeVoice"
            },
            {
              "text" : " inherits all of the properties and methods from ",
              "type" : "text"
            },
            {
              "code" : "Bicycle",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which in turn inherits all of the properties and methods from ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Tandem",
              "type" : "codeVoice"
            },
            {
              "text" : " subclass also adds a new stored property called ",
              "type" : "text"
            },
            {
              "code" : "currentNumberOfPassengers",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a default value of ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you create an instance of ",
              "type" : "text"
            },
            {
              "code" : "Tandem",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can work with any of its new and inherited properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and query the read-only ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : " property it inherits from ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let tandem = Tandem()",
            "tandem.hasBasket = true",
            "tandem.currentNumberOfPassengers = 2",
            "tandem.currentSpeed = 22.0",
            "print(\"Tandem: \\(tandem.description)\")",
            "\/\/ Tandem: traveling at 22.0 miles per hour"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Overriding",
          "level" : 2,
          "text" : "Overriding",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A subclass can provide its own custom implementation of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an instance method, type method, instance property, type property, or subscript",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that it would otherwise inherit from a superclass.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is known as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "overriding",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To override a characteristic that would otherwise be inherited,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you prefix your overriding definition with the ",
              "type" : "text"
            },
            {
              "code" : "override",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Doing so clarifies that you intend to provide an override",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and haven’t provided a matching definition by mistake.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Overriding by accident can cause unexpected behavior,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and any overrides without the ",
              "type" : "text"
            },
            {
              "code" : "override",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword are",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "diagnosed as an error when your code is compiled.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "override",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword also prompts the Swift compiler",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to check that your overriding class’s superclass (or one of its parents)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "has a declaration that matches the one you provided for the override.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This check ensures that your overriding definition is correct.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Accessing-Superclass-Methods-Properties-and-Subscripts",
          "level" : 3,
          "text" : "Accessing Superclass Methods, Properties, and Subscripts",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you provide a method, property, or subscript override for a subclass,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s sometimes useful to use the existing superclass implementation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as part of your override.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, you can refine the behavior of that existing implementation,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or store a modified value in an existing inherited variable.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Where this is appropriate,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you access the superclass version of a method, property, or subscript",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by using the ",
              "type" : "text"
            },
            {
              "code" : "super",
              "type" : "codeVoice"
            },
            {
              "text" : " prefix:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "An overridden method named ",
                      "type" : "text"
                    },
                    {
                      "code" : "someMethod()",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " can call the superclass version of ",
                      "type" : "text"
                    },
                    {
                      "code" : "someMethod()",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "by calling ",
                      "type" : "text"
                    },
                    {
                      "code" : "super.someMethod()",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " within the overriding method implementation.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "An overridden property called ",
                      "type" : "text"
                    },
                    {
                      "code" : "someProperty",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " can access the superclass version of ",
                      "type" : "text"
                    },
                    {
                      "code" : "someProperty",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "as ",
                      "type" : "text"
                    },
                    {
                      "code" : "super.someProperty",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " within the overriding getter or setter implementation.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "An overridden subscript for ",
                      "type" : "text"
                    },
                    {
                      "code" : "someIndex",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " can access the superclass version of the same subscript",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "as ",
                      "type" : "text"
                    },
                    {
                      "code" : "super[someIndex]",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " from within the overriding subscript implementation.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "anchor" : "Overriding-Methods",
          "level" : 3,
          "text" : "Overriding Methods",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can override an inherited instance or type method",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to provide a tailored or alternative implementation of the method within your subclass.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following example defines a new subclass of ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : " called ",
              "type" : "text"
            },
            {
              "code" : "Train",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which overrides the ",
              "type" : "text"
            },
            {
              "code" : "makeNoise()",
              "type" : "codeVoice"
            },
            {
              "text" : " method that ",
              "type" : "text"
            },
            {
              "code" : "Train",
              "type" : "codeVoice"
            },
            {
              "text" : " inherits from ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class Train: Vehicle {",
            "    override func makeNoise() {",
            "        print(\"Choo Choo\")",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you create a new instance of ",
              "type" : "text"
            },
            {
              "code" : "Train",
              "type" : "codeVoice"
            },
            {
              "text" : " and call its ",
              "type" : "text"
            },
            {
              "code" : "makeNoise()",
              "type" : "codeVoice"
            },
            {
              "text" : " method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can see that the ",
              "type" : "text"
            },
            {
              "code" : "Train",
              "type" : "codeVoice"
            },
            {
              "text" : " subclass version of the method is called:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let train = Train()",
            "train.makeNoise()",
            "\/\/ Prints \"Choo Choo\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Overriding-Properties",
          "level" : 3,
          "text" : "Overriding Properties",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can override an inherited instance or type property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to provide your own custom getter and setter for that property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or to add property observers to enable the overriding property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to observe when the underlying property value changes.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Overriding-Property-Getters-and-Setters",
          "level" : 4,
          "text" : "Overriding Property Getters and Setters",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can provide a custom getter (and setter, if appropriate)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to override ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "any",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " inherited property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "regardless of whether the inherited property is implemented as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a stored or computed property at source.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The stored or computed nature of an inherited property isn’t known by a subclass —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it only knows that the inherited property has a certain name and type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You must always state both the name and the type of the property you are overriding,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to enable the compiler to check that your override matches",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a superclass property with the same name and type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can present an inherited read-only property as a read-write property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by providing both a getter and a setter in your subclass property override.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can’t, however, present an inherited read-write property as a read-only property.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "If you provide a setter as part of a property override,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you must also provide a getter for that override.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If you don’t want to modify the inherited property’s value within the overriding getter,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you can simply pass through the inherited value",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "by returning ",
                  "type" : "text"
                },
                {
                  "code" : "super.someProperty",
                  "type" : "codeVoice"
                },
                {
                  "text" : " from the getter,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "where ",
                  "type" : "text"
                },
                {
                  "code" : "someProperty",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is the name of the property you are overriding.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following example defines a new class called ",
              "type" : "text"
            },
            {
              "code" : "Car",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is a subclass of ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Car",
              "type" : "codeVoice"
            },
            {
              "text" : " class introduces a new stored property called ",
              "type" : "text"
            },
            {
              "code" : "gear",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a default integer value of ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Car",
              "type" : "codeVoice"
            },
            {
              "text" : " class also overrides the ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : " property it inherits from ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to provide a custom description that includes the current gear:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class Car: Vehicle {",
            "    var gear = 1",
            "    override var description: String {",
            "        return super.description + \" in gear \\(gear)\"",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The override of the ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : " property starts by calling ",
              "type" : "text"
            },
            {
              "code" : "super.description",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which returns the ",
              "type" : "text"
            },
            {
              "code" : "Vehicle",
              "type" : "codeVoice"
            },
            {
              "text" : " class’s ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : " property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Car",
              "type" : "codeVoice"
            },
            {
              "text" : " class’s version of ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : " then adds some extra text onto",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the end of this description to provide information about the current gear.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you create an instance of the ",
              "type" : "text"
            },
            {
              "code" : "Car",
              "type" : "codeVoice"
            },
            {
              "text" : " class",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and set its ",
              "type" : "text"
            },
            {
              "code" : "gear",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "currentSpeed",
              "type" : "codeVoice"
            },
            {
              "text" : " properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can see that its ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : " property returns",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the tailored description defined within the ",
              "type" : "text"
            },
            {
              "code" : "Car",
              "type" : "codeVoice"
            },
            {
              "text" : " class:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let car = Car()",
            "car.currentSpeed = 25.0",
            "car.gear = 3",
            "print(\"Car: \\(car.description)\")",
            "\/\/ Car: traveling at 25.0 miles per hour in gear 3"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Overriding-Property-Observers",
          "level" : 4,
          "text" : "Overriding Property Observers",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use property overriding to add property observers to an inherited property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This enables you to be notified when the value of an inherited property changes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "regardless of how that property was originally implemented.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more information on property observers, see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "You can’t add property observers to",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "inherited constant stored properties or inherited read-only computed properties.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The value of these properties can’t be set,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and so it isn’t appropriate to provide a ",
                  "type" : "text"
                },
                {
                  "code" : "willSet",
                  "type" : "codeVoice"
                },
                {
                  "text" : " or ",
                  "type" : "text"
                },
                {
                  "code" : "didSet",
                  "type" : "codeVoice"
                },
                {
                  "text" : " implementation",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as part of an override.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Note also that you can’t provide both",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "an overriding setter and an overriding property observer for the same property.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If you want to observe changes to a property’s value,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and you are already providing a custom setter for that property,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you can simply observe any value changes from within the custom setter.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following example defines a new class called ",
              "type" : "text"
            },
            {
              "code" : "AutomaticCar",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is a subclass of ",
              "type" : "text"
            },
            {
              "code" : "Car",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "AutomaticCar",
              "type" : "codeVoice"
            },
            {
              "text" : " class represents a car with an automatic gearbox,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which automatically selects an appropriate gear to use based on the current speed:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class AutomaticCar: Car {",
            "    override var currentSpeed: Double {",
            "        didSet {",
            "            gear = Int(currentSpeed \/ 10.0) + 1",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Whenever you set the ",
              "type" : "text"
            },
            {
              "code" : "currentSpeed",
              "type" : "codeVoice"
            },
            {
              "text" : " property of an ",
              "type" : "text"
            },
            {
              "code" : "AutomaticCar",
              "type" : "codeVoice"
            },
            {
              "text" : " instance,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the property’s ",
              "type" : "text"
            },
            {
              "code" : "didSet",
              "type" : "codeVoice"
            },
            {
              "text" : " observer sets the instance’s ",
              "type" : "text"
            },
            {
              "code" : "gear",
              "type" : "codeVoice"
            },
            {
              "text" : " property to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an appropriate choice of gear for the new speed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Specifically, the property observer chooses a gear that’s",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the new ",
              "type" : "text"
            },
            {
              "code" : "currentSpeed",
              "type" : "codeVoice"
            },
            {
              "text" : " value divided by ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "rounded down to the nearest integer, plus ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A speed of ",
              "type" : "text"
            },
            {
              "code" : "35.0",
              "type" : "codeVoice"
            },
            {
              "text" : " produces a gear of ",
              "type" : "text"
            },
            {
              "code" : "4",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let automatic = AutomaticCar()",
            "automatic.currentSpeed = 35.0",
            "print(\"AutomaticCar: \\(automatic.description)\")",
            "\/\/ AutomaticCar: traveling at 35.0 miles per hour in gear 4"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Preventing-Overrides",
          "level" : 2,
          "text" : "Preventing Overrides",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can prevent a method, property, or subscript from being overridden",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by marking it as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "final",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Do this by writing the ",
              "type" : "text"
            },
            {
              "code" : "final",
              "type" : "codeVoice"
            },
            {
              "text" : " modifier before",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the method, property, or subscript’s introducer keyword",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(such as ",
              "type" : "text"
            },
            {
              "code" : "final var",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "final func",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "final class func",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "final subscript",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Any attempt to override a final method, property, or subscript in a subclass",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is reported as a compile-time error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Methods, properties, or subscripts that you add to a class in an extension",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can also be marked as final within the extension’s definition.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can mark an entire class as final by writing the ",
              "type" : "text"
            },
            {
              "code" : "final",
              "type" : "codeVoice"
            },
            {
              "text" : " modifier",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "before the ",
              "type" : "text"
            },
            {
              "code" : "class",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword in its class definition (",
              "type" : "text"
            },
            {
              "code" : "final class",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Any attempt to subclass a final class is reported as a compile-time error.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/the-swift-programming-language\/inheritance"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers",
  "kind" : "section",
  "title" : "Property Observers",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/properties#Property-Observers"
}
}
}