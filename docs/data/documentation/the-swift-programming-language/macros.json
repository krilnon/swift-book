{
  "abstract" : [
    {
      "text" : "Use macros to generate code at compile time.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros"
  },
  "kind" : "article",
  "metadata" : {
    "title" : "Macros"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "text" : "Macros transform your source code when you compile it,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "letting you avoid writing repetitive code by hand.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "During compilation,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift expands any macros in your code before building your code as usual.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "macro-expansion",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Expanding a macro is always an additive operation:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Macros add new code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but they never delete or modify existing code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Both the input to a macro and the output of macro expansion",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are checked to ensure they’re syntactically valid Swift code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Likewise, the values you pass to a macro",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the values in code generated by a macro",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are checked to ensure they have the correct types.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In addition,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if the macro’s implementation encounters an error when expanding that macro,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler treats this as a compilation error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These guarantees make it easier to reason about code that uses macros,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and they make it easier to identify issues",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "like using a macro incorrectly",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or a macro implementation that has a bug.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift has two kinds of macros:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "inlineContent" : [
                        {
                          "text" : "Freestanding macros",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " appear on their own,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "without being attached to a declaration.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "inlineContent" : [
                        {
                          "text" : "Attached macros",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " modify the declaration that they’re attached to.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "You call attached and freestanding macros slightly differently,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but they both follow the same model for macro expansion,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and you implement them both using the same approach.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The following sections describe both kinds of macros in more detail.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Freestanding-Macros",
          "level" : 2,
          "text" : "Freestanding Macros",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "To call a freestanding macro,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you write a number sign (",
              "type" : "text"
            },
            {
              "code" : "#",
              "type" : "codeVoice"
            },
            {
              "text" : ") before its name,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and you write any arguments to the macro in parentheses after its name.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func myFunction() {",
            "    print(\"Currently running \\(#function)\")",
            "    #warning(\"Something's wrong\")",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the first line,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "#function",
              "type" : "codeVoice"
            },
            {
              "text" : " calls the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/function",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " macro from the Swift standard library.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you compile this code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift calls that macro’s implementation,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which replaces ",
              "type" : "text"
            },
            {
              "code" : "#function",
              "type" : "codeVoice"
            },
            {
              "text" : " with the name of the current function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you run this code and call ",
              "type" : "text"
            },
            {
              "code" : "myFunction()",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it prints “Currently running myFunction()”.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the second line,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "#warning",
              "type" : "codeVoice"
            },
            {
              "text" : " calls the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " macro from the Swift standard library",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to produce a custom compile-time warning.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Freestanding macros can produce a value, like ",
              "type" : "text"
            },
            {
              "code" : "#function",
              "type" : "codeVoice"
            },
            {
              "text" : " does,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or they can perform an action at compile time, like ",
              "type" : "text"
            },
            {
              "code" : "#warning",
              "type" : "codeVoice"
            },
            {
              "text" : " does.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Attached-Macros",
          "level" : 2,
          "text" : "Attached Macros",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "To call an attached macro,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you write an at sign (",
              "type" : "text"
            },
            {
              "code" : "@",
              "type" : "codeVoice"
            },
            {
              "text" : ") before its name,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and you write any arguments to the macro in parentheses after its name.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Attached macros modify the declaration that they’re attached to.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "They add code to that declaration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "like defining a new method or adding conformance to a protocol.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, consider the following code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that doesn’t use macros:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct SundaeToppings: OptionSet {",
            "    let rawValue: Int",
            "    static let nuts = SundaeToppings(rawValue: 1 << 0)",
            "    static let cherry = SundaeToppings(rawValue: 1 << 1)",
            "    static let fudge = SundaeToppings(rawValue: 1 << 2)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "each of the options in the ",
              "type" : "text"
            },
            {
              "code" : "SundaeToppings",
              "type" : "codeVoice"
            },
            {
              "text" : " option set",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "includes a call to the initializer,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is repetitive and manual.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It would be easy to make a mistake when adding a new option,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "like typing the wrong number at the end of the line.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s a version of this code that uses a macro instead:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@OptionSet<Int>",
            "struct SundaeToppings {",
            "    private enum Options: Int {",
            "        case nuts",
            "        case cherry",
            "        case fudge",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This version of ",
              "type" : "text"
            },
            {
              "code" : "SundaeToppings",
              "type" : "codeVoice"
            },
            {
              "text" : " calls an ",
              "type" : "text"
            },
            {
              "code" : "@OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : " macro.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The macro reads the list of cases in the private enumeration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "generates the list of constants for each option,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and adds a conformance to the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/optionset-swift.protocol",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For comparison,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "here’s what the expanded version of the ",
              "type" : "text"
            },
            {
              "code" : "@OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : " macro looks like.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You don’t write this code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and you would see it only if you specifically asked Swift",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to show the macro’s expansion.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct SundaeToppings {",
            "    private enum Options: Int {",
            "        case nuts",
            "        case cherry",
            "        case fudge",
            "    }",
            "",
            "    typealias RawValue = Int",
            "    var rawValue: RawValue",
            "    init() { self.rawValue = 0 }",
            "    init(rawValue: RawValue) { self.rawValue = rawValue }",
            "    static let nuts: Self = Self(rawValue: 1 << Options.nuts.rawValue)",
            "    static let cherry: Self = Self(rawValue: 1 << Options.cherry.rawValue)",
            "    static let fudge: Self = Self(rawValue: 1 << Options.fudge.rawValue)",
            "}",
            "extension SundaeToppings: OptionSet { }"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "All of the code after the private enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "comes from the ",
              "type" : "text"
            },
            {
              "code" : "@OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : " macro.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The version of ",
              "type" : "text"
            },
            {
              "code" : "SundaeToppings",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that uses a macro to generate all of the static variables",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is easier to read and easier to maintain",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "than the manually coded version, earlier.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Macro-Declarations",
          "level" : 2,
          "text" : "Macro Declarations",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In most Swift code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when you implement a symbol, like a function or type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "there’s no separate declaration.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, for macros, the declaration and implementation are separate.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A macro’s declaration contains its name,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the parameters it takes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "where it can be used,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and what kind of code it generates.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A macro’s implementation contains the code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that expands the macro by generating Swift code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You introduce a macro declaration with the ",
              "type" : "text"
            },
            {
              "code" : "macro",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "here’s part of the declaration for",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "@OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : " macro used in the previous example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "public macro OptionSet<RawType>() =",
            "        #externalMacro(module: \"SwiftMacros\", type: \"OptionSetMacro\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The first line",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "specifies the macro’s name and its arguments —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the name is ",
              "type" : "text"
            },
            {
              "code" : "OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : ", and it doesn’t take any arguments.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The second line",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "uses the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/externalmacro(module:type:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " macro from the Swift standard library",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to tell Swift where the macro’s implementation is located.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In this case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "SwiftMacros",
              "type" : "codeVoice"
            },
            {
              "text" : " module",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "contains a type named ",
              "type" : "text"
            },
            {
              "code" : "OptionSetMacro",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which implements the ",
              "type" : "text"
            },
            {
              "code" : "@OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : " macro.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : " is an attached macro,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "its name uses upper camel case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "like the names for structures and classes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Freestanding macros have lower camel case names,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "like the names for variables and functions.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Macros are always declared as ",
                  "type" : "text"
                },
                {
                  "code" : "public",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Because the code that declares a macro",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "is in a different module from code that uses that macro,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "there isn’t anywhere you could apply a non-public macro.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "A macro declaration defines the macro’s ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "roles",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the places in source code where that macro can be called,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the kinds of code the macro can generate.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Every macro has one or more roles,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which you write as part of the attributes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "at the beginning of the macro declaration.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s a bit more of the declaration for ",
              "type" : "text"
            },
            {
              "code" : "@OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "including the attributes for its roles:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@attached(member)",
            "@attached(conformance)",
            "public macro OptionSet<RawType>() =",
            "        #externalMacro(module: \"SwiftMacros\", type: \"OptionSetMacro\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "@attached",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute appears twice in this declaration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "once for each macro role.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The first use, ",
              "type" : "text"
            },
            {
              "code" : "@attached(member)",
              "type" : "codeVoice"
            },
            {
              "text" : ", indicates that the macro",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "adds new members to the type you apply it to.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "@OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : " macro adds an ",
              "type" : "text"
            },
            {
              "code" : "init(rawValue:)",
              "type" : "codeVoice"
            },
            {
              "text" : " initializer",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that’s required by the ",
              "type" : "text"
            },
            {
              "code" : "OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as well as some additional members.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The second use, ",
              "type" : "text"
            },
            {
              "code" : "@attached(conformance)",
              "type" : "codeVoice"
            },
            {
              "text" : ", tells you that ",
              "type" : "text"
            },
            {
              "code" : "@OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "adds one or more protocol conformances.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "@OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : " macro",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "extends the type that you apply the macro to,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to add conformance to the ",
              "type" : "text"
            },
            {
              "code" : "OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For a freestanding macro,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you write the ",
              "type" : "text"
            },
            {
              "code" : "@freestanding",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute to specify its role:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@freestanding(expression)",
            "public macro line<T: ExpressibleByIntegerLiteral>() -> T =",
            "        \/* ... location of the macro implementation... *\/"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "#line",
              "type" : "codeVoice"
            },
            {
              "text" : " macro above has the ",
              "type" : "text"
            },
            {
              "code" : "expression",
              "type" : "codeVoice"
            },
            {
              "text" : " role.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An expression macro produces a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or performs a compile-time action like generating a warning.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In addition to the macro’s role,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a macro’s declaration provides information about",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the names of the symbols that the macro generates.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When a macro declaration provides a list of names,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s guaranteed to produce only declarations that use those names,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which helps you understand and debug the generated code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s the full declaration of ",
              "type" : "text"
            },
            {
              "code" : "@OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@attached(member, names: named(RawValue), named(rawValue),",
            "        named(`init`), arbitrary)",
            "@attached(conformance)",
            "public macro OptionSet<RawType>() =",
            "        #externalMacro(module: \"SwiftMacros\", type: \"OptionSetMacro\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the declaration above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "@attached(member)",
              "type" : "codeVoice"
            },
            {
              "text" : " macro includes arguments after the ",
              "type" : "text"
            },
            {
              "code" : "named:",
              "type" : "codeVoice"
            },
            {
              "text" : " label",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for each of the symbols that the ",
              "type" : "text"
            },
            {
              "code" : "@OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : " macro generates.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The macro adds declarations for symbols named",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "RawValue",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "rawValue",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "init",
              "type" : "codeVoice"
            },
            {
              "text" : " —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because those names are known ahead of time,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the macro declaration lists them explicitly.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The macro declaration also includes ",
              "type" : "text"
            },
            {
              "code" : "arbitrary",
              "type" : "codeVoice"
            },
            {
              "text" : " after the list of names,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "allowing the macro to generate declarations",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whose names aren’t known until you use the macro.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when the ",
              "type" : "text"
            },
            {
              "code" : "@OptionSet",
              "type" : "codeVoice"
            },
            {
              "text" : " macro is applied to the ",
              "type" : "text"
            },
            {
              "code" : "SundaeToppings",
              "type" : "codeVoice"
            },
            {
              "text" : " above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it generates type properties that correspond to the enumeration cases,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "nuts",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "cherry",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "fudge",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "including a full list of macro roles,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#attached",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#freestanding",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Macro-Expansion",
          "level" : 2,
          "text" : "Macro Expansion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "When building Swift code that uses macros,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler calls the macros’ implementation to expand them.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "macro-expansion-full",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Specifically, Swift expands macros in the following way:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The compiler reads the code,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "creating an in-memory representation of the syntax.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The compiler sends part of the in-memory representation",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "to the macro implementation,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "which expands the macro.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The compiler replaces the macro call with its expanded form.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The compiler continues with compilation,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "using the expanded source code.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "orderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "To go through the specific steps, consider the following:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let magicNumber = #fourCharacterCode(\"ABCD\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "#fourCharacterCode",
              "type" : "codeVoice"
            },
            {
              "text" : " macro takes a string that’s four characters long",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and returns an unsigned 32-bit integer",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that corresponds to the ASCII values in the string joined together.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Some file formats use integers like this to identify data",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because they’re compact but still readable in a debugger.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros#Implementing-a-Macro",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " section below",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "shows how to implement this macro.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To expand the macros in the code above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler reads the Swift file",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and creates an in-memory representation of that code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "known an as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "abstract syntax tree",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ", or AST.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The AST makes the code’s structure explicit,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which makes it easier to write code that interacts with that structure —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "like a compiler or a macro implementation.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s a representation of the AST for the code above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "slightly simplified by omitting some extra detail:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "macro-ast-original",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The diagram above shows how the structure of this code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is represented in memory.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each element in the AST",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "corresponds to a part of the source code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The “Constant declaration” AST element",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "has two child elements under it,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which represent the two parts of a constant declaration:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "its name and its value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The “Macro call” element has child elements",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that represent the macro’s name",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the list of arguments being passed to the macro.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "As part of constructing this AST,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler checks that the source code is valid Swift.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, ",
              "type" : "text"
            },
            {
              "code" : "#fourCharacterCode",
              "type" : "codeVoice"
            },
            {
              "text" : " takes a single argument,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which must be a string.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you tried to pass an integer argument,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or forgot the quotation mark (",
              "type" : "text"
            },
            {
              "code" : "\"",
              "type" : "codeVoice"
            },
            {
              "text" : ") at the end of the string literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you’d get an error at this point in the process.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The compiler finds the places in the code where you call a macro,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and loads the external binary that implements those macros.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For each macro call,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler passes part of the AST to that macro’s implementation.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s a representation of that partial AST:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "macro-ast-input",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The implementation of the ",
              "type" : "text"
            },
            {
              "code" : "#fourCharacterCode",
              "type" : "codeVoice"
            },
            {
              "text" : " macro",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "reads this partial AST as its input when expanding the macro.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A macro’s implementation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "operates only on the partial AST that it receives as its input,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "meaning a macro always expands the same way",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "regardless of what code comes before and after it.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This limitation helps make macro expansion easier to understand,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and helps your code build faster",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because Swift can avoid expanding macros that haven’t changed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift helps macro authors avoid accidentally reading other input",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by restricting the code that implements macros:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The AST passed to a macro implementation",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "contains only the AST elements that represent the macro,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "not any of the code that comes before or after it.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The macro implementation runs in a sandboxed environment",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "that prevents it from accessing the file system or the network.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "In addition to these safeguards,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the macro’s author is responsible for not reading or modifying anything",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "outside of the macro’s inputs.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, a macro’s expansion must not depend on the current time of day.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The implementation of ",
              "type" : "text"
            },
            {
              "code" : "#fourCharacterCode",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "generates a new AST containing the expanded code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s what that code returns to the compiler:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "macro-ast-output",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When the compiler receives this expansion,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it replaces the AST element that contains the macro call",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the element that contains the macro’s expansion.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "After macro expansion,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler checks again to ensure",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the program is still syntactically valid Swift",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and all the types are correct.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "That produces a final AST that can be compiled as usual:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "macro-ast-result",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This AST corresponds to Swift code like this:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let magicNumber = 1145258561"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example, the input source code has only one macro,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but a real program could have several instances of the same macro",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and several calls to different macros.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The compiler expands macros one at a time.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If one macro appears inside another,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the outer macro is expanded first —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this lets the outer macro modify the inner macro before it’s expanded.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Implementing-a-Macro",
          "level" : 2,
          "text" : "Implementing a Macro",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "To implement a macro, you make two components:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A type that performs the macro expansion,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a library that declares the macro to expose it as API.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These parts are built separately from code that uses the macro,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even if you’re developing the macro and its clients together,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because the macro implementation runs",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as part of building the macro’s clients.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To create a new macro using Swift Package Manager,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "run ",
              "type" : "text"
            },
            {
              "code" : "swift package init --type macro",
              "type" : "codeVoice"
            },
            {
              "text" : " —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this creates several files,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "including a template for a macro implementation and declaration.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To add macros to an existing project,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "add a target for the macro implementation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a target for the macro library.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can add something like the following to your ",
              "type" : "text"
            },
            {
              "code" : "Package.swift",
              "type" : "codeVoice"
            },
            {
              "text" : " file,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "changing the names to match your project:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "targets: [",
            "    \/\/ Macro implementation that performs the source transformations.",
            "    .macro(",
            "        name: \"MyProjectMacros\",",
            "        dependencies: [",
            "            .product(name: \"SwiftSyntaxMacros\", package: \"swift-syntax\"),",
            "            .product(name: \"SwiftCompilerPlugin\", package: \"swift-syntax\")",
            "        ]",
            "    ),",
            "",
            "    \/\/ Library that exposes a macro as part of its API.",
            "    .target(name: \"MyProject\", dependencies: [\"MyProjectMacros\"]),",
            "]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The code above defines two targets:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "MyProjectMacros",
              "type" : "codeVoice"
            },
            {
              "text" : " contains the implementation of the macros,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "code" : "MyProject",
              "type" : "codeVoice"
            },
            {
              "text" : " makes those macros available.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The implementation of a macro",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "uses the ",
              "type" : "text"
            },
            {
              "identifier" : "http:\/\/github.com\/apple\/swift-syntax\/",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " module to interact with Swift code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in a structured way, using an AST.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you created a new macro package with Swift Package Manager,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the generated ",
              "type" : "text"
            },
            {
              "code" : "Package.swift",
              "type" : "codeVoice"
            },
            {
              "text" : " file",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "automatically includes a dependency on SwiftSyntax.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you’re adding macros to an existing project,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "add a dependency on SwiftSyntax in your ",
              "type" : "text"
            },
            {
              "code" : "Package.swift",
              "type" : "codeVoice"
            },
            {
              "text" : " file:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "dependencies: [",
            "    .package(url: \"https:\/\/github.com\/apple\/swift-syntax.git\", from: \"some-tag\"),",
            "],"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Replace the ",
              "type" : "text"
            },
            {
              "code" : "some-tag",
              "type" : "codeVoice"
            },
            {
              "text" : " placeholder in the code above",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the Git tag for the version of SwiftSyntax you want to use.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Depending on your macro’s role,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "there’s a corresponding protocol from SwiftSystem",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that the macro implementation conforms to.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "consider ",
              "type" : "text"
            },
            {
              "code" : "#fourCharacterCode",
              "type" : "codeVoice"
            },
            {
              "text" : " from the previous section.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s a structure that implements that macro:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "public struct FourCharacterCode: ExpressionMacro {",
            "    public static func expansion(",
            "        of node: some FreestandingMacroExpansionSyntax,",
            "        in context: some MacroExpansionContext",
            "    ) throws -> ExprSyntax {",
            "        guard let argument = node.argumentList.first?.expression,",
            "              let segments = argument.as(StringLiteralExprSyntax.self)?.segments,",
            "              segments.count == 1,",
            "              case .stringSegment(let literalSegment)? = segments.first",
            "        else {",
            "            throw CustomError.message(\"Need a static string\")",
            "        }",
            "",
            "        let string = literalSegment.content.text",
            "        guard let result = fourCharacterCode(for: string) else {",
            "            throw CustomError.message(\"Invalid four-character code\")",
            "        }",
            "",
            "        return \"\\(raw: result)\"",
            "    }",
            "}",
            "",
            "private func fourCharacterCode(for characters: String) -> UInt32? {",
            "    guard characters.count == 4 else { return nil }",
            "",
            "    var result: UInt32 = 0",
            "    for character in characters {",
            "        result = result << 8",
            "        guard let asciiValue = character.asciiValue else { return nil }",
            "        result += UInt32(asciiValue)",
            "    }",
            "    return result.bigEndian",
            "}",
            "enum CustomError: Error { case message(String) }"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "#fourCharacterCode",
              "type" : "codeVoice"
            },
            {
              "text" : " macro",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is a freestanding macro that produces an expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so the ",
              "type" : "text"
            },
            {
              "code" : "FourCharacterCode",
              "type" : "codeVoice"
            },
            {
              "text" : " type that implements it",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "conforms to the ",
              "type" : "text"
            },
            {
              "code" : "ExpressionMacro",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "ExpressionMacro",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol has one requirement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a ",
              "type" : "text"
            },
            {
              "code" : "expansion(of:in:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method that expands the AST.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For the list of macro roles and their corresponding SwiftSystem protocols,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#attached",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#freestanding",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes",
              "isActive" : true,
              "type" : "reference"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To expand the ",
              "type" : "text"
            },
            {
              "code" : "#fourCharacterCode",
              "type" : "codeVoice"
            },
            {
              "text" : " macro,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift sends the AST for the code that uses this macro",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the library that contains the macro implementation.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Inside the library, Swift calls ",
              "type" : "text"
            },
            {
              "code" : "FourCharacterCode.expansion(of:in:)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "passing in the AST and the context as arguments to the method.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The implementation of ",
              "type" : "text"
            },
            {
              "code" : "expansion(of:in:)",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "finds the string that was passed as an argument to ",
              "type" : "text"
            },
            {
              "code" : "#fourCharacterCode",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and calculates the corresponding integer literal value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the first ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " block extracts the string literal from the AST,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "assigning that AST element to ",
              "type" : "text"
            },
            {
              "code" : "literalSegment",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The second ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : " block",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "calls the private ",
              "type" : "text"
            },
            {
              "code" : "FourCharacterCode(for:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Both of these blocks throw an error if the macro is used incorrectly —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the error message becomes a compiler error",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "at the malformed call site.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if you try to call the macro as ",
              "type" : "text"
            },
            {
              "code" : "#fourCharacterCode(\"AB\" + \"CD\")",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler shows the error “Need a static string”.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "expansion(of:in:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method returns an instance of ",
              "type" : "text"
            },
            {
              "code" : "ExprSyntax",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a type from SwiftSyntax that represents an expression in an AST.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because this type conforms to the ",
              "type" : "text"
            },
            {
              "code" : "StringLiteralConvertible",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the macro implementation uses a string literal",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as a lightweight syntax to create its result.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "All of the SwiftSyntax types that you return from a macro implementation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "conform to ",
              "type" : "text"
            },
            {
              "code" : "StringLiteralConvertible",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so you can use this approach when implementing any kind of macro.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Developing-and-Debugging-Macros",
          "level" : 2,
          "text" : "Developing and Debugging Macros",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Macros are well suited to development using tests:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "They transform one AST into another AST",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without depending on any external state,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and without making changes to any external state.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In addition, you can create syntax nodes from a string literal,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which simplifies setting up the input for a test.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can also read the ",
              "type" : "text"
            },
            {
              "code" : "description",
              "type" : "codeVoice"
            },
            {
              "text" : " property of an AST",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to get a string to compare against an expected value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "here’s a test of the ",
              "type" : "text"
            },
            {
              "code" : "#fourCharacterCode",
              "type" : "codeVoice"
            },
            {
              "text" : " macro from previous sections:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let source: SourceFileSyntax =",
            "    \"\"\"",
            "    let abcd = #fourCharacterCode(\"ABCD\")",
            "    \"\"\"",
            "",
            "let file = BasicMacroExpansionContext.KnownSourceFile(",
            "    moduleName: \"MyModule\",",
            "    fullFilePath: \"test.swift\"",
            ")",
            "",
            "let context = BasicMacroExpansionContext(sourceFiles: [source: file])",
            "",
            "let transformedSF = source.expand(",
            "    macros:[\"fourCharacterCode\": FourCC.self],",
            "    in: context",
            ")",
            "",
            "let expectedDescription =",
            "    \"\"\"",
            "    let abcd = 1145258561",
            "    \"\"\"",
            "",
            "precondition(transformedSF.description == expectedDescription)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above tests the macro using a precondition,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but you could use a testing framework instead.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ]
, 
"references": {
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language",
  "kind" : "article",
  "role" : "collection",
  "title" : "The Swift Programming Language (5.9 beta)",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes": {
  "abstract" : [
    {
      "text" : "Add information to declarations and types.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes",
  "kind" : "article",
  "role" : "article",
  "title" : "Attributes",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/attributes"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#attached": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#attached",
  "kind" : "section",
  "title" : "attached",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/attributes#attached"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#freestanding": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#freestanding",
  "kind" : "section",
  "title" : "freestanding",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/attributes#freestanding"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros#Implementing-a-Macro": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros#Implementing-a-Macro",
  "kind" : "section",
  "title" : "Implementing a Macro",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/macros#Implementing-a-Macro"
},
"http://github.com/apple/swift-syntax/": {
  "identifier" : "http:\/\/github.com\/apple\/swift-syntax\/",
  "title" : "SwiftSyntax",
  "titleInlineContent" : [
    {
      "text" : "SwiftSyntax",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "http:\/\/github.com\/apple\/swift-syntax\/"
},
"https://developer.apple.com/documentation/swift/externalmacro(module:type:)": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/externalmacro(module:type:)",
  "title" : "externalMacro(module:type:)",
  "titleInlineContent" : [
    {
      "code" : "externalMacro(module:type:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/externalmacro(module:type:)"
},
"https://developer.apple.com/documentation/swift/function": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/function",
  "title" : "function",
  "titleInlineContent" : [
    {
      "code" : "function",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/function"
},
"https://developer.apple.com/documentation/swift/optionset-swift.protocol": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/optionset-swift.protocol",
  "title" : "OptionSet",
  "titleInlineContent" : [
    {
      "code" : "OptionSet",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/optionset-swift.protocol"
},
"https://developer.apple.com/documentation/swift/warning(_:)": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)",
  "title" : "warning(_:)",
  "titleInlineContent" : [
    {
      "code" : "warning(_:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)"
},
"macro-ast-input": {
  "alt" : "A tree diagram, with a macro call as the root element.  The macro call has a name, fourCharacterCode, and arguments.  The argument is a string literal, ABCD.",
  "identifier" : "macro-ast-input",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/macro-ast-input@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/macro-ast-input~dark@2x.png"
    }
  ]
},
"macro-ast-original": {
  "alt" : "A tree diagram, with a constant as the root element.  The constant has a name, magic number, and a value.  The constant’s value is a macro call.  The macro call has a name, fourCharacterCode, and arguments.  The argument is a string literal, ABCD.",
  "identifier" : "macro-ast-original",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/macro-ast-original@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/macro-ast-original~dark@2x.png"
    }
  ]
},
"macro-ast-output": {
  "alt" : "A tree diagram with a sigle node, the integer literal 1145258561.",
  "identifier" : "macro-ast-output",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/macro-ast-output@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/macro-ast-output~dark@2x.png"
    }
  ]
},
"macro-ast-result": {
  "alt" : "A tree diagram, with a constant as the root element.  The constant has a name, magic number, and a value.  The constant’s value is the integer literal 1145258561",
  "identifier" : "macro-ast-result",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/macro-ast-result@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/macro-ast-result~dark@2x.png"
    }
  ]
},
"macro-expansion": {
  "alt" : "A diagram showing an overview of macro expansion.  On the left, a stylized representation of Swift code.  On the right, the same code with several lines added by the macro.",
  "identifier" : "macro-expansion",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/macro-expansion@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/macro-expansion~dark@2x.png"
    }
  ]
},
"macro-expansion-full": {
  "alt" : "Diagram showing the four steps of expanding macros.  The input is Swift source code.  This becomes a tree, representing the code’s structure.  The macro implementation adds branches to the tree.  The result is Swift source with additional code.",
  "identifier" : "macro-expansion-full",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/macro-expansion-full@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/macro-expansion-full~dark@2x.png"
    }
  ]
}
}
}