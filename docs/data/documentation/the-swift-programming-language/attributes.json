{
  "abstract" : [
    {
      "text" : "Add information to declarations and types.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "The Swift Programming Language"
      }
    ],
    "title" : "Attributes"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "text" : "There are two kinds of attributes in Swift —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "those that apply to declarations and those that apply to types.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An attribute provides additional information about the declaration or type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "discardableResult",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute on a function declaration indicates that,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "although the function returns a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler shouldn’t generate a warning if the return value is unused.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You specify an attribute by writing the ",
              "type" : "text"
            },
            {
              "code" : "@",
              "type" : "codeVoice"
            },
            {
              "text" : " symbol followed by the attribute’s name",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and any arguments that the attribute accepts:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@<#attribute name#>",
            "@<#attribute name#>(<#attribute arguments#>)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Some declaration attributes accept arguments",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that specify more information about the attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and how it applies to a particular declaration.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "attribute arguments",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " are enclosed in parentheses,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and their format is defined by the attribute they belong to.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Declaration-Attributes",
          "level" : 2,
          "text" : "Declaration Attributes",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can apply a declaration attribute to declarations only.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "available",
          "level" : 3,
          "text" : "available",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to indicate a declaration’s life cycle",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "relative to certain Swift language versions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or certain platforms and operating system versions.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "available",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute always appears",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a list of two or more comma-separated attribute arguments.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These arguments begin with one of the following platform or language names:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "iOS",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "iOSApplicationExtension",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "macOS",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "macOSApplicationExtension",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "macCatalyst",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "macCatalystApplicationExtension",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "watchOS",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "watchOSApplicationExtension",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "tvOS",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "tvOSApplicationExtension",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "swift",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also use an asterisk (",
              "type" : "text"
            },
            {
              "code" : "*",
              "type" : "codeVoice"
            },
            {
              "text" : ") to indicate the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "availability of the declaration on all of the platform names listed above.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "code" : "available",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that specifies availability using a Swift version number",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can’t use the asterisk.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The remaining arguments can appear in any order",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and specify additional information about the declaration’s life cycle,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "including important milestones.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "code" : "unavailable",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " argument indicates that the declaration",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "isn’t available on the specified platform.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "This argument can’t be used when specifying Swift version availability.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "code" : "introduced",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " argument indicates the first version",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "of the specified platform or language in which the declaration was introduced.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "It has the following form:",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "code" : [
                    "introduced: <#version number#>"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "version number",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " consists of one to three positive integers,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "separated by periods.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "code" : "deprecated",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " argument indicates the first version",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "of the specified platform or language in which the declaration was deprecated.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "It has the following form:",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "code" : [
                    "deprecated: <#version number#>"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "The optional ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "version number",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " consists of one to three positive integers,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "separated by periods.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "Omitting the version number indicates that the declaration is currently deprecated,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "without giving any information about when the deprecation occurred.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "If you omit the version number, omit the colon (",
                      "type" : "text"
                    },
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ") as well.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "code" : "obsoleted",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " argument indicates the first version",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "of the specified platform or language in which the declaration was obsoleted.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "When a declaration is obsoleted,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "it’s removed from the specified platform or language and can no longer be used.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "It has the following form:",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "code" : [
                    "obsoleted: <#version number#>"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "version number",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " consists of one to three positive integers, separated by periods.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "code" : "message",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " argument provides a textual message that the compiler displays",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "when emitting a warning or error about the use of a deprecated or obsoleted declaration.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "It has the following form:",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "code" : [
                    "message: <#message#>"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "message",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " consists of a string literal.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "code" : "renamed",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " argument provides a textual message",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "that indicates the new name for a declaration that’s been renamed.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "The compiler displays the new name",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "when emitting an error about the use of a renamed declaration.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "It has the following form:",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "code" : [
                    "renamed: <#new name#>"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "new name",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " consists of a string literal.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "You can apply the ",
                      "type" : "text"
                    },
                    {
                      "code" : "available",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " attribute",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "with the ",
                      "type" : "text"
                    },
                    {
                      "code" : "renamed",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " and ",
                      "type" : "text"
                    },
                    {
                      "code" : "unavailable",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " arguments",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "to a type alias declaration, as shown below,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "to indicate that the name of a declaration changed",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "between releases of a framework or library.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "This combination results in a compile-time error",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "that the declaration has been renamed.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "code" : [
                    "\/\/ First release",
                    "protocol MyProtocol {",
                    "    \/\/ protocol definition",
                    "}"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                },
                {
                  "code" : [
                    "\/\/ Subsequent release renames MyProtocol",
                    "protocol MyRenamedProtocol {",
                    "    \/\/ protocol definition",
                    "}",
                    "",
                    "@available(*, unavailable, renamed: \"MyRenamedProtocol\")",
                    "typealias MyProtocol = MyRenamedProtocol"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can apply multiple ",
              "type" : "text"
            },
            {
              "code" : "available",
              "type" : "codeVoice"
            },
            {
              "text" : " attributes on a single declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to specify the declaration’s availability on different platforms",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and different versions of Swift.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The declaration that the ",
              "type" : "text"
            },
            {
              "code" : "available",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute applies to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is ignored if the attribute specifies",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a platform or language version that doesn’t match the current target.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you use multiple ",
              "type" : "text"
            },
            {
              "code" : "available",
              "type" : "codeVoice"
            },
            {
              "text" : " attributes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the effective availability is the combination of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the platform and Swift availabilities.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If an ",
              "type" : "text"
            },
            {
              "code" : "available",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute only specifies an ",
              "type" : "text"
            },
            {
              "code" : "introduced",
              "type" : "codeVoice"
            },
            {
              "text" : " argument",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in addition to a platform or language name argument,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use the following shorthand syntax instead:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@available(<#platform name#> <#version number#>, *)",
            "@available(swift <#version number#>)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The shorthand syntax for ",
              "type" : "text"
            },
            {
              "code" : "available",
              "type" : "codeVoice"
            },
            {
              "text" : " attributes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "concisely expresses availability for multiple platforms.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Although the two forms are functionally equivalent,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the shorthand form is preferred whenever possible.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@available(iOS 10.0, macOS 10.12, *)",
            "class MyClass {",
            "    \/\/ class definition",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "code" : "available",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that specifies availability using a Swift version number",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can’t additionally specify a declaration’s platform availability.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Instead, use separate ",
              "type" : "text"
            },
            {
              "code" : "available",
              "type" : "codeVoice"
            },
            {
              "text" : " attributes to specify a Swift",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "version availability and one or more platform availabilities.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@available(swift 3.0.2)",
            "@available(macOS 10.12, *)",
            "struct MyStruct {",
            "    \/\/ struct definition",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "discardableResult",
          "level" : 3,
          "text" : "discardableResult",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a function or method declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to suppress the compiler warning",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when the function or method that returns a value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is called without using its result.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "dynamicCallable",
          "level" : 3,
          "text" : "dynamicCallable",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a class, structure, enumeration, or protocol",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to treat instances of the type as callable functions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The type must implement either a ",
              "type" : "text"
            },
            {
              "code" : "dynamicallyCall(withArguments:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a ",
              "type" : "text"
            },
            {
              "code" : "dynamicallyCall(withKeywordArguments:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or both.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can call an instance of a dynamically callable type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as if it’s a function that takes any number of arguments.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@dynamicCallable",
            "struct TelephoneExchange {",
            "    func dynamicallyCall(withArguments phoneNumber: [Int]) {",
            "        if phoneNumber == [4, 1, 1] {",
            "            print(\"Get Swift help on forums.swift.org\")",
            "        } else {",
            "            print(\"Unrecognized number\")",
            "        }",
            "    }",
            "}",
            "",
            "let dial = TelephoneExchange()",
            "",
            "\/\/ Use a dynamic method call.",
            "dial(4, 1, 1)",
            "\/\/ Prints \"Get Swift help on forums.swift.org\"",
            "",
            "dial(8, 6, 7, 5, 3, 0, 9)",
            "\/\/ Prints \"Unrecognized number\"",
            "",
            "\/\/ Call the underlying method directly.",
            "dial.dynamicallyCall(withArguments: [4, 1, 1])"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The declaration of the ",
              "type" : "text"
            },
            {
              "code" : "dynamicallyCall(withArguments:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must have a single parameter that conforms to the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "protocol — like ",
              "type" : "text"
            },
            {
              "code" : "[Int]",
              "type" : "codeVoice"
            },
            {
              "text" : " in the example above.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The return type can be any type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can include labels in a dynamic method call",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if you implement the ",
              "type" : "text"
            },
            {
              "code" : "dynamicallyCall(withKeywordArguments:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@dynamicCallable",
            "struct Repeater {",
            "    func dynamicallyCall(withKeywordArguments pairs: KeyValuePairs<String, Int>) -> String {",
            "        return pairs",
            "            .map { label, count in",
            "                repeatElement(label, count: count).joined(separator: \" \")",
            "            }",
            "            .joined(separator: \"\\n\")",
            "    }",
            "}",
            "",
            "let repeatLabels = Repeater()",
            "print(repeatLabels(a: 1, b: 2, c: 3, b: 2, a: 1))",
            "\/\/ a",
            "\/\/ b b",
            "\/\/ c c c",
            "\/\/ b b",
            "\/\/ a"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The declaration of the ",
              "type" : "text"
            },
            {
              "code" : "dynamicallyCall(withKeywordArguments:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must have a single parameter that conforms to the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "protocol,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the return type can be any type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The parameter’s ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must be",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The previous example uses ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as the parameter type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so that callers can include duplicate parameter labels —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "a",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "b",
              "type" : "codeVoice"
            },
            {
              "text" : " appear multiple times in the call to ",
              "type" : "text"
            },
            {
              "code" : "repeat",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you implement both ",
              "type" : "text"
            },
            {
              "code" : "dynamicallyCall",
              "type" : "codeVoice"
            },
            {
              "text" : " methods,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "dynamicallyCall(withKeywordArguments:)",
              "type" : "codeVoice"
            },
            {
              "text" : " is called",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when the method call includes keyword arguments.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In all other cases, ",
              "type" : "text"
            },
            {
              "code" : "dynamicallyCall(withArguments:)",
              "type" : "codeVoice"
            },
            {
              "text" : " is called.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can only call a dynamically callable instance",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with arguments and a return value that match the types you specify",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in one of your ",
              "type" : "text"
            },
            {
              "code" : "dynamicallyCall",
              "type" : "codeVoice"
            },
            {
              "text" : " method implementations.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The call in the following example doesn’t compile because",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "there isn’t an implementation of ",
              "type" : "text"
            },
            {
              "code" : "dynamicallyCall(withArguments:)",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that takes ",
              "type" : "text"
            },
            {
              "code" : "KeyValuePairs<String, String>",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "repeatLabels(a: \"four\") \/\/ Error"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "dynamicMemberLookup",
          "level" : 3,
          "text" : "dynamicMemberLookup",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a class, structure, enumeration, or protocol",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to enable members to be looked up by name at runtime.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The type must implement a ",
              "type" : "text"
            },
            {
              "code" : "subscript(dynamicMember:)",
              "type" : "codeVoice"
            },
            {
              "text" : " subscript.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In an explicit member expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if there isn’t a corresponding declaration for the named member,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the expression is understood as a call to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the type’s ",
              "type" : "text"
            },
            {
              "code" : "subscript(dynamicMember:)",
              "type" : "codeVoice"
            },
            {
              "text" : " subscript,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "passing information about the member as the argument.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The subscript can accept a parameter that’s either a key path or a member name;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if you implement both subscripts,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the subscript that takes key path argument is used.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "An implementation of ",
              "type" : "text"
            },
            {
              "code" : "subscript(dynamicMember:)",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can accept key paths using an argument of type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/keypath",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It can accept member names using an argument of a type that conforms to the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral",
              "isActive" : true,
              "overridingTitle" : "ExpressibleByStringLiteral",
              "overridingTitleInlineContent" : [
                {
                  "code" : "ExpressibleByStringLiteral",
                  "type" : "codeVoice"
                }
              ],
              "type" : "reference"
            },
            {
              "text" : " protocol —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in most cases, ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The subscript’s return type can be any type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Dynamic member lookup by member name",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be used to create a wrapper type around data",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that can’t be type checked at compile time,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as when bridging data from other languages into Swift.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@dynamicMemberLookup",
            "struct DynamicStruct {",
            "    let dictionary = [\"someDynamicMember\": 325,",
            "                      \"someOtherMember\": 787]",
            "    subscript(dynamicMember member: String) -> Int {",
            "        return dictionary[member] ?? 1054",
            "    }",
            "}",
            "let s = DynamicStruct()",
            "",
            "\/\/ Use dynamic member lookup.",
            "let dynamic = s.someDynamicMember",
            "print(dynamic)",
            "\/\/ Prints \"325\"",
            "",
            "\/\/ Call the underlying subscript directly.",
            "let equivalent = s[dynamicMember: \"someDynamicMember\"]",
            "print(dynamic == equivalent)",
            "\/\/ Prints \"true\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Dynamic member lookup by key path",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be used to implement a wrapper type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in a way that supports compile-time type checking.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Point { var x, y: Int }",
            "",
            "@dynamicMemberLookup",
            "struct PassthroughWrapper<Value> {",
            "    var value: Value",
            "    subscript<T>(dynamicMember member: KeyPath<Value, T>) -> T {",
            "        get { return value[keyPath: member] }",
            "    }",
            "}",
            "",
            "let point = Point(x: 381, y: 431)",
            "let wrapper = PassthroughWrapper(value: point)",
            "print(wrapper.x)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "frozen",
          "level" : 3,
          "text" : "frozen",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a structure or enumeration declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to restrict the kinds of changes you can make to the type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This attribute is allowed only when compiling in library evolution mode.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Future versions of the library can’t change the declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by adding, removing, or reordering",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an enumeration’s cases",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or a structure’s stored instance properties.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These changes are allowed on nonfrozen types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but they break ABI compatibility for frozen types.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "When the compiler isn’t in library evolution mode,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "all structures and enumerations are implicitly frozen,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and this attribute is ignored.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "In library evolution mode,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "code that interacts with members of nonfrozen structures and enumerations",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is compiled in a way that allows it to continue working without recompiling",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even if a future version of the library",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "adds, removes, or reorders some of that type’s members.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The compiler makes this possible using techniques like",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "looking up information at runtime",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and adding a layer of indirection.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Marking a structure or enumeration as frozen",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "gives up this flexibility to gain performance:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Future versions of the library can make only limited changes to the type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but the compiler can make additional optimizations",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in code that interacts with the type’s members.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Frozen types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the types of the stored properties of frozen structures,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the associated values of frozen enumeration cases",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must be public or marked with the ",
              "type" : "text"
            },
            {
              "code" : "usableFromInline",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The properties of a frozen structure can’t have property observers,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and expressions that provide the initial value for stored instance properties",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must follow the same restrictions as inlinable functions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#inlinable",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To enable library evolution mode on the command line,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "pass the ",
              "type" : "text"
            },
            {
              "code" : "-enable-library-evolution",
              "type" : "codeVoice"
            },
            {
              "text" : " option to the Swift compiler.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To enable it in Xcode,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "set the “Build Libraries for Distribution” build setting",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(",
              "type" : "text"
            },
            {
              "code" : "BUILD_LIBRARY_FOR_DISTRIBUTION",
              "type" : "codeVoice"
            },
            {
              "text" : ") to Yes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A switch statement over a frozen enumeration doesn’t require a ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Including a ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "@unknown default",
              "type" : "codeVoice"
            },
            {
              "text" : " case",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when switching over a frozen enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "produces a warning because that code is never executed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "GKInspectable",
          "level" : 3,
          "text" : "GKInspectable",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to expose a custom GameplayKit component property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the SpriteKit editor UI.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Applying this attribute also implies the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "inlinable",
          "level" : 3,
          "text" : "inlinable",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "function, method, computed property, subscript,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "convenience initializer, or deinitializer declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to expose that declaration’s implementation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as part of the module’s public interface.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The compiler is allowed to replace calls to an inlinable symbol",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a copy of the symbol’s implementation at the call site.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Inlinable code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can interact with ",
              "type" : "text"
            },
            {
              "code" : "public",
              "type" : "codeVoice"
            },
            {
              "text" : " symbols declared in any module,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and it can interact with ",
              "type" : "text"
            },
            {
              "code" : "internal",
              "type" : "codeVoice"
            },
            {
              "text" : " symbols",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "declared in the same module",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that are marked with the ",
              "type" : "text"
            },
            {
              "code" : "usableFromInline",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Inlinable code can’t interact with ",
              "type" : "text"
            },
            {
              "code" : "private",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "fileprivate",
              "type" : "codeVoice"
            },
            {
              "text" : " symbols.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This attribute can’t be applied",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to declarations that are nested inside functions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or to ",
              "type" : "text"
            },
            {
              "code" : "fileprivate",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "private",
              "type" : "codeVoice"
            },
            {
              "text" : " declarations.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Functions and closures that are defined inside an inlinable function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are implicitly inlinable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even though they can’t be marked with this attribute.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "main",
          "level" : 3,
          "text" : "main",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a structure, class, or enumeration declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that it contains the top-level entry point for program flow.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The type must provide a ",
              "type" : "text"
            },
            {
              "code" : "main",
              "type" : "codeVoice"
            },
            {
              "text" : " type function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that doesn’t take any arguments and returns ",
              "type" : "text"
            },
            {
              "code" : "Void",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@main",
            "struct MyTopLevel {",
            "    static func main() {",
            "        \/\/ Top-level code goes here",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Another way to describe the requirements of the ",
              "type" : "text"
            },
            {
              "code" : "main",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is that the type you write this attribute on",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "must satisfy the same requirements",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as types that conform to the following hypothetical protocol:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "protocol ProvidesMain {",
            "    static func main() throws",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The Swift code you compile to make an executable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can contain at most one top-level entry point,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "nonobjc",
          "level" : 3,
          "text" : "nonobjc",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "method, property, subscript, or initializer declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to suppress an implicit ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "nonobjc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute tells the compiler",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to make the declaration unavailable in Objective-C code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even though it’s possible to represent it in Objective-C.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Applying this attribute to an extension",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "has the same effect as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "applying it to every member of that extension",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that isn’t explicitly marked with the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You use the ",
              "type" : "text"
            },
            {
              "code" : "nonobjc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute to resolve circularity",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for bridging methods in a class marked with the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to allow overloading of methods and initializers",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in a class marked with the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A method marked with the ",
              "type" : "text"
            },
            {
              "code" : "nonobjc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can’t override a method marked with the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, a method marked with the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can override a method marked with the ",
              "type" : "text"
            },
            {
              "code" : "nonobjc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Similarly, a method marked with the ",
              "type" : "text"
            },
            {
              "code" : "nonobjc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can’t satisfy a protocol requirement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for a method marked with the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "NSApplicationMain",
          "level" : 3,
          "text" : "NSApplicationMain",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a class",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that it’s the application delegate.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Using this attribute is equivalent to calling the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "NSApplicationMain(_:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you don’t use this attribute,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "supply a ",
              "type" : "text"
            },
            {
              "code" : "main.swift",
              "type" : "codeVoice"
            },
            {
              "text" : " file with code at the top level",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that calls the ",
              "type" : "text"
            },
            {
              "code" : "NSApplicationMain(_:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function as follows:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "import AppKit",
            "NSApplicationMain(CommandLine.argc, CommandLine.unsafeArgv)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The Swift code you compile to make an executable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can contain at most one top-level entry point,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "NSCopying",
          "level" : 3,
          "text" : "NSCopying",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a stored variable property of a class.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This attribute causes the property’s setter to be synthesized with a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "copy",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of the property’s value — returned by the ",
              "type" : "text"
            },
            {
              "code" : "copyWithZone(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method — instead of the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "value of the property itself.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The type of the property must conform to the ",
              "type" : "text"
            },
            {
              "code" : "NSCopying",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "NSCopying",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute behaves in a way similar to the Objective-C ",
              "type" : "text"
            },
            {
              "code" : "copy",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "property attribute.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "NSManaged",
          "level" : 3,
          "text" : "NSManaged",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to an instance method or stored variable property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of a class that inherits from ",
              "type" : "text"
            },
            {
              "code" : "NSManagedObject",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that Core Data dynamically provides its implementation at runtime,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "based on the associated entity description.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For a property marked with the ",
              "type" : "text"
            },
            {
              "code" : "NSManaged",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Core Data also provides the storage at runtime.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Applying this attribute also implies the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "objc",
          "level" : 3,
          "text" : "objc",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to any declaration that can be represented in Objective-C —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example, nonnested classes, protocols,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "nongeneric enumerations (constrained to integer raw-value types),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "properties and methods (including getters and setters) of classes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "protocols and optional members of a protocol,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "initializers, and subscripts.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute tells the compiler",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that a declaration is available to use in Objective-C code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Applying this attribute to an extension",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "has the same effect as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "applying it to every member of that extension",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that isn’t explicitly marked with the ",
              "type" : "text"
            },
            {
              "code" : "nonobjc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The compiler implicitly adds the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to subclasses of any class defined in Objective-C.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, the subclass must not be generic,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and must not inherit from any generic classes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can explicitly add the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to a subclass that meets these criteria,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to specify its Objective-C name as discussed below.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Protocols that are marked with the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute can’t inherit",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from protocols that aren’t marked with this attribute.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute is also implicitly added in the following cases:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The declaration is an override in a subclass,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and the superclass’s declaration has the ",
                      "type" : "text"
                    },
                    {
                      "code" : "objc",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " attribute.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The declaration satisfies a requirement",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "from a protocol that has the ",
                      "type" : "text"
                    },
                    {
                      "code" : "objc",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " attribute.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The declaration has the ",
                      "type" : "text"
                    },
                    {
                      "code" : "IBAction",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "IBSegueAction",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "IBOutlet",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "IBDesignable",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "IBInspectable",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "NSManaged",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", or ",
                      "type" : "text"
                    },
                    {
                      "code" : "GKInspectable",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " attribute.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you apply the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute to an enumeration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "each enumeration case is exposed to Objective-C code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as the concatenation of the enumeration name and the case name.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The first letter of the case name is capitalized.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, a case named ",
              "type" : "text"
            },
            {
              "code" : "venus",
              "type" : "codeVoice"
            },
            {
              "text" : " in a Swift ",
              "type" : "text"
            },
            {
              "code" : "Planet",
              "type" : "codeVoice"
            },
            {
              "text" : " enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is exposed to Objective-C code as a case named ",
              "type" : "text"
            },
            {
              "code" : "PlanetVenus",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute optionally accepts a single attribute argument,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which consists of an identifier.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The identifier specifies the name to be exposed to Objective-C",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for the entity that the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute applies to.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use this argument to name",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "classes, enumerations, enumeration cases, protocols,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "methods, getters, setters, and initializers.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you specify the Objective-C name",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for a class, protocol, or enumeration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "include a three-letter prefix on the name,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example below exposes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the getter for the ",
              "type" : "text"
            },
            {
              "code" : "enabled",
              "type" : "codeVoice"
            },
            {
              "text" : " property of the ",
              "type" : "text"
            },
            {
              "code" : "ExampleClass",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to Objective-C code as ",
              "type" : "text"
            },
            {
              "code" : "isEnabled",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "rather than just as the name of the property itself.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class ExampleClass: NSObject {",
            "    @objc var enabled: Bool {",
            "        @objc(isEnabled) get {",
            "            \/\/ Return the appropriate value",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information, see",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The argument to the ",
                  "type" : "text"
                },
                {
                  "code" : "objc",
                  "type" : "codeVoice"
                },
                {
                  "text" : " attribute",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "can also change the runtime name for that declaration.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "You use the runtime name when calling functions",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "that interact with the Objective-C runtime,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "like ",
                  "type" : "text"
                },
                {
                  "identifier" : "https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and when specifying class names in an app’s Info.plist file.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If you specify a name by passing an argument,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "that name is used as the name in Objective-C code",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and as the runtime name.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If you omit the argument,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the name used in Objective-C code matches the name in Swift code,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and the runtime name follows the normal Swift compiler convention",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "of name mangling.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "objcMembers",
          "level" : 3,
          "text" : "objcMembers",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a class declaration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to implicitly apply the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to all Objective-C compatible members of the class,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "its extensions, its subclasses, and all of the extensions of its subclasses.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Most code should use the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute instead,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to expose only the declarations that are needed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you need to expose many declarations,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can group them in an extension that has the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "objcMembers",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute is a convenience for",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "libraries that make heavy use of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the introspection facilities of the Objective-C runtime.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Applying the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute when it isn’t needed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can increase your binary size and adversely affect performance.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "propertyWrapper",
          "level" : 3,
          "text" : "propertyWrapper",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a class, structure, or enumeration declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to use that type as a property wrapper.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you apply this attribute to a type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you create a custom attribute with the same name as the type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Apply that new attribute to a property of a class, structure, or enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to wrap access to the property through an instance of the wrapper type;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "apply the attribute to a local stored variable declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to wrap access to the variable the same way.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Computed variables, global variables, and constants can’t use property wrappers.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The wrapper must define a ",
              "type" : "text"
            },
            {
              "code" : "wrappedValue",
              "type" : "codeVoice"
            },
            {
              "text" : " instance property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "wrapped value",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " of the property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is the value that the getter and setter for this property expose.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In most cases, ",
              "type" : "text"
            },
            {
              "code" : "wrappedValue",
              "type" : "codeVoice"
            },
            {
              "text" : " is a computed value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but it can be a stored value instead.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The wrapper defines and manages",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "any underlying storage needed by its wrapped value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The compiler synthesizes storage for the instance of the wrapper type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by prefixing the name of the wrapped property with an underscore (",
              "type" : "text"
            },
            {
              "code" : "_",
              "type" : "codeVoice"
            },
            {
              "text" : ") —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example, the wrapper for ",
              "type" : "text"
            },
            {
              "code" : "someProperty",
              "type" : "codeVoice"
            },
            {
              "text" : " is stored as ",
              "type" : "text"
            },
            {
              "code" : "_someProperty",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The synthesized storage for the wrapper has an access control level of ",
              "type" : "text"
            },
            {
              "code" : "private",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A property that has a property wrapper",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can include ",
              "type" : "text"
            },
            {
              "code" : "willSet",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "didSet",
              "type" : "codeVoice"
            },
            {
              "text" : " blocks,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but it can’t override the compiler-synthesized ",
              "type" : "text"
            },
            {
              "code" : "get",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "set",
              "type" : "codeVoice"
            },
            {
              "text" : " blocks.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift provides two forms of syntactic sugar",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for initialization of a property wrapper.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use assignment syntax in the definition of a wrapped value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to pass the expression on the right-hand side of the assignment",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as the argument to the ",
              "type" : "text"
            },
            {
              "code" : "wrappedValue",
              "type" : "codeVoice"
            },
            {
              "text" : " parameter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of the property wrapper’s initializer.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can also provide arguments to the attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when you apply it to a property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and those arguments are passed to the property wrapper’s initializer.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, in the code below,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "SomeStruct",
              "type" : "codeVoice"
            },
            {
              "text" : " calls each of the initializers that ",
              "type" : "text"
            },
            {
              "code" : "SomeWrapper",
              "type" : "codeVoice"
            },
            {
              "text" : " defines.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@propertyWrapper",
            "struct SomeWrapper {",
            "    var wrappedValue: Int",
            "    var someValue: Double",
            "    init() {",
            "        self.wrappedValue = 100",
            "        self.someValue = 12.3",
            "    }",
            "    init(wrappedValue: Int) {",
            "        self.wrappedValue = wrappedValue",
            "        self.someValue = 45.6",
            "    }",
            "    init(wrappedValue value: Int, custom: Double) {",
            "        self.wrappedValue = value",
            "        self.someValue = custom",
            "    }",
            "}",
            "",
            "struct SomeStruct {",
            "    \/\/ Uses init()",
            "    @SomeWrapper var a: Int",
            "",
            "    \/\/ Uses init(wrappedValue:)",
            "    @SomeWrapper var b = 10",
            "",
            "    \/\/ Both use init(wrappedValue:custom:)",
            "    @SomeWrapper(custom: 98.7) var c = 30",
            "    @SomeWrapper(wrappedValue: 30, custom: 98.7) var d",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "projected value",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " for a wrapped property is a second value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that a property wrapper can use to expose additional functionality.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The author of a property wrapper type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is responsible for determining the meaning of its projected value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and defining the interface that the projected value exposes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To project a value from a property wrapper,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "define a ",
              "type" : "text"
            },
            {
              "code" : "projectedValue",
              "type" : "codeVoice"
            },
            {
              "text" : " instance property on the wrapper type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The compiler synthesizes an identifier for the projected value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by prefixing the name of the wrapped property with a dollar sign (",
              "type" : "text"
            },
            {
              "code" : "$",
              "type" : "codeVoice"
            },
            {
              "text" : ") —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example, the projected value for ",
              "type" : "text"
            },
            {
              "code" : "someProperty",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "$someProperty",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The projected value has the same access control level",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as the original wrapped property.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@propertyWrapper",
            "struct WrapperWithProjection {",
            "    var wrappedValue: Int",
            "    var projectedValue: SomeProjection {",
            "        return SomeProjection(wrapper: self)",
            "    }",
            "}",
            "struct SomeProjection {",
            "    var wrapper: WrapperWithProjection",
            "}",
            "",
            "struct SomeStruct {",
            "    @WrapperWithProjection var x = 123",
            "}",
            "let s = SomeStruct()",
            "s.x           \/\/ Int value",
            "s.$x          \/\/ SomeProjection value",
            "s.$x.wrapper  \/\/ WrapperWithProjection value"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "resultBuilder",
          "level" : 3,
          "text" : "resultBuilder",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a class, structure, enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to use that type as a result builder.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "result builder",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is a type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that builds a nested data structure step by step.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You use result builders to implement a domain-specific language (DSL)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for creating nested data structures in a natural, declarative way.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For an example of how to use the ",
              "type" : "text"
            },
            {
              "code" : "resultBuilder",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Result-Builders",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Result-Building-Methods",
          "level" : 4,
          "text" : "Result-Building Methods",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A result builder implements static methods described below.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because all of the result builder’s functionality",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is exposed through static methods,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you don’t ever initialize an instance of that type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "buildBlock(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method is required;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the other methods —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which enable additional functionality in the DSL —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are optional.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The declaration of a result builder type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "doesn’t actually have to include any protocol conformance.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The description of the static methods uses three types as placeholders.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The type ",
              "type" : "text"
            },
            {
              "code" : "Expression",
              "type" : "codeVoice"
            },
            {
              "text" : " is a placeholder",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for the type of the result builder’s input,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Component",
              "type" : "codeVoice"
            },
            {
              "text" : " is a placeholder for the type of a partial result,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "code" : "FinalResult",
              "type" : "codeVoice"
            },
            {
              "text" : " is a placeholder",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for the type of the result that the result builder produces.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You replace these types with the actual types that your result builder uses.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If your result-building methods",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "don’t specify a type for ",
              "type" : "text"
            },
            {
              "code" : "Expression",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "FinalResult",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "they default to being the same as ",
              "type" : "text"
            },
            {
              "code" : "Component",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The result-building methods are as follows:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "definition" : {
                "content" : [
                  {
                    "inlineContent" : [
                      {
                        "text" : "Combines an array of partial results into a single partial result. A result builder must implement this method.",
                        "type" : "text"
                      }
                    ],
                    "type" : "paragraph"
                  }
                ]
              },
              "term" : {
                "inlineContent" : [
                  {
                    "code" : "static func buildBlock(_ components: Component...) -> Component",
                    "type" : "codeVoice"
                  }
                ]
              }
            },
            {
              "definition" : {
                "content" : [
                  {
                    "inlineContent" : [
                      {
                        "text" : "Builds a partial result from a partial result that can be ",
                        "type" : "text"
                      },
                      {
                        "code" : "nil",
                        "type" : "codeVoice"
                      },
                      {
                        "text" : ". Implement this method to support ",
                        "type" : "text"
                      },
                      {
                        "code" : "if",
                        "type" : "codeVoice"
                      },
                      {
                        "text" : " statements that don’t include an ",
                        "type" : "text"
                      },
                      {
                        "code" : "else",
                        "type" : "codeVoice"
                      },
                      {
                        "text" : " clause.",
                        "type" : "text"
                      }
                    ],
                    "type" : "paragraph"
                  }
                ]
              },
              "term" : {
                "inlineContent" : [
                  {
                    "code" : "static func buildOptional(_ component: Component?) -> Component",
                    "type" : "codeVoice"
                  }
                ]
              }
            },
            {
              "definition" : {
                "content" : [
                  {
                    "inlineContent" : [
                      {
                        "text" : "Builds a partial result whose value varies depending on some condition. Implement both this method and ",
                        "type" : "text"
                      },
                      {
                        "code" : "buildEither(second:)",
                        "type" : "codeVoice"
                      },
                      {
                        "text" : " to support ",
                        "type" : "text"
                      },
                      {
                        "code" : "switch",
                        "type" : "codeVoice"
                      },
                      {
                        "text" : " statements and ",
                        "type" : "text"
                      },
                      {
                        "code" : "if",
                        "type" : "codeVoice"
                      },
                      {
                        "text" : " statements that include an ",
                        "type" : "text"
                      },
                      {
                        "code" : "else",
                        "type" : "codeVoice"
                      },
                      {
                        "text" : " clause.",
                        "type" : "text"
                      }
                    ],
                    "type" : "paragraph"
                  }
                ]
              },
              "term" : {
                "inlineContent" : [
                  {
                    "code" : "static func buildEither(first: Component) -> Component",
                    "type" : "codeVoice"
                  }
                ]
              }
            },
            {
              "definition" : {
                "content" : [
                  {
                    "inlineContent" : [
                      {
                        "text" : "Builds a partial result whose value varies depending on some condition. Implement both this method and ",
                        "type" : "text"
                      },
                      {
                        "code" : "buildEither(first:)",
                        "type" : "codeVoice"
                      },
                      {
                        "text" : " to support ",
                        "type" : "text"
                      },
                      {
                        "code" : "switch",
                        "type" : "codeVoice"
                      },
                      {
                        "text" : " statements and ",
                        "type" : "text"
                      },
                      {
                        "code" : "if",
                        "type" : "codeVoice"
                      },
                      {
                        "text" : " statements that include an ",
                        "type" : "text"
                      },
                      {
                        "code" : "else",
                        "type" : "codeVoice"
                      },
                      {
                        "text" : " clause.",
                        "type" : "text"
                      }
                    ],
                    "type" : "paragraph"
                  }
                ]
              },
              "term" : {
                "inlineContent" : [
                  {
                    "code" : "static func buildEither(second: Component) -> Component",
                    "type" : "codeVoice"
                  }
                ]
              }
            },
            {
              "definition" : {
                "content" : [
                  {
                    "inlineContent" : [
                      {
                        "text" : "Builds a partial result from an array of partial results. Implement this method to support ",
                        "type" : "text"
                      },
                      {
                        "code" : "for",
                        "type" : "codeVoice"
                      },
                      {
                        "text" : " loops.",
                        "type" : "text"
                      }
                    ],
                    "type" : "paragraph"
                  }
                ]
              },
              "term" : {
                "inlineContent" : [
                  {
                    "code" : "static func buildArray(_ components: [Component]) -> Component",
                    "type" : "codeVoice"
                  }
                ]
              }
            },
            {
              "definition" : {
                "content" : [
                  {
                    "inlineContent" : [
                      {
                        "text" : "Builds a partial result from an expression. You can implement this method to perform preprocessing — for example, converting expressions to an internal type — or to provide additional information for type inference at use sites.",
                        "type" : "text"
                      }
                    ],
                    "type" : "paragraph"
                  }
                ]
              },
              "term" : {
                "inlineContent" : [
                  {
                    "code" : "static func buildExpression(_ expression: Expression) -> Component",
                    "type" : "codeVoice"
                  }
                ]
              }
            },
            {
              "definition" : {
                "content" : [
                  {
                    "inlineContent" : [
                      {
                        "text" : "Builds a final result from a partial result. You can implement this method as part of a result builder that uses a different type for partial and final results, or to perform other postprocessing on a result before returning it.",
                        "type" : "text"
                      }
                    ],
                    "type" : "paragraph"
                  }
                ]
              },
              "term" : {
                "inlineContent" : [
                  {
                    "code" : "static func buildFinalResult(_ component: Component) -> FinalResult",
                    "type" : "codeVoice"
                  }
                ]
              }
            },
            {
              "definition" : {
                "content" : [
                  {
                    "inlineContent" : [
                      {
                        "text" : "Builds a partial result that propagates or erases type information outside a compiler-control statement that performs an availability check. You can use this to erase type information that varies between the conditional branches.",
                        "type" : "text"
                      }
                    ],
                    "type" : "paragraph"
                  }
                ]
              },
              "term" : {
                "inlineContent" : [
                  {
                    "code" : "static func buildLimitedAvailability(_ component: Component) -> Component",
                    "type" : "codeVoice"
                  }
                ]
              }
            }
          ],
          "type" : "termList"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, the code below defines a simple result builder",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that builds an array of integers.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This code defines ",
              "type" : "text"
            },
            {
              "code" : "Component",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Expression",
              "type" : "codeVoice"
            },
            {
              "text" : " as type aliases,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to make it easier to match the examples below to the list of methods above.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@resultBuilder",
            "struct ArrayBuilder {",
            "    typealias Component = [Int]",
            "    typealias Expression = Int",
            "    static func buildExpression(_ element: Expression) -> Component {",
            "        return [element]",
            "    }",
            "    static func buildOptional(_ component: Component?) -> Component {",
            "        guard let component = component else { return [] }",
            "        return component",
            "    }",
            "    static func buildEither(first component: Component) -> Component {",
            "        return component",
            "    }",
            "    static func buildEither(second component: Component) -> Component {",
            "        return component",
            "    }",
            "    static func buildArray(_ components: [Component]) -> Component {",
            "        return Array(components.joined())",
            "    }",
            "    static func buildBlock(_ components: Component...) -> Component {",
            "        return Array(components.joined())",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Result-Transformations",
          "level" : 4,
          "text" : "Result Transformations",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following syntactic transformations are applied recursively",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to turn code that uses result-builder syntax",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "into code that calls the static methods of the result builder type:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If the result builder has a ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildExpression(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " method,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "each expression becomes a call to that method.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "This transformation is always first.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "For example, the following declarations are equivalent:",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "code" : [
                    "@ArrayBuilder var builderNumber: [Int] { 10 }",
                    "var manualNumber = ArrayBuilder.buildExpression(10)"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "An assignment statement is transformed like an expression,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "but is understood to evaluate to ",
                      "type" : "text"
                    },
                    {
                      "code" : "()",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "You can define an overload of ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildExpression(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "that takes an argument of type ",
                      "type" : "text"
                    },
                    {
                      "code" : "()",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " to handle assignments specifically.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A branch statement that checks an availability condition",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "becomes a call to the ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildLimitedAvailability(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " method.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "This transformation happens before the transformation into a call to",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildEither(first:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildEither(second:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", or ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildOptional(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "You use the ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildLimitedAvailability(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " method to erase type information",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "that changes depending on which branch is taken.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "For example,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildEither(first:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " and  ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildEither(second:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " methods below",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "use a generic type that captures type information about both branches.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "code" : [
                    "protocol Drawable {",
                    "    func draw() -> String",
                    "}",
                    "struct Text: Drawable {",
                    "    var content: String",
                    "    init(_ content: String) { self.content = content }",
                    "    func draw() -> String { return content }",
                    "}",
                    "struct Line<D: Drawable>: Drawable {",
                    "      var elements: [D]",
                    "      func draw() -> String {",
                    "        return elements.map { $0.draw() }.joined(separator: \"\")",
                    "    }",
                    "}",
                    "struct DrawEither<First: Drawable, Second: Drawable>: Drawable {",
                    "    var content: Drawable",
                    "    func draw() -> String { return content.draw() }",
                    "}",
                    "",
                    "@resultBuilder",
                    "struct DrawingBuilder {",
                    "    static func buildBlock<D: Drawable>(_ components: D...) -> Line<D> {",
                    "        return Line(elements: components)",
                    "    }",
                    "    static func buildEither<First, Second>(first: First)",
                    "            -> DrawEither<First, Second> {",
                    "        return DrawEither(content: first)",
                    "    }",
                    "    static func buildEither<First, Second>(second: Second)",
                    "            -> DrawEither<First, Second> {",
                    "        return DrawEither(content: second)",
                    "    }",
                    "}"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "However, this approach causes a problem in code that has availability checks:",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "code" : [
                    "@available(macOS 99, *)",
                    "struct FutureText: Drawable {",
                    "    var content: String",
                    "    init(_ content: String) { self.content = content }",
                    "    func draw() -> String { return content }",
                    "}",
                    "@DrawingBuilder var brokenDrawing: Drawable {",
                    "    if #available(macOS 99, *) {",
                    "        FutureText(\"Inside.future\")  \/\/ Problem",
                    "    } else {",
                    "        Text(\"Inside.present\")",
                    "    }",
                    "}",
                    "\/\/ The type of brokenDrawing is Line<DrawEither<Line<FutureText>, Line<Text>>>"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "In the code above,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "FutureText",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " appears as part of the type of ",
                      "type" : "text"
                    },
                    {
                      "code" : "brokenDrawing",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "because it’s one of the types in the ",
                      "type" : "text"
                    },
                    {
                      "code" : "DrawEither",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " generic type.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "This could cause your program to crash if ",
                      "type" : "text"
                    },
                    {
                      "code" : "FutureText",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "isn’t available at runtime,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "even in the case where that type is explicitly not being used.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "To solve this problem,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "implement a ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildLimitedAvailability(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " method",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "to erase type information.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "For example, the code below builds an ",
                      "type" : "text"
                    },
                    {
                      "code" : "AnyDrawable",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " value",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "from its availability check.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "code" : [
                    "struct AnyDrawable: Drawable {",
                    "    var content: Drawable",
                    "    func draw() -> String { return content.draw() }",
                    "}",
                    "extension DrawingBuilder {",
                    "    static func buildLimitedAvailability(_ content: Drawable) -> AnyDrawable {",
                    "        return AnyDrawable(content: content)",
                    "    }",
                    "}",
                    "",
                    "@DrawingBuilder var typeErasedDrawing: Drawable {",
                    "    if #available(macOS 99, *) {",
                    "        FutureText(\"Inside.future\")",
                    "    } else {",
                    "        Text(\"Inside.present\")",
                    "    }",
                    "}",
                    "\/\/ The type of typeErasedDrawing is Line<DrawEither<AnyDrawable, Line<Text>>>"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A branch statement becomes a series of nested calls to the",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildEither(first:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " and ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildEither(second:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " methods.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "The statements’ conditions and cases are mapped onto",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the leaf nodes of a binary tree,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and the statement becomes",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "a nested call to the ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildEither",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " methods",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "following the path to that leaf node from the root node.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "For example, if you write a switch statement that has three cases,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the compiler uses a binary tree with three leaf nodes.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "Likewise,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "because the path from the root node to the second case is",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "“second child” and then “first child”,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "that case becomes a nested call like",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildEither(first: buildEither(second: ... ))",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "The following declarations are equivalent:",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "code" : [
                    "let someNumber = 19",
                    "@ArrayBuilder var builderConditional: [Int] {",
                    "    if someNumber < 12 {",
                    "        31",
                    "    } else if someNumber == 19 {",
                    "        32",
                    "    } else {",
                    "        33",
                    "    }",
                    "}",
                    "",
                    "var manualConditional: [Int]",
                    "if someNumber < 12 {",
                    "    let partialResult = ArrayBuilder.buildExpression(31)",
                    "    let outerPartialResult = ArrayBuilder.buildEither(first: partialResult)",
                    "    manualConditional = ArrayBuilder.buildEither(first: outerPartialResult)",
                    "} else if someNumber == 19 {",
                    "    let partialResult = ArrayBuilder.buildExpression(32)",
                    "    let outerPartialResult = ArrayBuilder.buildEither(second: partialResult)",
                    "    manualConditional = ArrayBuilder.buildEither(first: outerPartialResult)",
                    "} else {",
                    "    let partialResult = ArrayBuilder.buildExpression(33)",
                    "    manualConditional = ArrayBuilder.buildEither(second: partialResult)",
                    "}"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A branch statement that might not produce a value,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "like an ",
                      "type" : "text"
                    },
                    {
                      "code" : "if",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " statement without an ",
                      "type" : "text"
                    },
                    {
                      "code" : "else",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " clause,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "becomes a call to ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildOptional(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "If the ",
                      "type" : "text"
                    },
                    {
                      "code" : "if",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " statement’s condition is satisfied,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "its code block is transformed and passed as the argument;",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "otherwise, ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildOptional(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is called with ",
                      "type" : "text"
                    },
                    {
                      "code" : "nil",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " as its argument.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "For example, the following declarations are equivalent:",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "code" : [
                    "@ArrayBuilder var builderOptional: [Int] {",
                    "    if (someNumber % 2) == 1 { 20 }",
                    "}",
                    "",
                    "var partialResult: [Int]? = nil",
                    "if (someNumber % 2) == 1 {",
                    "    partialResult = ArrayBuilder.buildExpression(20)",
                    "}",
                    "var manualOptional = ArrayBuilder.buildOptional(partialResult)"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A code block or ",
                      "type" : "text"
                    },
                    {
                      "code" : "do",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " statement",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "becomes a call to the ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildBlock(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " method.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "Each of the statements inside of the block is transformed,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "one at a time,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and they become the arguments to the ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildBlock(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " method.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "For example, the following declarations are equivalent:",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "code" : [
                    "@ArrayBuilder var builderBlock: [Int] {",
                    "    100",
                    "    200",
                    "    300",
                    "}",
                    "",
                    "var manualBlock = ArrayBuilder.buildBlock(",
                    "    ArrayBuilder.buildExpression(100),",
                    "    ArrayBuilder.buildExpression(200),",
                    "    ArrayBuilder.buildExpression(300)",
                    ")"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A ",
                      "type" : "text"
                    },
                    {
                      "code" : "for",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " loop becomes a temporary variable, a ",
                      "type" : "text"
                    },
                    {
                      "code" : "for",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " loop,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and call to the ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildArray(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " method.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "The new ",
                      "type" : "text"
                    },
                    {
                      "code" : "for",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " loop iterates over the sequence",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and appends each partial result to that array.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "The temporary array is passed as the argument in the ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildArray(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " call.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "For example, the following declarations are equivalent:",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "code" : [
                    "@ArrayBuilder var builderArray: [Int] {",
                    "    for i in 5...7 {",
                    "        100 + i",
                    "    }",
                    "}",
                    "",
                    "var temporary: [[Int]] = []",
                    "for i in 5...7 {",
                    "    let partialResult = ArrayBuilder.buildExpression(100 + i)",
                    "    temporary.append(partialResult)",
                    "}",
                    "let manualArray = ArrayBuilder.buildArray(temporary)"
                  ],
                  "syntax" : "swift",
                  "type" : "codeListing"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If the result builder has a ",
                      "type" : "text"
                    },
                    {
                      "code" : "buildFinalResult(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " method,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the final result becomes a call to that method.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "This transformation is always last.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Although the transformation behavior is described in terms of temporary variables,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using a result builder doesn’t actually create any new declarations",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that are visible from the rest of your code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can’t use",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "break",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "continue",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "guard",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " statements,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statements,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " statements",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the code that a result builder transforms.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The transformation process doesn’t change declarations in the code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which lets you use temporary constants and variables",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to build up expressions piece by piece.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It also doesn’t change",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "throw",
              "type" : "codeVoice"
            },
            {
              "text" : " statements,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "compile-time diagnostic statements,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or closures that contain a ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Whenever possible, transformations are coalesced.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, the expression ",
              "type" : "text"
            },
            {
              "code" : "4 + 5 * 6",
              "type" : "codeVoice"
            },
            {
              "text" : " becomes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "buildExpression(4 + 5 * 6)",
              "type" : "codeVoice"
            },
            {
              "text" : " rather multiple calls to that function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Likewise, nested branch statements become",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a single binary tree of calls to the ",
              "type" : "text"
            },
            {
              "code" : "buildEither",
              "type" : "codeVoice"
            },
            {
              "text" : " methods.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Custom-Result-Builder-Attributes",
          "level" : 4,
          "text" : "Custom Result-Builder Attributes",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Creating a result builder type creates a custom attribute with the same name.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can apply that attribute in the following places:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "On a function declaration,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the result builder builds the body of the function.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "On a variable or subscript declaration that includes a getter,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the result builder builds the body of the getter.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "On a parameter in a function declaration,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the result builder builds the body of a closure",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "that’s passed as the corresponding argument.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Applying a result builder attribute doesn’t impact ABI compatibility.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Applying a result builder attribute to a parameter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "makes that attribute part of the function’s interface,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which can effect source compatibility.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "requiresstoredpropertyinits",
          "level" : 3,
          "text" : "requires_stored_property_inits",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a class declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to require all stored properties within the class",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to provide default values as part of their definitions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This attribute is inferred for any class",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that inherits from ",
              "type" : "text"
            },
            {
              "code" : "NSManagedObject",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "testable",
          "level" : 3,
          "text" : "testable",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to an ",
              "type" : "text"
            },
            {
              "code" : "import",
              "type" : "codeVoice"
            },
            {
              "text" : " declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to import that module with changes to its access control",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that simplify testing the module’s code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Entities in the imported module",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that are marked with the ",
              "type" : "text"
            },
            {
              "code" : "internal",
              "type" : "codeVoice"
            },
            {
              "text" : " access-level modifier",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are imported as if they were declared with the ",
              "type" : "text"
            },
            {
              "code" : "public",
              "type" : "codeVoice"
            },
            {
              "text" : " access-level modifier.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Classes and class members",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that are marked with the ",
              "type" : "text"
            },
            {
              "code" : "internal",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "public",
              "type" : "codeVoice"
            },
            {
              "text" : " access-level modifier",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are imported as if they were declared with the ",
              "type" : "text"
            },
            {
              "code" : "open",
              "type" : "codeVoice"
            },
            {
              "text" : " access-level modifier.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The imported module must be compiled with testing enabled.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "UIApplicationMain",
          "level" : 3,
          "text" : "UIApplicationMain",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a class",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that it’s the application delegate.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Using this attribute is equivalent to calling the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "UIApplicationMain",
              "type" : "codeVoice"
            },
            {
              "text" : " function and",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "passing this class’s name as the name of the delegate class.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you don’t use this attribute,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "supply a ",
              "type" : "text"
            },
            {
              "code" : "main.swift",
              "type" : "codeVoice"
            },
            {
              "text" : " file with code at the top level",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that calls the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if your app uses a custom subclass of ",
              "type" : "text"
            },
            {
              "code" : "UIApplication",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as its principal class,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "call the ",
              "type" : "text"
            },
            {
              "code" : "UIApplicationMain(_:_:_:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "instead of using this attribute.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The Swift code you compile to make an executable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can contain at most one top-level entry point,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "unchecked",
          "level" : 3,
          "text" : "unchecked",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a protocol type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as part of a type declaration’s list of adopted protocols",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to turn off enforcement of that protocol’s requirements.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The only supported protocol is ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/sendable",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "usableFromInline",
          "level" : 3,
          "text" : "usableFromInline",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "function, method, computed property, subscript,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "initializer, or deinitializer declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to allow that symbol to be used in inlinable code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that’s defined in the same module as the declaration.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The declaration must have the ",
              "type" : "text"
            },
            {
              "code" : "internal",
              "type" : "codeVoice"
            },
            {
              "text" : " access-level modifier.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A structure or class marked ",
              "type" : "text"
            },
            {
              "code" : "usableFromInline",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can use only types that are public or ",
              "type" : "text"
            },
            {
              "code" : "usableFromInline",
              "type" : "codeVoice"
            },
            {
              "text" : " for its properties.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An enumeration marked ",
              "type" : "text"
            },
            {
              "code" : "usableFromInline",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can use only types that are public or ",
              "type" : "text"
            },
            {
              "code" : "usableFromInline",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for the raw values and associated values of its cases.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Like the ",
              "type" : "text"
            },
            {
              "code" : "public",
              "type" : "codeVoice"
            },
            {
              "text" : " access-level modifier,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "exposes the declaration as part of the module’s public interface.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Unlike ",
              "type" : "text"
            },
            {
              "code" : "public",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler doesn’t allow declarations marked with ",
              "type" : "text"
            },
            {
              "code" : "usableFromInline",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to be referenced by name in code outside the module,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even though the declaration’s symbol is exported.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, code outside the module might still be able",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to interact with the declaration’s symbol by using runtime behavior.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Declarations marked with the ",
              "type" : "text"
            },
            {
              "code" : "inlinable",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are implicitly usable from inlinable code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Although either ",
              "type" : "text"
            },
            {
              "code" : "inlinable",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "usableFromInline",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be applied to ",
              "type" : "text"
            },
            {
              "code" : "internal",
              "type" : "codeVoice"
            },
            {
              "text" : " declarations,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "applying both attributes is an error.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "warnunqualifiedaccess",
          "level" : 3,
          "text" : "warn_unqualified_access",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "top-level function, instance method, or class or static method",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to trigger warnings when that function or method is used",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without a preceding qualifier,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as a module name, type name, or instance variable or constant.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Use this attribute to help discourage ambiguity between functions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the same name that are accessible from the same scope.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the Swift standard library includes both a top-level",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "function and a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "method for sequences with comparable elements.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The sequence method is declared with the ",
              "type" : "text"
            },
            {
              "code" : "warn_unqualified_access",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to help reduce confusion",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when attempting to use one or the other from within a ",
              "type" : "text"
            },
            {
              "code" : "Sequence",
              "type" : "codeVoice"
            },
            {
              "text" : " extension.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Declaration-Attributes-Used-by-Interface-Builder",
          "level" : 3,
          "text" : "Declaration Attributes Used by Interface Builder",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Interface Builder attributes are declaration attributes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "used by Interface Builder to synchronize with Xcode.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift provides the following Interface Builder attributes:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "IBAction",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "IBSegueAction",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "IBOutlet",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "IBDesignable",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "IBInspectable",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These attributes are conceptually the same as their",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Objective-C counterparts.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You apply the ",
              "type" : "text"
            },
            {
              "code" : "IBOutlet",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "IBInspectable",
              "type" : "codeVoice"
            },
            {
              "text" : " attributes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to property declarations of a class.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You apply the ",
              "type" : "text"
            },
            {
              "code" : "IBAction",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "IBSegueAction",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to method declarations of a class",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the ",
              "type" : "text"
            },
            {
              "code" : "IBDesignable",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute to class declarations.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Applying the ",
              "type" : "text"
            },
            {
              "code" : "IBAction",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "IBSegueAction",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "IBOutlet",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "IBDesignable",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "IBInspectable",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "also implies the ",
              "type" : "text"
            },
            {
              "code" : "objc",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Type-Attributes",
          "level" : 2,
          "text" : "Type Attributes",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can apply type attributes to types only.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "autoclosure",
          "level" : 3,
          "text" : "autoclosure",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to delay the evaluation of an expression",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by automatically wrapping that expression in a closure with no arguments.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You apply it to a parameter’s type in a function or method declaration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for a parameter whose type is a function type that takes no arguments",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and that returns a value of the type of the expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For an example of how to use the ",
              "type" : "text"
            },
            {
              "code" : "autoclosure",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "convention",
          "level" : 3,
          "text" : "convention",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to the type of a function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate its calling conventions.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "convention",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute always appears with",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "one of the following arguments:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "code" : "swift",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " argument indicates a Swift function reference.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "This is the standard calling convention for function values in Swift.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "code" : "block",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " argument indicates an Objective-C compatible block reference.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "The function value is represented as a reference to the block object,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "which is an ",
                      "type" : "text"
                    },
                    {
                      "code" : "id",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "-compatible Objective-C object that embeds its invocation",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "function within the object.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "The invocation function uses the C calling convention.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The ",
                      "type" : "text"
                    },
                    {
                      "code" : "c",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " argument indicates a C function reference.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "The function value carries no context and uses the C calling convention.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "With a few exceptions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a function of any calling convention can be used",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when a function any other calling convention is needed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A nongeneric global function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a local function that doesn’t capture any local variables,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or a closure that doesn’t capture any local variables",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be converted to the C calling convention.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Other Swift functions can’t be converted to the C calling convention.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A function with the Objective-C block calling convention",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can’t be converted to the C calling convention.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "escaping",
          "level" : 3,
          "text" : "escaping",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a parameter’s type in a function or method declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that the parameter’s value can be stored for later execution.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This means that the value is allowed to outlive the lifetime of the call.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Function type parameters with the ",
              "type" : "text"
            },
            {
              "code" : "escaping",
              "type" : "codeVoice"
            },
            {
              "text" : " type attribute",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "require explicit use of ",
              "type" : "text"
            },
            {
              "code" : "self.",
              "type" : "codeVoice"
            },
            {
              "text" : " for properties or methods.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For an example of how to use the ",
              "type" : "text"
            },
            {
              "code" : "escaping",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Sendable",
          "level" : 3,
          "text" : "Sendable",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to the type of a function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that the function or closure is sendable.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Applying this attribute to a function type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "has the same meaning as conforming a non–function type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/sendable",
              "isActive" : true,
              "overridingTitle" : "Sendable",
              "overridingTitleInlineContent" : [
                {
                  "code" : "Sendable",
                  "type" : "codeVoice"
                }
              ],
              "type" : "reference"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This attribute is inferred on functions and closures",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if the function or closure is used in a context",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that expects a sendable value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the function or closure satisfies the requirements to be sendable.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A sendable function type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is a subtype of the corresponding nonsendable function type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Switch-Case-Attributes",
          "level" : 2,
          "text" : "Switch Case Attributes",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can apply switch case attributes to switch cases only.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "unknown",
          "level" : 3,
          "text" : "unknown",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this attribute to a switch case",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that it isn’t expected to be matched",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by any case of the enumeration that’s known",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "at the time the code is compiled.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For an example of how to use the ",
              "type" : "text"
            },
            {
              "code" : "unknown",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "attribute",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "@",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "attribute-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "attribute-argument-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "attribute-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "attribute-argument-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "balanced-tokens",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "attributes",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "attribute",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "attributes",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "balanced-tokens",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "balanced-token",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "balanced-tokens",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "balanced-token",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "balanced-tokens",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "balanced-token",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "[",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "balanced-tokens",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "]",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "balanced-token",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "{",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "balanced-tokens",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "?",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "}",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "balanced-token",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → Any identifier, keyword, literal, or operator",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "balanced-token",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → Any punctuation except  ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "(",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : ",  ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ")",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : ",  ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "[",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : ",  ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "]",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : ",  ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "{",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : ", or  ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "}",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of an attribute",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/the-swift-programming-language\/attributes"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Result-Builders": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Result-Builders",
  "kind" : "section",
  "title" : "Result Builders",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/advancedoperators#Result-Builders"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#inlinable": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#inlinable",
  "kind" : "section",
  "title" : "inlinable",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/attributes#inlinable"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Autoclosures": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures",
  "kind" : "section",
  "title" : "Autoclosures",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/closures#Autoclosures"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Escaping-Closures": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures",
  "kind" : "section",
  "title" : "Escaping Closures",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/closures#Escaping-Closures"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Top-Level-Code": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code",
  "kind" : "section",
  "title" : "Top-Level Code",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/declarations#Top-Level-Code"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switching-Over-Future-Enumeration-Cases": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases",
  "kind" : "section",
  "title" : "Switching Over Future Enumeration Cases",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/statements#Switching-Over-Future-Enumeration-Cases"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type",
  "kind" : "section",
  "title" : "Function Type",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/types#Function-Type"
},
"https://developer.apple.com/documentation/foundation/1395135-nsclassfromstring": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring",
  "title" : "NSClassFromString(_:)",
  "titleInlineContent" : [
    {
      "code" : "NSClassFromString(_:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring"
},
"https://developer.apple.com/documentation/swift/1538339-min/": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/",
  "title" : "min(_:_:)",
  "titleInlineContent" : [
    {
      "code" : "min(_:_:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/"
},
"https://developer.apple.com/documentation/swift/expressiblebyarrayliteral": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral",
  "title" : "ExpressibleByArrayLiteral",
  "titleInlineContent" : [
    {
      "code" : "ExpressibleByArrayLiteral",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral"
},
"https://developer.apple.com/documentation/swift/expressiblebydictionaryliteral": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral",
  "title" : "ExpressibleByDictionaryLiteral",
  "titleInlineContent" : [
    {
      "code" : "ExpressibleByDictionaryLiteral",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral"
},
"https://developer.apple.com/documentation/swift/expressiblebydictionaryliteral/2294108-key": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key",
  "title" : "Key",
  "titleInlineContent" : [
    {
      "code" : "Key",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key"
},
"https://developer.apple.com/documentation/swift/expressiblebystringliteral": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral",
  "title" : "ExpressibleByStringLiteral",
  "titleInlineContent" : [
    {
      "code" : "ExpressibleByStringLiteral",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral"
},
"https://developer.apple.com/documentation/swift/imported_c_and_objective-c_apis/importing_swift_into_objective-c": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c",
  "title" : "Importing Swift into Objective-C",
  "titleInlineContent" : [
    {
      "text" : "Importing Swift into Objective-C",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c"
},
"https://developer.apple.com/documentation/swift/keypath": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/keypath",
  "title" : "KeyPath",
  "titleInlineContent" : [
    {
      "code" : "KeyPath",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/keypath"
},
"https://developer.apple.com/documentation/swift/keyvaluepairs": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs",
  "title" : "KeyValuePairs",
  "titleInlineContent" : [
    {
      "code" : "KeyValuePairs",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs"
},
"https://developer.apple.com/documentation/swift/referencewritablekeypath": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath",
  "title" : "ReferenceWritableKeyPath",
  "titleInlineContent" : [
    {
      "code" : "ReferenceWritableKeyPath",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath"
},
"https://developer.apple.com/documentation/swift/sendable": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/sendable",
  "title" : "Sendable",
  "titleInlineContent" : [
    {
      "code" : "Sendable",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/sendable"
},
"https://developer.apple.com/documentation/swift/sequence/1641174-min": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min",
  "title" : "min()",
  "titleInlineContent" : [
    {
      "code" : "min()",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min"
},
"https://developer.apple.com/documentation/swift/writablekeypath": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath",
  "title" : "WritableKeyPath",
  "titleInlineContent" : [
    {
      "code" : "WritableKeyPath",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath"
},
"https://developer.apple.com/documentation/uikit/1622933-uiapplicationmain": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain",
  "title" : "UIApplicationMain(_:_:_:_:)",
  "titleInlineContent" : [
    {
      "code" : "UIApplicationMain(_:_:_:_:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain"
},
"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Conventions/Conventions.html#//apple_ref/doc/uid/TP40011210-CH10-SW1": {
  "identifier" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1",
  "title" : "Conventions",
  "titleInlineContent" : [
    {
      "text" : "Conventions",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1"
},
"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011210": {
  "identifier" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210",
  "title" : "Programming with Objective-C",
  "titleInlineContent" : [
    {
      "text" : "Programming with Objective-C",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210"
},
"https://help.apple.com/xcode/mac/current/#/dev04b3a04ba": {
  "identifier" : "https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba",
  "title" : "Xcode Help",
  "titleInlineContent" : [
    {
      "text" : "Xcode Help",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba"
}
}
}