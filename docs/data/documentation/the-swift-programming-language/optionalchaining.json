{
  "abstract" : [
    {
      "text" : "Access members of an optional value without unwrapping.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "The Swift Programming Language"
      }
    ],
    "title" : "Optional Chaining"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Optional chaining",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is a process for querying and calling",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "properties, methods, and subscripts on an optional that might currently be ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the optional contains a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the property, method, or subscript call succeeds;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if the optional is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ", the property, method, or subscript call returns ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Multiple queries can be chained together,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the entire chain fails gracefully if any link in the chain is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Optional chaining in Swift is similar to messaging ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " in Objective-C,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "but in a way that works for any type, and that can be checked for success or failure.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping",
          "level" : 2,
          "text" : "Optional Chaining as an Alternative to Forced Unwrapping",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You specify optional chaining by placing a question mark (",
              "type" : "text"
            },
            {
              "code" : "?",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after the optional value on which you wish to call a property, method or subscript",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if the optional is non-",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is very similar to placing an exclamation point (",
              "type" : "text"
            },
            {
              "code" : "!",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after an optional value to force the unwrapping of its value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The main difference is that optional chaining fails gracefully when the optional is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whereas forced unwrapping triggers a runtime error when the optional is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To reflect the fact that optional chaining can be called on a ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the result of an optional chaining call is always an optional value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even if the property, method, or subscript you are querying returns a non-optional value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use this optional return value to check whether",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the optional chaining call was successful",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(the returned optional contains a value),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or didn’t succeed due to a ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " value in the chain",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(the returned optional value is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Specifically, the result of an optional chaining call",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is of the same type as the expected return value, but wrapped in an optional.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A property that normally returns an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " will return an ",
              "type" : "text"
            },
            {
              "code" : "Int?",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when accessed through optional chaining.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The next several code snippets demonstrate",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "how optional chaining differs from forced unwrapping",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and enables you to check for success.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "First, two classes called ",
              "type" : "text"
            },
            {
              "code" : "Person",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " are defined:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class Person {",
            "    var residence: Residence?",
            "}",
            "",
            "class Residence {",
            "    var numberOfRooms = 1",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " instances have a single ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " property called ",
              "type" : "text"
            },
            {
              "code" : "numberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a default value of ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Person",
              "type" : "codeVoice"
            },
            {
              "text" : " instances have an optional ",
              "type" : "text"
            },
            {
              "code" : "residence",
              "type" : "codeVoice"
            },
            {
              "text" : " property of type ",
              "type" : "text"
            },
            {
              "code" : "Residence?",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you create a new ",
              "type" : "text"
            },
            {
              "code" : "Person",
              "type" : "codeVoice"
            },
            {
              "text" : " instance,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "its ",
              "type" : "text"
            },
            {
              "code" : "residence",
              "type" : "codeVoice"
            },
            {
              "text" : " property is default initialized to ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by virtue of being optional.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the code below, ",
              "type" : "text"
            },
            {
              "code" : "john",
              "type" : "codeVoice"
            },
            {
              "text" : " has a ",
              "type" : "text"
            },
            {
              "code" : "residence",
              "type" : "codeVoice"
            },
            {
              "text" : " property value of ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let john = Person()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you try to access the ",
              "type" : "text"
            },
            {
              "code" : "numberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : " property of this person’s ",
              "type" : "text"
            },
            {
              "code" : "residence",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by placing an exclamation point after ",
              "type" : "text"
            },
            {
              "code" : "residence",
              "type" : "codeVoice"
            },
            {
              "text" : " to force the unwrapping of its value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you trigger a runtime error,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because there’s no ",
              "type" : "text"
            },
            {
              "code" : "residence",
              "type" : "codeVoice"
            },
            {
              "text" : " value to unwrap:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let roomCount = john.residence!.numberOfRooms",
            "\/\/ this triggers a runtime error"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The code above succeeds when ",
              "type" : "text"
            },
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : " has a non-",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and will set ",
              "type" : "text"
            },
            {
              "code" : "roomCount",
              "type" : "codeVoice"
            },
            {
              "text" : " to an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " value containing the appropriate number of rooms.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, this code always triggers a runtime error when ",
              "type" : "text"
            },
            {
              "code" : "residence",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as illustrated above.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Optional chaining provides an alternative way to access the value of ",
              "type" : "text"
            },
            {
              "code" : "numberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To use optional chaining, use a question mark in place of the exclamation point:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let roomCount = john.residence?.numberOfRooms {",
            "    print(\"John's residence has \\(roomCount) room(s).\")",
            "} else {",
            "    print(\"Unable to retrieve the number of rooms.\")",
            "}",
            "\/\/ Prints \"Unable to retrieve the number of rooms.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This tells Swift to “chain” on the optional ",
              "type" : "text"
            },
            {
              "code" : "residence",
              "type" : "codeVoice"
            },
            {
              "text" : " property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to retrieve the value of ",
              "type" : "text"
            },
            {
              "code" : "numberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : " if ",
              "type" : "text"
            },
            {
              "code" : "residence",
              "type" : "codeVoice"
            },
            {
              "text" : " exists.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because the attempt to access ",
              "type" : "text"
            },
            {
              "code" : "numberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : " has the potential to fail,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the optional chaining attempt returns a value of type ",
              "type" : "text"
            },
            {
              "code" : "Int?",
              "type" : "codeVoice"
            },
            {
              "text" : ", or “optional ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : "”.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When ",
              "type" : "text"
            },
            {
              "code" : "residence",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ", as in the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this optional ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " will also be ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to reflect the fact that it was not possible to access ",
              "type" : "text"
            },
            {
              "code" : "numberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The optional ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " is accessed through optional binding",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to unwrap the integer and assign the non-optional value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the ",
              "type" : "text"
            },
            {
              "code" : "roomCount",
              "type" : "codeVoice"
            },
            {
              "text" : " constant.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that this is true even though ",
              "type" : "text"
            },
            {
              "code" : "numberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : " is a non-optional ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The fact that it’s queried through an optional chain",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "means that the call to ",
              "type" : "text"
            },
            {
              "code" : "numberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "will always return an ",
              "type" : "text"
            },
            {
              "code" : "Int?",
              "type" : "codeVoice"
            },
            {
              "text" : " instead of an ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can assign a ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " instance to ",
              "type" : "text"
            },
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so that it no longer has a ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " value:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "john.residence = Residence()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : " now contains an actual ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " instance, rather than ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you try to access ",
              "type" : "text"
            },
            {
              "code" : "numberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : " with the same optional chaining as before,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it will now return an ",
              "type" : "text"
            },
            {
              "code" : "Int?",
              "type" : "codeVoice"
            },
            {
              "text" : " that contains",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the default ",
              "type" : "text"
            },
            {
              "code" : "numberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : " value of ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let roomCount = john.residence?.numberOfRooms {",
            "    print(\"John's residence has \\(roomCount) room(s).\")",
            "} else {",
            "    print(\"Unable to retrieve the number of rooms.\")",
            "}",
            "\/\/ Prints \"John's residence has 1 room(s).\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Defining-Model-Classes-for-Optional-Chaining",
          "level" : 2,
          "text" : "Defining Model Classes for Optional Chaining",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use optional chaining with calls to properties, methods, and subscripts",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that are more than one level deep.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This enables you to drill down into subproperties",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "within complex models of interrelated types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to check whether it’s possible to access",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "properties, methods, and subscripts on those subproperties.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The code snippets below define four model classes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for use in several subsequent examples,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "including examples of multilevel optional chaining.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These classes expand upon the ",
              "type" : "text"
            },
            {
              "code" : "Person",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " model from above",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by adding a ",
              "type" : "text"
            },
            {
              "code" : "Room",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Address",
              "type" : "codeVoice"
            },
            {
              "text" : " class,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with associated properties, methods, and subscripts.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Person",
              "type" : "codeVoice"
            },
            {
              "text" : " class is defined in the same way as before:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class Person {",
            "    var residence: Residence?",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " class is more complex than before.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This time, the ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " class defines a variable property called ",
              "type" : "text"
            },
            {
              "code" : "rooms",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is initialized with an empty array of type ",
              "type" : "text"
            },
            {
              "code" : "[Room]",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class Residence {",
            "    var rooms: [Room] = []",
            "    var numberOfRooms: Int {",
            "        return rooms.count",
            "    }",
            "    subscript(i: Int) -> Room {",
            "        get {",
            "            return rooms[i]",
            "        }",
            "        set {",
            "            rooms[i] = newValue",
            "        }",
            "    }",
            "    func printNumberOfRooms() {",
            "        print(\"The number of rooms is \\(numberOfRooms)\")",
            "    }",
            "    var address: Address?",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because this version of ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " stores an array of ",
              "type" : "text"
            },
            {
              "code" : "Room",
              "type" : "codeVoice"
            },
            {
              "text" : " instances,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "its ",
              "type" : "text"
            },
            {
              "code" : "numberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : " property is implemented as a computed property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "not a stored property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The computed ",
              "type" : "text"
            },
            {
              "code" : "numberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : " property simply returns",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of the ",
              "type" : "text"
            },
            {
              "code" : "count",
              "type" : "codeVoice"
            },
            {
              "text" : " property from the ",
              "type" : "text"
            },
            {
              "code" : "rooms",
              "type" : "codeVoice"
            },
            {
              "text" : " array.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "As a shortcut to accessing its ",
              "type" : "text"
            },
            {
              "code" : "rooms",
              "type" : "codeVoice"
            },
            {
              "text" : " array,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this version of ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " provides a read-write subscript that provides access to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the room at the requested index in the ",
              "type" : "text"
            },
            {
              "code" : "rooms",
              "type" : "codeVoice"
            },
            {
              "text" : " array.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This version of ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " also provides a method called ",
              "type" : "text"
            },
            {
              "code" : "printNumberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which simply prints the number of rooms in the residence.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Finally, ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " defines an optional property called ",
              "type" : "text"
            },
            {
              "code" : "address",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with a type of ",
              "type" : "text"
            },
            {
              "code" : "Address?",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Address",
              "type" : "codeVoice"
            },
            {
              "text" : " class type for this property is defined below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Room",
              "type" : "codeVoice"
            },
            {
              "text" : " class used for the ",
              "type" : "text"
            },
            {
              "code" : "rooms",
              "type" : "codeVoice"
            },
            {
              "text" : " array is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a simple class with one property called ",
              "type" : "text"
            },
            {
              "code" : "name",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and an initializer to set that property to a suitable room name:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class Room {",
            "    let name: String",
            "    init(name: String) { self.name = name }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The final class in this model is called ",
              "type" : "text"
            },
            {
              "code" : "Address",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This class has three optional properties of type ",
              "type" : "text"
            },
            {
              "code" : "String?",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The first two properties, ",
              "type" : "text"
            },
            {
              "code" : "buildingName",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "buildingNumber",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are alternative ways to identify a particular building as part of an address.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The third property, ",
              "type" : "text"
            },
            {
              "code" : "street",
              "type" : "codeVoice"
            },
            {
              "text" : ", is used to name the street for that address:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class Address {",
            "    var buildingName: String?",
            "    var buildingNumber: String?",
            "    var street: String?",
            "    func buildingIdentifier() -> String? {",
            "        if let buildingNumber = buildingNumber, let street = street {",
            "          return \"\\(buildingNumber) \\(street)\"",
            "        } else if buildingName != nil {",
            "          return buildingName",
            "        } else {",
            "          return nil",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Address",
              "type" : "codeVoice"
            },
            {
              "text" : " class also provides a method called ",
              "type" : "text"
            },
            {
              "code" : "buildingIdentifier()",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which has a return type of ",
              "type" : "text"
            },
            {
              "code" : "String?",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This method checks the properties of the address",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and returns ",
              "type" : "text"
            },
            {
              "code" : "buildingName",
              "type" : "codeVoice"
            },
            {
              "text" : " if it has a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or ",
              "type" : "text"
            },
            {
              "code" : "buildingNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " concatenated with ",
              "type" : "text"
            },
            {
              "code" : "street",
              "type" : "codeVoice"
            },
            {
              "text" : " if both have values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " otherwise.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Accessing-Properties-Through-Optional-Chaining",
          "level" : 2,
          "text" : "Accessing Properties Through Optional Chaining",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "As demonstrated in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use optional chaining to access a property on an optional value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to check if that property access is successful.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use the classes defined above to create a new ",
              "type" : "text"
            },
            {
              "code" : "Person",
              "type" : "codeVoice"
            },
            {
              "text" : " instance,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and try to access its ",
              "type" : "text"
            },
            {
              "code" : "numberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : " property as before:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let john = Person()",
            "if let roomCount = john.residence?.numberOfRooms {",
            "    print(\"John's residence has \\(roomCount) room(s).\")",
            "} else {",
            "    print(\"Unable to retrieve the number of rooms.\")",
            "}",
            "\/\/ Prints \"Unable to retrieve the number of rooms.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this optional chaining call fails in the same way as before.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also attempt to set a property’s value through optional chaining:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let someAddress = Address()",
            "someAddress.buildingNumber = \"29\"",
            "someAddress.street = \"Acacia Road\"",
            "john.residence?.address = someAddress"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the attempt to set the ",
              "type" : "text"
            },
            {
              "code" : "address",
              "type" : "codeVoice"
            },
            {
              "text" : " property of ",
              "type" : "text"
            },
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : " will fail,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because ",
              "type" : "text"
            },
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : " is currently ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The assignment is part of the optional chaining,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which means none of the code on the right-hand side of the ",
              "type" : "text"
            },
            {
              "code" : "=",
              "type" : "codeVoice"
            },
            {
              "text" : " operator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is evaluated.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the previous example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s not easy to see that ",
              "type" : "text"
            },
            {
              "code" : "someAddress",
              "type" : "codeVoice"
            },
            {
              "text" : " is never evaluated,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because accessing a constant doesn’t have any side effects.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The listing below does the same assignment,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but it uses a function to create the address.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The function prints “Function was called” before returning a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which lets you see",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whether the right-hand side of the ",
              "type" : "text"
            },
            {
              "code" : "=",
              "type" : "codeVoice"
            },
            {
              "text" : " operator was evaluated.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func createAddress() -> Address {",
            "    print(\"Function was called.\")",
            "",
            "    let someAddress = Address()",
            "    someAddress.buildingNumber = \"29\"",
            "    someAddress.street = \"Acacia Road\"",
            "",
            "    return someAddress",
            "}",
            "john.residence?.address = createAddress()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can tell that the ",
              "type" : "text"
            },
            {
              "code" : "createAddress()",
              "type" : "codeVoice"
            },
            {
              "text" : " function isn’t called,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because nothing is printed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Calling-Methods-Through-Optional-Chaining",
          "level" : 2,
          "text" : "Calling Methods Through Optional Chaining",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use optional chaining to call a method on an optional value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to check whether that method call is successful.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can do this even if that method doesn’t define a return value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "printNumberOfRooms()",
              "type" : "codeVoice"
            },
            {
              "text" : " method on the ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " class",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "prints the current value of ",
              "type" : "text"
            },
            {
              "code" : "numberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s how the method looks:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func printNumberOfRooms() {",
            "    print(\"The number of rooms is \\(numberOfRooms)\")",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This method doesn’t specify a return type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, functions and methods with no return type have an implicit return type of ",
              "type" : "text"
            },
            {
              "code" : "Void",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-Without-Return-Values",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This means that they return a value of ",
              "type" : "text"
            },
            {
              "code" : "()",
              "type" : "codeVoice"
            },
            {
              "text" : ", or an empty tuple.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you call this method on an optional value with optional chaining,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the method’s return type will be ",
              "type" : "text"
            },
            {
              "code" : "Void?",
              "type" : "codeVoice"
            },
            {
              "text" : ", not ",
              "type" : "text"
            },
            {
              "code" : "Void",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because return values are always of an optional type when called through optional chaining.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This enables you to use an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to check whether it was possible to call the ",
              "type" : "text"
            },
            {
              "code" : "printNumberOfRooms()",
              "type" : "codeVoice"
            },
            {
              "text" : " method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even though the method doesn’t itself define a return value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Compare the return value from the ",
              "type" : "text"
            },
            {
              "code" : "printNumberOfRooms",
              "type" : "codeVoice"
            },
            {
              "text" : " call against ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to see if the method call was successful:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if john.residence?.printNumberOfRooms() != nil {",
            "    print(\"It was possible to print the number of rooms.\")",
            "} else {",
            "    print(\"It was not possible to print the number of rooms.\")",
            "}",
            "\/\/ Prints \"It was not possible to print the number of rooms.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The same is true if you attempt to set a property through optional chaining.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example above in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "attempts to set an ",
              "type" : "text"
            },
            {
              "code" : "address",
              "type" : "codeVoice"
            },
            {
              "text" : " value for ",
              "type" : "text"
            },
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even though the ",
              "type" : "text"
            },
            {
              "code" : "residence",
              "type" : "codeVoice"
            },
            {
              "text" : " property is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Any attempt to set a property through optional chaining returns a value of type ",
              "type" : "text"
            },
            {
              "code" : "Void?",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which enables you to compare against ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " to see if the property was set successfully:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if (john.residence?.address = someAddress) != nil {",
            "    print(\"It was possible to set the address.\")",
            "} else {",
            "    print(\"It was not possible to set the address.\")",
            "}",
            "\/\/ Prints \"It was not possible to set the address.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Accessing-Subscripts-Through-Optional-Chaining",
          "level" : 2,
          "text" : "Accessing Subscripts Through Optional Chaining",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use optional chaining to try to retrieve and set",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a value from a subscript on an optional value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to check whether that subscript call is successful.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "When you access a subscript on an optional value through optional chaining,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you place the question mark ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "before",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " the subscript’s brackets, not after.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The optional chaining question mark always follows immediately after",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the part of the expression that’s optional.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below tries to retrieve the name of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the first room in the ",
              "type" : "text"
            },
            {
              "code" : "rooms",
              "type" : "codeVoice"
            },
            {
              "text" : " array of the ",
              "type" : "text"
            },
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : " property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using the subscript defined on the ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " class.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : " is currently ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the subscript call fails:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let firstRoomName = john.residence?[0].name {",
            "    print(\"The first room name is \\(firstRoomName).\")",
            "} else {",
            "    print(\"Unable to retrieve the first room name.\")",
            "}",
            "\/\/ Prints \"Unable to retrieve the first room name.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The optional chaining question mark in this subscript call",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is placed immediately after ",
              "type" : "text"
            },
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : ", before the subscript brackets,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because ",
              "type" : "text"
            },
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : " is the optional value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "on which optional chaining is being attempted.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Similarly, you can try to set a new value through a subscript with optional chaining:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "john.residence?[0] = Room(name: \"Bathroom\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This subscript setting attempt also fails, because ",
              "type" : "text"
            },
            {
              "code" : "residence",
              "type" : "codeVoice"
            },
            {
              "text" : " is currently ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you create and assign an actual ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " instance to ",
              "type" : "text"
            },
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with one or more ",
              "type" : "text"
            },
            {
              "code" : "Room",
              "type" : "codeVoice"
            },
            {
              "text" : " instances in its ",
              "type" : "text"
            },
            {
              "code" : "rooms",
              "type" : "codeVoice"
            },
            {
              "text" : " array,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use the ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " subscript to access",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the actual items in the ",
              "type" : "text"
            },
            {
              "code" : "rooms",
              "type" : "codeVoice"
            },
            {
              "text" : " array through optional chaining:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let johnsHouse = Residence()",
            "johnsHouse.rooms.append(Room(name: \"Living Room\"))",
            "johnsHouse.rooms.append(Room(name: \"Kitchen\"))",
            "john.residence = johnsHouse",
            "",
            "if let firstRoomName = john.residence?[0].name {",
            "    print(\"The first room name is \\(firstRoomName).\")",
            "} else {",
            "    print(\"Unable to retrieve the first room name.\")",
            "}",
            "\/\/ Prints \"The first room name is Living Room.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Accessing-Subscripts-of-Optional-Type",
          "level" : 3,
          "text" : "Accessing Subscripts of Optional Type",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If a subscript returns a value of optional type —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as the key subscript of Swift’s ",
              "type" : "text"
            },
            {
              "code" : "Dictionary",
              "type" : "codeVoice"
            },
            {
              "text" : " type —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "place a question mark ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "after",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " the subscript’s closing bracket",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to chain on its optional return value:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var testScores = [\"Dave\": [86, 82, 84], \"Bev\": [79, 94, 81]]",
            "testScores[\"Dave\"]?[0] = 91",
            "testScores[\"Bev\"]?[0] += 1",
            "testScores[\"Brian\"]?[0] = 72",
            "\/\/ the \"Dave\" array is now [91, 82, 84] and the \"Bev\" array is now [80, 94, 81]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above defines a dictionary called ",
              "type" : "text"
            },
            {
              "code" : "testScores",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which contains two key-value pairs that map a ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " key to an array of ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example uses optional chaining to set the first item in the ",
              "type" : "text"
            },
            {
              "code" : "\"Dave\"",
              "type" : "codeVoice"
            },
            {
              "text" : " array to ",
              "type" : "text"
            },
            {
              "code" : "91",
              "type" : "codeVoice"
            },
            {
              "text" : ";",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to increment the first item in the ",
              "type" : "text"
            },
            {
              "code" : "\"Bev\"",
              "type" : "codeVoice"
            },
            {
              "text" : " array by ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : ";",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to try to set the first item in an array for a key of ",
              "type" : "text"
            },
            {
              "code" : "\"Brian\"",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The first two calls succeed, because the ",
              "type" : "text"
            },
            {
              "code" : "testScores",
              "type" : "codeVoice"
            },
            {
              "text" : " dictionary",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "contains keys for ",
              "type" : "text"
            },
            {
              "code" : "\"Dave\"",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "\"Bev\"",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The third call fails, because the ",
              "type" : "text"
            },
            {
              "code" : "testScores",
              "type" : "codeVoice"
            },
            {
              "text" : " dictionary",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "doesn’t contain a key for ",
              "type" : "text"
            },
            {
              "code" : "\"Brian\"",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Linking-Multiple-Levels-of-Chaining",
          "level" : 2,
          "text" : "Linking Multiple Levels of Chaining",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can link together multiple levels of optional chaining",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to drill down to properties, methods, and subscripts deeper within a model.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, multiple levels of optional chaining",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "don’t add more levels of optionality to the returned value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To put it another way:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If the type you are trying to retrieve isn’t optional,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "it will become optional because of the optional chaining.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If the type you are trying to retrieve is ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "already",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " optional,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "it will not become ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "more",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " optional because of the chaining.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Therefore:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If you try to retrieve an ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " value through optional chaining,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "an ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int?",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is always returned,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "no matter how many levels of chaining are used.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Similarly, if you try to retrieve an ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int?",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " value through optional chaining,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "an ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int?",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is always returned,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "no matter how many levels of chaining are used.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below tries to access the ",
              "type" : "text"
            },
            {
              "code" : "street",
              "type" : "codeVoice"
            },
            {
              "text" : " property of the ",
              "type" : "text"
            },
            {
              "code" : "address",
              "type" : "codeVoice"
            },
            {
              "text" : " property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of the ",
              "type" : "text"
            },
            {
              "code" : "residence",
              "type" : "codeVoice"
            },
            {
              "text" : " property of ",
              "type" : "text"
            },
            {
              "code" : "john",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "There are ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "two",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " levels of optional chaining in use here,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to chain through the ",
              "type" : "text"
            },
            {
              "code" : "residence",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "address",
              "type" : "codeVoice"
            },
            {
              "text" : " properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "both of which are of optional type:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let johnsStreet = john.residence?.address?.street {",
            "    print(\"John's street name is \\(johnsStreet).\")",
            "} else {",
            "    print(\"Unable to retrieve the address.\")",
            "}",
            "\/\/ Prints \"Unable to retrieve the address.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The value of ",
              "type" : "text"
            },
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : " currently contains a valid ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " instance.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, the value of ",
              "type" : "text"
            },
            {
              "code" : "john.residence.address",
              "type" : "codeVoice"
            },
            {
              "text" : " is currently ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because of this, the call to ",
              "type" : "text"
            },
            {
              "code" : "john.residence?.address?.street",
              "type" : "codeVoice"
            },
            {
              "text" : " fails.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that in the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you are trying to retrieve the value of the ",
              "type" : "text"
            },
            {
              "code" : "street",
              "type" : "codeVoice"
            },
            {
              "text" : " property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The type of this property is ",
              "type" : "text"
            },
            {
              "code" : "String?",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The return value of ",
              "type" : "text"
            },
            {
              "code" : "john.residence?.address?.street",
              "type" : "codeVoice"
            },
            {
              "text" : " is therefore also ",
              "type" : "text"
            },
            {
              "code" : "String?",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even though two levels of optional chaining are applied in addition to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the underlying optional type of the property.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you set an actual ",
              "type" : "text"
            },
            {
              "code" : "Address",
              "type" : "codeVoice"
            },
            {
              "text" : " instance as the value for ",
              "type" : "text"
            },
            {
              "code" : "john.residence.address",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and set an actual value for the address’s ",
              "type" : "text"
            },
            {
              "code" : "street",
              "type" : "codeVoice"
            },
            {
              "text" : " property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can access the value of the ",
              "type" : "text"
            },
            {
              "code" : "street",
              "type" : "codeVoice"
            },
            {
              "text" : " property through multilevel optional chaining:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let johnsAddress = Address()",
            "johnsAddress.buildingName = \"The Larches\"",
            "johnsAddress.street = \"Laurel Street\"",
            "john.residence?.address = johnsAddress",
            "",
            "if let johnsStreet = john.residence?.address?.street {",
            "    print(\"John's street name is \\(johnsStreet).\")",
            "} else {",
            "    print(\"Unable to retrieve the address.\")",
            "}",
            "\/\/ Prints \"John's street name is Laurel Street.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the attempt to set the ",
              "type" : "text"
            },
            {
              "code" : "address",
              "type" : "codeVoice"
            },
            {
              "text" : " property of ",
              "type" : "text"
            },
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : " will succeed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because the value of ",
              "type" : "text"
            },
            {
              "code" : "john.residence",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "currently contains a valid ",
              "type" : "text"
            },
            {
              "code" : "Residence",
              "type" : "codeVoice"
            },
            {
              "text" : " instance.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Chaining-on-Methods-with-Optional-Return-Values",
          "level" : 2,
          "text" : "Chaining on Methods with Optional Return Values",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The previous example shows how to retrieve the value of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a property of optional type through optional chaining.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can also use optional chaining to call a method that returns a value of optional type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to chain on that method’s return value if needed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below calls the ",
              "type" : "text"
            },
            {
              "code" : "Address",
              "type" : "codeVoice"
            },
            {
              "text" : " class’s ",
              "type" : "text"
            },
            {
              "code" : "buildingIdentifier()",
              "type" : "codeVoice"
            },
            {
              "text" : " method",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "through optional chaining. This method returns a value of type ",
              "type" : "text"
            },
            {
              "code" : "String?",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As described above, the ultimate return type of this method call after optional chaining",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is also ",
              "type" : "text"
            },
            {
              "code" : "String?",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let buildingIdentifier = john.residence?.address?.buildingIdentifier() {",
            "    print(\"John's building identifier is \\(buildingIdentifier).\")",
            "}",
            "\/\/ Prints \"John's building identifier is The Larches.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you want to perform further optional chaining on this method’s return value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "place the optional chaining question mark ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "after",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " the method’s parentheses:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let beginsWithThe =",
            "    john.residence?.address?.buildingIdentifier()?.hasPrefix(\"The\") {",
            "    if beginsWithThe {",
            "        print(\"John's building identifier begins with \\\"The\\\".\")",
            "    } else {",
            "        print(\"John's building identifier doesn't begin with \\\"The\\\".\")",
            "    }",
            "}",
            "\/\/ Prints \"John's building identifier begins with \"The\".\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "In the example above,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you place the optional chaining question mark ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "after",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " the parentheses,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "because the optional value you are chaining on is",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the ",
                  "type" : "text"
                },
                {
                  "code" : "buildingIdentifier()",
                  "type" : "codeVoice"
                },
                {
                  "text" : " method’s return value,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and not the ",
                  "type" : "text"
                },
                {
                  "code" : "buildingIdentifier()",
                  "type" : "codeVoice"
                },
                {
                  "text" : " method itself.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/the-swift-programming-language\/optionalchaining"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-Without-Return-Values": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-Without-Return-Values",
  "kind" : "section",
  "title" : "Functions Without Return Values",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/functions#Functions-Without-Return-Values"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Properties-Through-Optional-Chaining": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining",
  "kind" : "section",
  "title" : "Accessing Properties Through Optional Chaining",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Properties-Through-Optional-Chaining"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping",
  "kind" : "section",
  "title" : "Optional Chaining as an Alternative to Forced Unwrapping",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/optionalchaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping"
}
}
}