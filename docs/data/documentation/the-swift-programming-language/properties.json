{
  "abstract" : [
    {
      "text" : "Access stored and computed values that are part of an instance or type.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "The Swift Programming Language"
      }
    ],
    "title" : "Properties"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Properties",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " associate values with a particular class, structure, or enumeration.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Stored properties store constant and variable values as part of an instance,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whereas computed properties calculate (rather than store) a value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Computed properties are provided by classes, structures, and enumerations.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Stored properties are provided only by classes and structures.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Stored and computed properties are usually associated with instances of a particular type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, properties can also be associated with the type itself.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Such properties are known as type properties.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In addition, you can define property observers to monitor changes in a property’s value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which you can respond to with custom actions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Property observers can be added to stored properties you define yourself,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and also to properties that a subclass inherits from its superclass.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also use a property wrapper",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to reuse code in the getter and setter of multiple properties.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Stored-Properties",
          "level" : 2,
          "text" : "Stored Properties",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In its simplest form, a stored property is a constant or variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that’s stored as part of an instance of a particular class or structure.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Stored properties can be either",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "variable stored properties",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (introduced by the ",
              "type" : "text"
            },
            {
              "code" : "var",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "constant stored properties",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (introduced by the ",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can provide a default value for a stored property as part of its definition,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Property-Values",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can also set and modify the initial value for a stored property during initialization.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is true even for constant stored properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Assigning-Constant-Properties-During-Initialization",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below defines a structure called ",
              "type" : "text"
            },
            {
              "code" : "FixedLengthRange",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which describes a range of integers",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whose range length can’t be changed after it’s created:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct FixedLengthRange {",
            "    var firstValue: Int",
            "    let length: Int",
            "}",
            "var rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3)",
            "\/\/ the range represents integer values 0, 1, and 2",
            "rangeOfThreeItems.firstValue = 6",
            "\/\/ the range now represents integer values 6, 7, and 8"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Instances of ",
              "type" : "text"
            },
            {
              "code" : "FixedLengthRange",
              "type" : "codeVoice"
            },
            {
              "text" : " have",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a variable stored property called ",
              "type" : "text"
            },
            {
              "code" : "firstValue",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a constant stored property called ",
              "type" : "text"
            },
            {
              "code" : "length",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the example above, ",
              "type" : "text"
            },
            {
              "code" : "length",
              "type" : "codeVoice"
            },
            {
              "text" : " is initialized when the new range is created",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can’t be changed thereafter, because it’s a constant property.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Stored-Properties-of-Constant-Structure-Instances",
          "level" : 3,
          "text" : "Stored Properties of Constant Structure Instances",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you create an instance of a structure",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and assign that instance to a constant,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can’t modify the instance’s properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even if they were declared as variable properties:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let rangeOfFourItems = FixedLengthRange(firstValue: 0, length: 4)",
            "\/\/ this range represents integer values 0, 1, 2, and 3",
            "rangeOfFourItems.firstValue = 6",
            "\/\/ this will report an error, even though firstValue is a variable property"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "rangeOfFourItems",
              "type" : "codeVoice"
            },
            {
              "text" : " is declared as a constant (with the ",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it isn’t possible to change its ",
              "type" : "text"
            },
            {
              "code" : "firstValue",
              "type" : "codeVoice"
            },
            {
              "text" : " property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even though ",
              "type" : "text"
            },
            {
              "code" : "firstValue",
              "type" : "codeVoice"
            },
            {
              "text" : " is a variable property.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This behavior is due to structures being ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "value types",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When an instance of a value type is marked as a constant,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so are all of its properties.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The same isn’t true for classes, which are ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "reference types",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you assign an instance of a reference type to a constant,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can still change that instance’s variable properties.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Lazy-Stored-Properties",
          "level" : 3,
          "text" : "Lazy Stored Properties",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "lazy stored property",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is a property whose initial value isn’t calculated",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "until the first time it’s used.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You indicate a lazy stored property by writing",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "lazy",
              "type" : "codeVoice"
            },
            {
              "text" : " modifier before its declaration.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "You must always declare a lazy property as a variable (with the ",
                  "type" : "text"
                },
                {
                  "code" : "var",
                  "type" : "codeVoice"
                },
                {
                  "text" : " keyword),",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "because its initial value might not be retrieved until",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "after instance initialization completes.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Constant properties must always have a value ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "before",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " initialization completes,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and therefore can’t be declared as lazy.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Lazy properties are useful when the initial value for a property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is dependent on outside factors whose values aren’t known",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "until after an instance’s initialization is complete.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Lazy properties are also useful when the initial value for a property requires",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "complex or computationally expensive setup that shouldn’t be performed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "unless or until it’s needed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example below uses a lazy stored property to avoid",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "unnecessary initialization of a complex class.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This example defines two classes called ",
              "type" : "text"
            },
            {
              "code" : "DataImporter",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "DataManager",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "neither of which is shown in full:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class DataImporter {",
            "    \/*",
            "    DataImporter is a class to import data from an external file.",
            "    The class is assumed to take a nontrivial amount of time to initialize.",
            "    *\/",
            "    var filename = \"data.txt\"",
            "    \/\/ the DataImporter class would provide data importing functionality here",
            "}",
            "",
            "class DataManager {",
            "    lazy var importer = DataImporter()",
            "    var data: [String] = []",
            "    \/\/ the DataManager class would provide data management functionality here",
            "}",
            "",
            "let manager = DataManager()",
            "manager.data.append(\"Some data\")",
            "manager.data.append(\"Some more data\")",
            "\/\/ the DataImporter instance for the importer property hasn't yet been created"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "DataManager",
              "type" : "codeVoice"
            },
            {
              "text" : " class has a stored property called ",
              "type" : "text"
            },
            {
              "code" : "data",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is initialized with a new, empty array of ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Although the rest of its functionality isn’t shown,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the purpose of this ",
              "type" : "text"
            },
            {
              "code" : "DataManager",
              "type" : "codeVoice"
            },
            {
              "text" : " class is to manage and provide access to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this array of ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " data.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Part of the functionality of the ",
              "type" : "text"
            },
            {
              "code" : "DataManager",
              "type" : "codeVoice"
            },
            {
              "text" : " class",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is the ability to import data from a file.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This functionality is provided by the ",
              "type" : "text"
            },
            {
              "code" : "DataImporter",
              "type" : "codeVoice"
            },
            {
              "text" : " class,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is assumed to take a nontrivial amount of time to initialize.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This might be because a ",
              "type" : "text"
            },
            {
              "code" : "DataImporter",
              "type" : "codeVoice"
            },
            {
              "text" : " instance needs to open a file",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and read its contents into memory when the ",
              "type" : "text"
            },
            {
              "code" : "DataImporter",
              "type" : "codeVoice"
            },
            {
              "text" : " instance is initialized.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because it’s possible for a ",
              "type" : "text"
            },
            {
              "code" : "DataManager",
              "type" : "codeVoice"
            },
            {
              "text" : " instance to manage its data",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without ever importing data from a file,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "DataManager",
              "type" : "codeVoice"
            },
            {
              "text" : " doesn’t create a new ",
              "type" : "text"
            },
            {
              "code" : "DataImporter",
              "type" : "codeVoice"
            },
            {
              "text" : " instance",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when the ",
              "type" : "text"
            },
            {
              "code" : "DataManager",
              "type" : "codeVoice"
            },
            {
              "text" : " itself is created.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Instead, it makes more sense to create the ",
              "type" : "text"
            },
            {
              "code" : "DataImporter",
              "type" : "codeVoice"
            },
            {
              "text" : " instance",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if and when it’s first used.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because it’s marked with the ",
              "type" : "text"
            },
            {
              "code" : "lazy",
              "type" : "codeVoice"
            },
            {
              "text" : " modifier,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "DataImporter",
              "type" : "codeVoice"
            },
            {
              "text" : " instance for the ",
              "type" : "text"
            },
            {
              "code" : "importer",
              "type" : "codeVoice"
            },
            {
              "text" : " property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is only created when the ",
              "type" : "text"
            },
            {
              "code" : "importer",
              "type" : "codeVoice"
            },
            {
              "text" : " property is first accessed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as when its ",
              "type" : "text"
            },
            {
              "code" : "filename",
              "type" : "codeVoice"
            },
            {
              "text" : " property is queried:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(manager.importer.filename)",
            "\/\/ the DataImporter instance for the importer property has now been created",
            "\/\/ Prints \"data.txt\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "If a property marked with the ",
                  "type" : "text"
                },
                {
                  "code" : "lazy",
                  "type" : "codeVoice"
                },
                {
                  "text" : " modifier",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "is accessed by multiple threads simultaneously",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and the property hasn’t yet been initialized,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "there’s no guarantee that the property will be initialized only once.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Stored-Properties-and-Instance-Variables",
          "level" : 3,
          "text" : "Stored Properties and Instance Variables",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you have experience with Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you may know that it provides ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "two",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ways",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to store values and references as part of a class instance.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In addition to properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use instance variables as a backing store for the values stored in a property.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift unifies these concepts into a single property declaration.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A Swift property doesn’t have a corresponding instance variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the backing store for a property isn’t accessed directly.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This approach avoids confusion about how the value is accessed in different contexts",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and simplifies the property’s declaration into a single, definitive statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "All information about the property —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "including its name, type, and memory management characteristics —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is defined in a single location as part of the type’s definition.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Computed-Properties",
          "level" : 2,
          "text" : "Computed Properties",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In addition to stored properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "classes, structures, and enumerations can define ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "computed properties",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which don’t actually store a value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Instead, they provide a getter and an optional setter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to retrieve and set other properties and values indirectly.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Point {",
            "    var x = 0.0, y = 0.0",
            "}",
            "struct Size {",
            "    var width = 0.0, height = 0.0",
            "}",
            "struct Rect {",
            "    var origin = Point()",
            "    var size = Size()",
            "    var center: Point {",
            "        get {",
            "            let centerX = origin.x + (size.width \/ 2)",
            "            let centerY = origin.y + (size.height \/ 2)",
            "            return Point(x: centerX, y: centerY)",
            "        }",
            "        set(newCenter) {",
            "            origin.x = newCenter.x - (size.width \/ 2)",
            "            origin.y = newCenter.y - (size.height \/ 2)",
            "        }",
            "    }",
            "}",
            "var square = Rect(origin: Point(x: 0.0, y: 0.0),",
            "    size: Size(width: 10.0, height: 10.0))",
            "let initialSquareCenter = square.center",
            "\/\/ initialSquareCenter is at (5.0, 5.0)",
            "square.center = Point(x: 15.0, y: 15.0)",
            "print(\"square.origin is now at (\\(square.origin.x), \\(square.origin.y))\")",
            "\/\/ Prints \"square.origin is now at (10.0, 10.0)\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example defines three structures for working with geometric shapes:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Point",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " encapsulates the x- and y-coordinate of a point.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Size",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " encapsulates a ",
                      "type" : "text"
                    },
                    {
                      "code" : "width",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " and a ",
                      "type" : "text"
                    },
                    {
                      "code" : "height",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Rect",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " defines a rectangle by an origin point and a size.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Rect",
              "type" : "codeVoice"
            },
            {
              "text" : " structure also provides a computed property called ",
              "type" : "text"
            },
            {
              "code" : "center",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The current center position of a ",
              "type" : "text"
            },
            {
              "code" : "Rect",
              "type" : "codeVoice"
            },
            {
              "text" : " can always be determined from its ",
              "type" : "text"
            },
            {
              "code" : "origin",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "size",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so you don’t need to store the center point as an explicit ",
              "type" : "text"
            },
            {
              "code" : "Point",
              "type" : "codeVoice"
            },
            {
              "text" : " value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Instead, ",
              "type" : "text"
            },
            {
              "code" : "Rect",
              "type" : "codeVoice"
            },
            {
              "text" : " defines a custom getter and setter for a computed variable called ",
              "type" : "text"
            },
            {
              "code" : "center",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to enable you to work with the rectangle’s ",
              "type" : "text"
            },
            {
              "code" : "center",
              "type" : "codeVoice"
            },
            {
              "text" : " as if it were a real stored property.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above creates a new ",
              "type" : "text"
            },
            {
              "code" : "Rect",
              "type" : "codeVoice"
            },
            {
              "text" : " variable called ",
              "type" : "text"
            },
            {
              "code" : "square",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "square",
              "type" : "codeVoice"
            },
            {
              "text" : " variable is initialized with an origin point of ",
              "type" : "text"
            },
            {
              "code" : "(0, 0)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a width and height of ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This square is represented by the light green square in the diagram below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "square",
              "type" : "codeVoice"
            },
            {
              "text" : " variable’s ",
              "type" : "text"
            },
            {
              "code" : "center",
              "type" : "codeVoice"
            },
            {
              "text" : " property is then accessed through dot syntax (",
              "type" : "text"
            },
            {
              "code" : "square.center",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which causes the getter for ",
              "type" : "text"
            },
            {
              "code" : "center",
              "type" : "codeVoice"
            },
            {
              "text" : " to be called,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to retrieve the current property value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Rather than returning an existing value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the getter actually calculates and returns a new ",
              "type" : "text"
            },
            {
              "code" : "Point",
              "type" : "codeVoice"
            },
            {
              "text" : " to represent the center of the square.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As can be seen above, the getter correctly returns a center point of ",
              "type" : "text"
            },
            {
              "code" : "(5, 5)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "center",
              "type" : "codeVoice"
            },
            {
              "text" : " property is then set to a new value of ",
              "type" : "text"
            },
            {
              "code" : "(15, 15)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which moves the square up and to the right,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the new position shown by the dark green square in the diagram below.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Setting the ",
              "type" : "text"
            },
            {
              "code" : "center",
              "type" : "codeVoice"
            },
            {
              "text" : " property calls the setter for ",
              "type" : "text"
            },
            {
              "code" : "center",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which modifies the ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "y",
              "type" : "codeVoice"
            },
            {
              "text" : " values of the stored ",
              "type" : "text"
            },
            {
              "code" : "origin",
              "type" : "codeVoice"
            },
            {
              "text" : " property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and moves the square to its new position.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "computedProperties",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Shorthand-Setter-Declaration",
          "level" : 3,
          "text" : "Shorthand Setter Declaration",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If a computed property’s setter doesn’t define a name for the new value to be set,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a default name of ",
              "type" : "text"
            },
            {
              "code" : "newValue",
              "type" : "codeVoice"
            },
            {
              "text" : " is used.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s an alternative version of the ",
              "type" : "text"
            },
            {
              "code" : "Rect",
              "type" : "codeVoice"
            },
            {
              "text" : " structure",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that takes advantage of this shorthand notation:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct AlternativeRect {",
            "    var origin = Point()",
            "    var size = Size()",
            "    var center: Point {",
            "        get {",
            "            let centerX = origin.x + (size.width \/ 2)",
            "            let centerY = origin.y + (size.height \/ 2)",
            "            return Point(x: centerX, y: centerY)",
            "        }",
            "        set {",
            "            origin.x = newValue.x - (size.width \/ 2)",
            "            origin.y = newValue.y - (size.height \/ 2)",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Shorthand-Getter-Declaration",
          "level" : 3,
          "text" : "Shorthand Getter Declaration",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the entire body of a getter is a single expression,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the getter implicitly returns that expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s an another version of the ",
              "type" : "text"
            },
            {
              "code" : "Rect",
              "type" : "codeVoice"
            },
            {
              "text" : " structure",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that takes advantage of this shorthand notation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the shorthand notation for setters:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct CompactRect {",
            "    var origin = Point()",
            "    var size = Size()",
            "    var center: Point {",
            "        get {",
            "            Point(x: origin.x + (size.width \/ 2),",
            "                  y: origin.y + (size.height \/ 2))",
            "        }",
            "        set {",
            "            origin.x = newValue.x - (size.width \/ 2)",
            "            origin.y = newValue.y - (size.height \/ 2)",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Omitting the ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " from a getter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "follows the same rules as omitting ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : " from a function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-With-an-Implicit-Return",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Read-Only-Computed-Properties",
          "level" : 3,
          "text" : "Read-Only Computed Properties",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A computed property with a getter but no setter is known as a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "read-only computed property",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A read-only computed property always returns a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can be accessed through dot syntax, but can’t be set to a different value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "You must declare computed properties — including read-only computed properties —",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as variable properties with the ",
                  "type" : "text"
                },
                {
                  "code" : "var",
                  "type" : "codeVoice"
                },
                {
                  "text" : " keyword, because their value isn’t fixed.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The ",
                  "type" : "text"
                },
                {
                  "code" : "let",
                  "type" : "codeVoice"
                },
                {
                  "text" : " keyword is only used for constant properties,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "to indicate that their values can’t be changed once they’re set",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as part of instance initialization.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can simplify the declaration of a read-only computed property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by removing the ",
              "type" : "text"
            },
            {
              "code" : "get",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword and its braces:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Cuboid {",
            "    var width = 0.0, height = 0.0, depth = 0.0",
            "    var volume: Double {",
            "        return width * height * depth",
            "    }",
            "}",
            "let fourByFiveByTwo = Cuboid(width: 4.0, height: 5.0, depth: 2.0)",
            "print(\"the volume of fourByFiveByTwo is \\(fourByFiveByTwo.volume)\")",
            "\/\/ Prints \"the volume of fourByFiveByTwo is 40.0\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example defines a new structure called ",
              "type" : "text"
            },
            {
              "code" : "Cuboid",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which represents a 3D rectangular box with ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "height",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "depth",
              "type" : "codeVoice"
            },
            {
              "text" : " properties.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This structure also has a read-only computed property called ",
              "type" : "text"
            },
            {
              "code" : "volume",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which calculates and returns the current volume of the cuboid.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It doesn’t make sense for ",
              "type" : "text"
            },
            {
              "code" : "volume",
              "type" : "codeVoice"
            },
            {
              "text" : " to be settable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because it would be ambiguous as to which values of ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "height",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "depth",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "should be used for a particular ",
              "type" : "text"
            },
            {
              "code" : "volume",
              "type" : "codeVoice"
            },
            {
              "text" : " value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Nonetheless, it’s useful for a ",
              "type" : "text"
            },
            {
              "code" : "Cuboid",
              "type" : "codeVoice"
            },
            {
              "text" : " to provide a read-only computed property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to enable external users to discover its current calculated volume.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Property-Observers",
          "level" : 2,
          "text" : "Property Observers",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Property observers observe and respond to changes in a property’s value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Property observers are called every time a property’s value is set,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "even if the new value is the same as the property’s current value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can add property observers in the following places:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Stored properties that you define",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Stored properties that you inherit",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Computed properties that you inherit",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "For an inherited property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you add a property observer by overriding that property in a subclass.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For a computed property that you define,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "use the property’s setter to observe and respond to value changes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "instead of trying to create an observer.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Overriding properties is described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance#Overriding",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You have the option to define either or both of these observers on a property:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "willSet",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is called just before the value is stored.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "didSet",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is called immediately after the new value is stored.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you implement a ",
              "type" : "text"
            },
            {
              "code" : "willSet",
              "type" : "codeVoice"
            },
            {
              "text" : " observer,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s passed the new property value as a constant parameter.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can specify a name for this parameter as part of your ",
              "type" : "text"
            },
            {
              "code" : "willSet",
              "type" : "codeVoice"
            },
            {
              "text" : " implementation.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you don’t write the parameter name and parentheses within your implementation,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the parameter is made available with a default parameter name of ",
              "type" : "text"
            },
            {
              "code" : "newValue",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Similarly, if you implement a ",
              "type" : "text"
            },
            {
              "code" : "didSet",
              "type" : "codeVoice"
            },
            {
              "text" : " observer,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s passed a constant parameter containing the old property value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can name the parameter or use the default parameter name of ",
              "type" : "text"
            },
            {
              "code" : "oldValue",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you assign a value to a property within its own ",
              "type" : "text"
            },
            {
              "code" : "didSet",
              "type" : "codeVoice"
            },
            {
              "text" : " observer,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the new value that you assign replaces the one that was just set.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The ",
                  "type" : "text"
                },
                {
                  "code" : "willSet",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "didSet",
                  "type" : "codeVoice"
                },
                {
                  "text" : " observers of superclass properties",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "are called when a property is set in a subclass initializer,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "after the superclass initializer has been called.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "They aren’t called while a class is setting its own properties,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "before the superclass initializer has been called.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "For more information about initializer delegation,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "see ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Value-Types",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Class-Types",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s an example of ",
              "type" : "text"
            },
            {
              "code" : "willSet",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "didSet",
              "type" : "codeVoice"
            },
            {
              "text" : " in action.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example below defines a new class called ",
              "type" : "text"
            },
            {
              "code" : "StepCounter",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which tracks the total number of steps that a person takes while walking.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This class might be used with input data from a pedometer or other step counter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to keep track of a person’s exercise during their daily routine.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class StepCounter {",
            "    var totalSteps: Int = 0 {",
            "        willSet(newTotalSteps) {",
            "            print(\"About to set totalSteps to \\(newTotalSteps)\")",
            "        }",
            "        didSet {",
            "            if totalSteps > oldValue  {",
            "                print(\"Added \\(totalSteps - oldValue) steps\")",
            "            }",
            "        }",
            "    }",
            "}",
            "let stepCounter = StepCounter()",
            "stepCounter.totalSteps = 200",
            "\/\/ About to set totalSteps to 200",
            "\/\/ Added 200 steps",
            "stepCounter.totalSteps = 360",
            "\/\/ About to set totalSteps to 360",
            "\/\/ Added 160 steps",
            "stepCounter.totalSteps = 896",
            "\/\/ About to set totalSteps to 896",
            "\/\/ Added 536 steps"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "StepCounter",
              "type" : "codeVoice"
            },
            {
              "text" : " class declares a ",
              "type" : "text"
            },
            {
              "code" : "totalSteps",
              "type" : "codeVoice"
            },
            {
              "text" : " property of type ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is a stored property with ",
              "type" : "text"
            },
            {
              "code" : "willSet",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "didSet",
              "type" : "codeVoice"
            },
            {
              "text" : " observers.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "willSet",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "didSet",
              "type" : "codeVoice"
            },
            {
              "text" : " observers for ",
              "type" : "text"
            },
            {
              "code" : "totalSteps",
              "type" : "codeVoice"
            },
            {
              "text" : " are called",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whenever the property is assigned a new value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is true even if the new value is the same as the current value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example’s ",
              "type" : "text"
            },
            {
              "code" : "willSet",
              "type" : "codeVoice"
            },
            {
              "text" : " observer uses",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a custom parameter name of ",
              "type" : "text"
            },
            {
              "code" : "newTotalSteps",
              "type" : "codeVoice"
            },
            {
              "text" : " for the upcoming new value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In this example, it simply prints out the value that’s about to be set.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "didSet",
              "type" : "codeVoice"
            },
            {
              "text" : " observer is called after the value of ",
              "type" : "text"
            },
            {
              "code" : "totalSteps",
              "type" : "codeVoice"
            },
            {
              "text" : " is updated.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It compares the new value of ",
              "type" : "text"
            },
            {
              "code" : "totalSteps",
              "type" : "codeVoice"
            },
            {
              "text" : " against the old value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the total number of steps has increased,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a message is printed to indicate how many new steps have been taken.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "didSet",
              "type" : "codeVoice"
            },
            {
              "text" : " observer doesn’t provide a custom parameter name for the old value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the default name of ",
              "type" : "text"
            },
            {
              "code" : "oldValue",
              "type" : "codeVoice"
            },
            {
              "text" : " is used instead.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "If you pass a property that has observers",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "to a function as an in-out parameter,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the ",
                  "type" : "text"
                },
                {
                  "code" : "willSet",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "didSet",
                  "type" : "codeVoice"
                },
                {
                  "text" : " observers are always called.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This is because of the copy-in copy-out memory model for in-out parameters:",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The value is always written back to the property at the end of the function.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "For a detailed discussion of the behavior of in-out parameters,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "see ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Property-Wrappers",
          "level" : 2,
          "text" : "Property Wrappers",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A property wrapper adds a layer of separation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "between code that manages how a property is stored",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the code that defines a property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if you have properties that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "provide thread-safety checks",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or store their underlying data in a database,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you have to write that code on every property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you use a property wrapper,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you write the management code once when you define the wrapper,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and then reuse that management code by applying it to multiple properties.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To define a property wrapper,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you make a structure, enumeration, or class",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that defines a ",
              "type" : "text"
            },
            {
              "code" : "wrappedValue",
              "type" : "codeVoice"
            },
            {
              "text" : " property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the code below,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "TwelveOrLess",
              "type" : "codeVoice"
            },
            {
              "text" : " structure ensures that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value it wraps always contains a number less than or equal to 12.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you ask it to store a larger number, it stores 12 instead.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@propertyWrapper",
            "struct TwelveOrLess {",
            "    private var number = 0",
            "    var wrappedValue: Int {",
            "        get { return number }",
            "        set { number = min(newValue, 12) }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The setter ensures that new values are less than or equal to 12,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the getter returns the stored value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The declaration for ",
                  "type" : "text"
                },
                {
                  "code" : "number",
                  "type" : "codeVoice"
                },
                {
                  "text" : " in the example above",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "marks the variable as ",
                  "type" : "text"
                },
                {
                  "code" : "private",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "which ensures ",
                  "type" : "text"
                },
                {
                  "code" : "number",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is used only",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "in the implementation of ",
                  "type" : "text"
                },
                {
                  "code" : "TwelveOrLess",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Code that’s written anywhere else",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "accesses the value using the getter and setter for ",
                  "type" : "text"
                },
                {
                  "code" : "wrappedValue",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and can’t use ",
                  "type" : "text"
                },
                {
                  "code" : "number",
                  "type" : "codeVoice"
                },
                {
                  "text" : " directly.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "For information about ",
                  "type" : "text"
                },
                {
                  "code" : "private",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", see ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "You apply a wrapper to a property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by writing the wrapper’s name before the property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as an attribute.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s a structure that stores a rectangle",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that uses the ",
              "type" : "text"
            },
            {
              "code" : "TwelveOrLess",
              "type" : "codeVoice"
            },
            {
              "text" : " property wrapper",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to ensure its dimensions are always 12 or less:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct SmallRectangle {",
            "    @TwelveOrLess var height: Int",
            "    @TwelveOrLess var width: Int",
            "}",
            "",
            "var rectangle = SmallRectangle()",
            "print(rectangle.height)",
            "\/\/ Prints \"0\"",
            "",
            "rectangle.height = 10",
            "print(rectangle.height)",
            "\/\/ Prints \"10\"",
            "",
            "rectangle.height = 24",
            "print(rectangle.height)",
            "\/\/ Prints \"12\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "height",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " properties get their initial values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from the definition of ",
              "type" : "text"
            },
            {
              "code" : "TwelveOrLess",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which sets ",
              "type" : "text"
            },
            {
              "code" : "TwelveOrLess.number",
              "type" : "codeVoice"
            },
            {
              "text" : " to zero.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The setter in ",
              "type" : "text"
            },
            {
              "code" : "TwelveOrLess",
              "type" : "codeVoice"
            },
            {
              "text" : " treats 10 as a valid value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so storing the number 10 in ",
              "type" : "text"
            },
            {
              "code" : "rectangle.height",
              "type" : "codeVoice"
            },
            {
              "text" : " proceeds as written.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, 24 is larger than ",
              "type" : "text"
            },
            {
              "code" : "TwelveOrLess",
              "type" : "codeVoice"
            },
            {
              "text" : " allows,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so trying to store 24 end up setting ",
              "type" : "text"
            },
            {
              "code" : "rectangle.height",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to 12 instead, the largest allowed value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you apply a wrapper to a property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler synthesizes code that provides storage for the wrapper",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and code that provides access to the property through the wrapper.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(The property wrapper is responsible for storing the wrapped value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so there’s no synthesized code for that.)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You could write code that uses the behavior of a property wrapper,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without taking advantage of the special attribute syntax.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "here’s a version of ",
              "type" : "text"
            },
            {
              "code" : "SmallRectangle",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from the previous code listing",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that wraps its properties in the ",
              "type" : "text"
            },
            {
              "code" : "TwelveOrLess",
              "type" : "codeVoice"
            },
            {
              "text" : " structure explicitly,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "instead of writing ",
              "type" : "text"
            },
            {
              "code" : "@TwelveOrLess",
              "type" : "codeVoice"
            },
            {
              "text" : " as an attribute:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct SmallRectangle {",
            "    private var _height = TwelveOrLess()",
            "    private var _width = TwelveOrLess()",
            "    var height: Int {",
            "        get { return _height.wrappedValue }",
            "        set { _height.wrappedValue = newValue }",
            "    }",
            "    var width: Int {",
            "        get { return _width.wrappedValue }",
            "        set { _width.wrappedValue = newValue }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "_height",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "_width",
              "type" : "codeVoice"
            },
            {
              "text" : " properties",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "store an instance of the property wrapper, ",
              "type" : "text"
            },
            {
              "code" : "TwelveOrLess",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The getter and setter for ",
              "type" : "text"
            },
            {
              "code" : "height",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "wrap access to the ",
              "type" : "text"
            },
            {
              "code" : "wrappedValue",
              "type" : "codeVoice"
            },
            {
              "text" : " property.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Setting-Initial-Values-for-Wrapped-Properties",
          "level" : 3,
          "text" : "Setting Initial Values for Wrapped Properties",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The code in the examples above",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "sets the initial value for the wrapped property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by giving ",
              "type" : "text"
            },
            {
              "code" : "number",
              "type" : "codeVoice"
            },
            {
              "text" : " an initial value in the definition of ",
              "type" : "text"
            },
            {
              "code" : "TwelveOrLess",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Code that uses this property wrapper",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can’t specify a different initial value for a property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that’s wrapped by ",
              "type" : "text"
            },
            {
              "code" : "TwelveOrLess",
              "type" : "codeVoice"
            },
            {
              "text" : " —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the definition of ",
              "type" : "text"
            },
            {
              "code" : "SmallRectangle",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can’t give ",
              "type" : "text"
            },
            {
              "code" : "height",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " initial values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To support setting an initial value or other customization,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the property wrapper needs to add an initializer.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s an expanded version of ",
              "type" : "text"
            },
            {
              "code" : "TwelveOrLess",
              "type" : "codeVoice"
            },
            {
              "text" : " called ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that defines initializers that set the wrapped and maximum value:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@propertyWrapper",
            "struct SmallNumber {",
            "    private var maximum: Int",
            "    private var number: Int",
            "",
            "    var wrappedValue: Int {",
            "        get { return number }",
            "        set { number = min(newValue, maximum) }",
            "    }",
            "",
            "    init() {",
            "        maximum = 12",
            "        number = 0",
            "    }",
            "    init(wrappedValue: Int) {",
            "        maximum = 12",
            "        number = min(wrappedValue, maximum)",
            "    }",
            "    init(wrappedValue: Int, maximum: Int) {",
            "        self.maximum = maximum",
            "        number = min(wrappedValue, maximum)",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The definition of ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " includes three initializers —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "init()",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "init(wrappedValue:)",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "init(wrappedValue:maximum:)",
              "type" : "codeVoice"
            },
            {
              "text" : " —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which the examples below use",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to set the wrapped value and the maximum value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For information about initialization and initializer syntax,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you apply a wrapper to a property and you don’t specify an initial value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift uses the ",
              "type" : "text"
            },
            {
              "code" : "init()",
              "type" : "codeVoice"
            },
            {
              "text" : " initializer to set up the wrapper.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct ZeroRectangle {",
            "    @SmallNumber var height: Int",
            "    @SmallNumber var width: Int",
            "}",
            "",
            "var zeroRectangle = ZeroRectangle()",
            "print(zeroRectangle.height, zeroRectangle.width)",
            "\/\/ Prints \"0 0\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The instances of ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " that wrap ",
              "type" : "text"
            },
            {
              "code" : "height",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are created by calling ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber()",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The code inside that initializer",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "sets the initial wrapped value and the initial maximum value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using the default values of zero and 12.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The property wrapper still provides all of the initial values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "like the earlier example that used ",
              "type" : "text"
            },
            {
              "code" : "TwelveOrLess",
              "type" : "codeVoice"
            },
            {
              "text" : " in ",
              "type" : "text"
            },
            {
              "code" : "SmallRectangle",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Unlike that example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " also supports writing those initial values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as part of declaring the property.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you specify an initial value for the property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift uses the ",
              "type" : "text"
            },
            {
              "code" : "init(wrappedValue:)",
              "type" : "codeVoice"
            },
            {
              "text" : " initializer to set up the wrapper.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct UnitRectangle {",
            "    @SmallNumber var height: Int = 1",
            "    @SmallNumber var width: Int = 1",
            "}",
            "",
            "var unitRectangle = UnitRectangle()",
            "print(unitRectangle.height, unitRectangle.width)",
            "\/\/ Prints \"1 1\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you write ",
              "type" : "text"
            },
            {
              "code" : "= 1",
              "type" : "codeVoice"
            },
            {
              "text" : " on a property with a wrapper,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that’s translated into a call to the ",
              "type" : "text"
            },
            {
              "code" : "init(wrappedValue:)",
              "type" : "codeVoice"
            },
            {
              "text" : " initializer.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The instances of ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " that wrap ",
              "type" : "text"
            },
            {
              "code" : "height",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are created by calling ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber(wrappedValue: 1)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The initializer uses the wrapped value that’s specified here,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and it uses the default maximum value of 12.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you write arguments in parentheses after the custom attribute,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift uses the initializer that accepts those arguments to set up the wrapper.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, if you provide an initial value and a maximum value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift uses the ",
              "type" : "text"
            },
            {
              "code" : "init(wrappedValue:maximum:)",
              "type" : "codeVoice"
            },
            {
              "text" : " initializer:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct NarrowRectangle {",
            "    @SmallNumber(wrappedValue: 2, maximum: 5) var height: Int",
            "    @SmallNumber(wrappedValue: 3, maximum: 4) var width: Int",
            "}",
            "",
            "var narrowRectangle = NarrowRectangle()",
            "print(narrowRectangle.height, narrowRectangle.width)",
            "\/\/ Prints \"2 3\"",
            "",
            "narrowRectangle.height = 100",
            "narrowRectangle.width = 100",
            "print(narrowRectangle.height, narrowRectangle.width)",
            "\/\/ Prints \"5 4\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The instance of ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " that wraps ",
              "type" : "text"
            },
            {
              "code" : "height",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is created by calling ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber(wrappedValue: 2, maximum: 5)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the instance that wraps ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is created by calling ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber(wrappedValue: 3, maximum: 4)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "By including arguments to the property wrapper,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can set up the initial state in the wrapper",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or pass other options to the wrapper when it’s created.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This syntax is the most general way to use a property wrapper.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can provide whatever arguments you need to the attribute,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and they’re passed to the initializer.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you include property wrapper arguments,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can also specify an initial value using assignment.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift treats the assignment like a ",
              "type" : "text"
            },
            {
              "code" : "wrappedValue",
              "type" : "codeVoice"
            },
            {
              "text" : " argument",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and uses the initializer that accepts the arguments you include.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct MixedRectangle {",
            "    @SmallNumber var height: Int = 1",
            "    @SmallNumber(maximum: 9) var width: Int = 2",
            "}",
            "",
            "var mixedRectangle = MixedRectangle()",
            "print(mixedRectangle.height)",
            "\/\/ Prints \"1\"",
            "",
            "mixedRectangle.height = 20",
            "print(mixedRectangle.height)",
            "\/\/ Prints \"12\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The instance of ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " that wraps ",
              "type" : "text"
            },
            {
              "code" : "height",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is created by calling ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber(wrappedValue: 1)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which uses the default maximum value of 12.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The instance that wraps ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is created by calling ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber(wrappedValue: 2, maximum: 9)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Projecting-a-Value-From-a-Property-Wrapper",
          "level" : 3,
          "text" : "Projecting a Value From a Property Wrapper",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In addition to the wrapped value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a property wrapper can expose additional functionality",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by defining a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "projected value",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example, a property wrapper that manages access to a database",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can expose a ",
              "type" : "text"
            },
            {
              "code" : "flushDatabaseConnection()",
              "type" : "codeVoice"
            },
            {
              "text" : " method on its projected value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The name of the projected value is the same as the wrapped value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "except it begins with a dollar sign (",
              "type" : "text"
            },
            {
              "code" : "$",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because your code can’t define properties that start with ",
              "type" : "text"
            },
            {
              "code" : "$",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the projected value never interferes with properties you define.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if you try to set the property to a number that’s too large,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the property wrapper adjusts the number before storing it.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The code below adds a ",
              "type" : "text"
            },
            {
              "code" : "projectedValue",
              "type" : "codeVoice"
            },
            {
              "text" : " property to the ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " structure",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to keep track of whether the property wrapper",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "adjusted the new value for the property before storing that new value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@propertyWrapper",
            "struct SmallNumber {",
            "    private var number: Int",
            "    private(set) var projectedValue: Bool",
            "",
            "    var wrappedValue: Int {",
            "        get { return number }",
            "        set {",
            "            if newValue > 12 {",
            "                number = 12",
            "                projectedValue = true",
            "            } else {",
            "                number = newValue",
            "                projectedValue = false",
            "            }",
            "        }",
            "    }",
            "",
            "    init() {",
            "        self.number = 0",
            "        self.projectedValue = false",
            "    }",
            "}",
            "struct SomeStructure {",
            "    @SmallNumber var someNumber: Int",
            "}",
            "var someStructure = SomeStructure()",
            "",
            "someStructure.someNumber = 4",
            "print(someStructure.$someNumber)",
            "\/\/ Prints \"false\"",
            "",
            "someStructure.someNumber = 55",
            "print(someStructure.$someNumber)",
            "\/\/ Prints \"true\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Writing ",
              "type" : "text"
            },
            {
              "code" : "someStructure.$someNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " accesses the wrapper’s projected value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "After storing a small number like four,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of ",
              "type" : "text"
            },
            {
              "code" : "someStructure.$someNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the projected value is ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after trying to store a number that’s too large, like 55.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A property wrapper can return a value of any type as its projected value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In this example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the property wrapper exposes only one piece of information —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "whether the number was adjusted —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so it exposes that Boolean value as its projected value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A wrapper that needs to expose more information",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can return an instance of some other type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or it can return ",
              "type" : "text"
            },
            {
              "code" : "self",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to expose the instance of the wrapper as its projected value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you access a projected value from code that’s part of the type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "like a property getter or an instance method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can omit ",
              "type" : "text"
            },
            {
              "code" : "self.",
              "type" : "codeVoice"
            },
            {
              "text" : " before the property name,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "just like accessing other properties.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The code in the following example refers to the projected value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of the wrapper around ",
              "type" : "text"
            },
            {
              "code" : "height",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " as ",
              "type" : "text"
            },
            {
              "code" : "$height",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "$width",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum Size {",
            "    case small, large",
            "}",
            "",
            "struct SizedRectangle {",
            "    @SmallNumber var height: Int",
            "    @SmallNumber var width: Int",
            "",
            "    mutating func resize(to size: Size) -> Bool {",
            "        switch size {",
            "        case .small:",
            "            height = 10",
            "            width = 20",
            "        case .large:",
            "            height = 100",
            "            width = 100",
            "        }",
            "        return $height || $width",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because property wrapper syntax is just syntactic sugar",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for a property with a getter and a setter,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "accessing ",
              "type" : "text"
            },
            {
              "code" : "height",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "behaves the same as accessing any other property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the code in ",
              "type" : "text"
            },
            {
              "code" : "resize(to:)",
              "type" : "codeVoice"
            },
            {
              "text" : " accesses ",
              "type" : "text"
            },
            {
              "code" : "height",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using their property wrapper.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you call ",
              "type" : "text"
            },
            {
              "code" : "resize(to: .large)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the switch case for ",
              "type" : "text"
            },
            {
              "code" : ".large",
              "type" : "codeVoice"
            },
            {
              "text" : " sets the rectangle’s height and width to 100.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The wrapper prevents the value of those properties",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from being larger than 12,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and it sets the projected value to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to record the fact that it adjusted their values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "At the end of ",
              "type" : "text"
            },
            {
              "code" : "resize(to:)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the return statement checks ",
              "type" : "text"
            },
            {
              "code" : "$height",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "$width",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to determine whether",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the property wrapper adjusted either ",
              "type" : "text"
            },
            {
              "code" : "height",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "width",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Global-and-Local-Variables",
          "level" : 2,
          "text" : "Global and Local Variables",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The capabilities described above for computing and observing properties",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are also available to ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "global variables",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "local variables",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Global variables are variables that are defined outside of any",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "function, method, closure, or type context.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Local variables are variables that are defined within",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a function, method, or closure context.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The global and local variables you have encountered in previous chapters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "have all been ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "stored variables",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Stored variables, like stored properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "provide storage for a value of a certain type and allow that value to be set and retrieved.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "However, you can also define ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "computed variables",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and define observers for stored variables,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in either a global or local scope.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Computed variables calculate their value, rather than storing it,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and they’re written in the same way as computed properties.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Global constants and variables are always computed lazily,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "in a similar manner to ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Lazy-Stored-Properties",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Unlike lazy stored properties,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "global constants and variables don’t need to be marked with the ",
                  "type" : "text"
                },
                {
                  "code" : "lazy",
                  "type" : "codeVoice"
                },
                {
                  "text" : " modifier.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Local constants and variables are never computed lazily.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can apply a property wrapper to a local stored variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but not to a global variable or a computed variable.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the code below, ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " uses ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " as a property wrapper.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func someFunction() {",
            "    @SmallNumber var myNumber: Int = 0",
            "",
            "    myNumber = 10",
            "    \/\/ now myNumber is 10",
            "",
            "    myNumber = 24",
            "    \/\/ now myNumber is 12",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Like when you apply ",
              "type" : "text"
            },
            {
              "code" : "SmallNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " to a property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "setting the value of ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " to 10 is valid.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because the property wrapper doesn’t allow values higher than 12,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it sets ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " to 12 instead of 24.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Type-Properties",
          "level" : 2,
          "text" : "Type Properties",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Instance properties are properties that belong to an instance of a particular type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Every time you create a new instance of that type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it has its own set of property values, separate from any other instance.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also define properties that belong to the type itself,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "not to any one instance of that type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "There will only ever be one copy of these properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "no matter how many instances of that type you create.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These kinds of properties are called ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type properties",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Type properties are useful for defining values that are universal to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "all",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " instances of a particular type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as a constant property that all instances can use",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(like a static constant in C),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or a variable property that stores a value that’s global to all instances of that type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(like a static variable in C).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Stored type properties can be variables or constants.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Computed type properties are always declared as variable properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the same way as computed instance properties.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Unlike stored instance properties,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you must always give stored type properties a default value.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This is because the type itself doesn’t have an initializer",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "that can assign a value to a stored type property at initialization time.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Stored type properties are lazily initialized on their first access.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "They’re guaranteed to be initialized only once,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "even when accessed by multiple threads simultaneously,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and they don’t need to be marked with the ",
                  "type" : "text"
                },
                {
                  "code" : "lazy",
                  "type" : "codeVoice"
                },
                {
                  "text" : " modifier.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Type-Property-Syntax",
          "level" : 3,
          "text" : "Type Property Syntax",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In C and Objective-C, you define static constants and variables associated with a type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "global",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " static variables.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In Swift, however, type properties are written as part of the type’s definition,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "within the type’s outer curly braces,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and each type property is explicitly scoped to the type it supports.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You define type properties with the ",
              "type" : "text"
            },
            {
              "code" : "static",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For computed type properties for class types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use the ",
              "type" : "text"
            },
            {
              "code" : "class",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword instead",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to allow subclasses to override the superclass’s implementation.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example below shows the syntax for stored and computed type properties:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct SomeStructure {",
            "    static var storedTypeProperty = \"Some value.\"",
            "    static var computedTypeProperty: Int {",
            "        return 1",
            "    }",
            "}",
            "enum SomeEnumeration {",
            "    static var storedTypeProperty = \"Some value.\"",
            "    static var computedTypeProperty: Int {",
            "        return 6",
            "    }",
            "}",
            "class SomeClass {",
            "    static var storedTypeProperty = \"Some value.\"",
            "    static var computedTypeProperty: Int {",
            "        return 27",
            "    }",
            "    class var overrideableComputedTypeProperty: Int {",
            "        return 107",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The computed type property examples above are for read-only computed type properties,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "but you can also define read-write computed type properties",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "with the same syntax as for computed instance properties.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Querying-and-Setting-Type-Properties",
          "level" : 3,
          "text" : "Querying and Setting Type Properties",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Type properties are queried and set with dot syntax, just like instance properties.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, type properties are queried and set on the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ", not on an instance of that type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(SomeStructure.storedTypeProperty)",
            "\/\/ Prints \"Some value.\"",
            "SomeStructure.storedTypeProperty = \"Another value.\"",
            "print(SomeStructure.storedTypeProperty)",
            "\/\/ Prints \"Another value.\"",
            "print(SomeEnumeration.computedTypeProperty)",
            "\/\/ Prints \"6\"",
            "print(SomeClass.computedTypeProperty)",
            "\/\/ Prints \"27\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The examples that follow use two stored type properties as part of a structure",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that models an audio level meter for a number of audio channels.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each channel has an integer audio level between ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : " inclusive.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The figure below illustrates how two of these audio channels can be combined",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to model a stereo audio level meter.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When a channel’s audio level is ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : ", none of the lights for that channel are lit.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When the audio level is ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : ", all of the lights for that channel are lit.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In this figure, the left channel has a current level of ",
              "type" : "text"
            },
            {
              "code" : "9",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the right channel has a current level of ",
              "type" : "text"
            },
            {
              "code" : "7",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "staticPropertiesVUMeter",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The audio channels described above are represented by",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "instances of the ",
              "type" : "text"
            },
            {
              "code" : "AudioChannel",
              "type" : "codeVoice"
            },
            {
              "text" : " structure:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct AudioChannel {",
            "    static let thresholdLevel = 10",
            "    static var maxInputLevelForAllChannels = 0",
            "    var currentLevel: Int = 0 {",
            "        didSet {",
            "            if currentLevel > AudioChannel.thresholdLevel {",
            "                \/\/ cap the new audio level to the threshold level",
            "                currentLevel = AudioChannel.thresholdLevel",
            "            }",
            "            if currentLevel > AudioChannel.maxInputLevelForAllChannels {",
            "                \/\/ store this as the new overall maximum input level",
            "                AudioChannel.maxInputLevelForAllChannels = currentLevel",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "AudioChannel",
              "type" : "codeVoice"
            },
            {
              "text" : " structure defines two stored type properties to support its functionality.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The first, ",
              "type" : "text"
            },
            {
              "code" : "thresholdLevel",
              "type" : "codeVoice"
            },
            {
              "text" : ", defines the maximum threshold value an audio level can take.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is a constant value of ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : " for all ",
              "type" : "text"
            },
            {
              "code" : "AudioChannel",
              "type" : "codeVoice"
            },
            {
              "text" : " instances.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If an audio signal comes in with a higher value than ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it will be capped to this threshold value (as described below).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The second type property is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a variable stored property called ",
              "type" : "text"
            },
            {
              "code" : "maxInputLevelForAllChannels",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This keeps track of the maximum input value that has been received",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "any",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "AudioChannel",
              "type" : "codeVoice"
            },
            {
              "text" : " instance.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It starts with an initial value of ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "AudioChannel",
              "type" : "codeVoice"
            },
            {
              "text" : " structure also defines",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a stored instance property called ",
              "type" : "text"
            },
            {
              "code" : "currentLevel",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which represents the channel’s current audio level on a scale of ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " to ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "currentLevel",
              "type" : "codeVoice"
            },
            {
              "text" : " property has a ",
              "type" : "text"
            },
            {
              "code" : "didSet",
              "type" : "codeVoice"
            },
            {
              "text" : " property observer",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to check the value of ",
              "type" : "text"
            },
            {
              "code" : "currentLevel",
              "type" : "codeVoice"
            },
            {
              "text" : " whenever it’s set.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This observer performs two checks:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If the new value of ",
                      "type" : "text"
                    },
                    {
                      "code" : "currentLevel",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is greater than the allowed ",
                      "type" : "text"
                    },
                    {
                      "code" : "thresholdLevel",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the property observer caps ",
                      "type" : "text"
                    },
                    {
                      "code" : "currentLevel",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " to ",
                      "type" : "text"
                    },
                    {
                      "code" : "thresholdLevel",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If the new value of ",
                      "type" : "text"
                    },
                    {
                      "code" : "currentLevel",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (after any capping) is higher than",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "any value previously received by ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "any",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "AudioChannel",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " instance,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the property observer stores the new ",
                      "type" : "text"
                    },
                    {
                      "code" : "currentLevel",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " value in",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the ",
                      "type" : "text"
                    },
                    {
                      "code" : "maxInputLevelForAllChannels",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " type property.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "In the first of these two checks,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the ",
                  "type" : "text"
                },
                {
                  "code" : "didSet",
                  "type" : "codeVoice"
                },
                {
                  "text" : " observer sets ",
                  "type" : "text"
                },
                {
                  "code" : "currentLevel",
                  "type" : "codeVoice"
                },
                {
                  "text" : " to a different value.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This doesn’t, however, cause the observer to be called again.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use the ",
              "type" : "text"
            },
            {
              "code" : "AudioChannel",
              "type" : "codeVoice"
            },
            {
              "text" : " structure to create",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "two new audio channels called ",
              "type" : "text"
            },
            {
              "code" : "leftChannel",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "rightChannel",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to represent the audio levels of a stereo sound system:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var leftChannel = AudioChannel()",
            "var rightChannel = AudioChannel()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you set the ",
              "type" : "text"
            },
            {
              "code" : "currentLevel",
              "type" : "codeVoice"
            },
            {
              "text" : " of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "left",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " channel to ",
              "type" : "text"
            },
            {
              "code" : "7",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can see that the ",
              "type" : "text"
            },
            {
              "code" : "maxInputLevelForAllChannels",
              "type" : "codeVoice"
            },
            {
              "text" : " type property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is updated to equal ",
              "type" : "text"
            },
            {
              "code" : "7",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "leftChannel.currentLevel = 7",
            "print(leftChannel.currentLevel)",
            "\/\/ Prints \"7\"",
            "print(AudioChannel.maxInputLevelForAllChannels)",
            "\/\/ Prints \"7\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you try to set the ",
              "type" : "text"
            },
            {
              "code" : "currentLevel",
              "type" : "codeVoice"
            },
            {
              "text" : " of the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "right",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " channel to ",
              "type" : "text"
            },
            {
              "code" : "11",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can see that the right channel’s ",
              "type" : "text"
            },
            {
              "code" : "currentLevel",
              "type" : "codeVoice"
            },
            {
              "text" : " property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is capped to the maximum value of ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the ",
              "type" : "text"
            },
            {
              "code" : "maxInputLevelForAllChannels",
              "type" : "codeVoice"
            },
            {
              "text" : " type property is updated to equal ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "rightChannel.currentLevel = 11",
            "print(rightChannel.currentLevel)",
            "\/\/ Prints \"10\"",
            "print(AudioChannel.maxInputLevelForAllChannels)",
            "\/\/ Prints \"10\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/the-swift-programming-language\/properties"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"computedProperties": {
  "alt" : null,
  "identifier" : "computedProperties",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/computedProperties@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/computedProperties~dark@2x.png"
    }
  ]
},
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl": {
  "abstract" : [
    {
      "text" : "Manage the visibility of code by declaration, file, and module.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl",
  "kind" : "article",
  "role" : "article",
  "title" : "Access Control",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/accesscontrol"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#In-Out-Parameters": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters",
  "kind" : "section",
  "title" : "In-Out Parameters",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/declarations#In-Out-Parameters"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-With-an-Implicit-Return": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-With-an-Implicit-Return",
  "kind" : "section",
  "title" : "Functions With an Implicit Return",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/functions#Functions-With-an-Implicit-Return"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance#Overriding": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance#Overriding",
  "kind" : "section",
  "title" : "Overriding",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/inheritance#Overriding"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization": {
  "abstract" : [
    {
      "text" : "Set the initial values for a type’s stored properties and perform one-time setup.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization",
  "kind" : "article",
  "role" : "article",
  "title" : "Initialization",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/initialization"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Assigning-Constant-Properties-During-Initialization": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Assigning-Constant-Properties-During-Initialization",
  "kind" : "section",
  "title" : "Assigning Constant Properties During Initialization",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/initialization#Assigning-Constant-Properties-During-Initialization"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Default-Property-Values": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Property-Values",
  "kind" : "section",
  "title" : "Default Property Values",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/initialization#Default-Property-Values"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Delegation-for-Class-Types": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Class-Types",
  "kind" : "section",
  "title" : "Initializer Delegation for Class Types",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/initialization#Initializer-Delegation-for-Class-Types"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Delegation-for-Value-Types": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Value-Types",
  "kind" : "section",
  "title" : "Initializer Delegation for Value Types",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/initialization#Initializer-Delegation-for-Value-Types"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Lazy-Stored-Properties": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Lazy-Stored-Properties",
  "kind" : "section",
  "title" : "Lazy Stored Properties",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/properties#Lazy-Stored-Properties"
},
"staticPropertiesVUMeter": {
  "alt" : null,
  "identifier" : "staticPropertiesVUMeter",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/staticPropertiesVUMeter@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/staticPropertiesVUMeter~dark@2x.png"
    }
  ]
}
}
}