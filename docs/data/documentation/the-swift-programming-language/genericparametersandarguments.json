{
  "abstract" : [
    {
      "text" : "Generalize declarations to abstract away concrete types.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/TSPL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments"
  },
  "kind" : "article",
  "metadata" : {
    "title" : "Generic Parameters and Arguments"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "This chapter describes parameters and arguments for generic types, functions, and",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "initializers. When you declare a generic type, function, subscript, or initializer,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you specify the type parameters that the generic type, function, or initializer",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can work with. These type parameters act as placeholders that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are replaced by actual concrete type arguments when an instance of a generic type is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "created or a generic function or initializer is called.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For an overview of generics in Swift, see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Generic-Parameter-Clause",
          "level" : 2,
          "text" : "Generic Parameter Clause",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "generic parameter clause",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " specifies the type parameters of a generic",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "type or function, along with any associated constraints and requirements on those parameters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A generic parameter clause is enclosed in angle brackets (<>)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<<#generic parameter list#>>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "generic parameter list",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is a comma-separated list of generic parameters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "each of which has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<#type parameter#>: <#constraint#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A generic parameter consists of a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type parameter",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " followed by",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an optional ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "constraint",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ". A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type parameter",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is simply the name",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of a placeholder type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(for example, ",
              "type" : "text"
            },
            {
              "code" : "T",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "U",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "V",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "Key",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "Value",
              "type" : "codeVoice"
            },
            {
              "text" : ", and so on).",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You have access to the type parameters (and any of their associated types) in the rest of the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "type, function, or initializer declaration, including in the signature of the function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or initializer.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "constraint",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " specifies that a type parameter inherits",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from a specific class or conforms to a protocol or protocol composition.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, in the generic function below, the generic parameter ",
              "type" : "text"
            },
            {
              "code" : "T: Comparable",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "indicates that any type argument substituted",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for the type parameter ",
              "type" : "text"
            },
            {
              "code" : "T",
              "type" : "codeVoice"
            },
            {
              "text" : " must conform to the ",
              "type" : "text"
            },
            {
              "code" : "Comparable",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func simpleMax<T: Comparable>(_ x: T, _ y: T) -> T {",
            "    if x < y {",
            "        return y",
            "    }",
            "    return x",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : ", for example, both conform to the ",
              "type" : "text"
            },
            {
              "code" : "Comparable",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this function accepts arguments of either type. In contrast with generic types, you don’t",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "specify a generic argument clause when you use a generic function or initializer.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The type arguments are instead inferred from the type of the arguments passed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the function or initializer.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "simpleMax(17, 42) \/\/ T is inferred to be Int",
            "simpleMax(3.14159, 2.71828) \/\/ T is inferred to be Double"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Generic-Where-Clauses",
          "level" : 3,
          "text" : "Generic Where Clauses",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can specify additional requirements on type parameters and their associated types",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by including a generic ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause right before the opening curly brace",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of a type or function’s body.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A generic ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause consists of the ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by a comma-separated list of one or more ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "requirements",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "where <#requirements#>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "requirements",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " in a generic ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause specify that a type parameter inherits from",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a class or conforms to a protocol or protocol composition.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Although the generic ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause provides syntactic",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "sugar for expressing simple constraints on type parameters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(for example, ",
              "type" : "text"
            },
            {
              "code" : "<T: Comparable>",
              "type" : "codeVoice"
            },
            {
              "text" : " is equivalent to ",
              "type" : "text"
            },
            {
              "code" : "<T> where T: Comparable",
              "type" : "codeVoice"
            },
            {
              "text" : " and so on),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use it to provide more complex constraints on type parameters",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and their associated types. For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can constrain the associated types of type parameters to conform to protocols.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, ",
              "type" : "text"
            },
            {
              "code" : "<S: Sequence> where S.Iterator.Element: Equatable",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "specifies that ",
              "type" : "text"
            },
            {
              "code" : "S",
              "type" : "codeVoice"
            },
            {
              "text" : " conforms to the ",
              "type" : "text"
            },
            {
              "code" : "Sequence",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and that the associated type ",
              "type" : "text"
            },
            {
              "code" : "S.Iterator.Element",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "conforms to the ",
              "type" : "text"
            },
            {
              "code" : "Equatable",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This constraint ensures that each element of the sequence is equatable.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also specify the requirement that two types be identical,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using the ",
              "type" : "text"
            },
            {
              "code" : "==",
              "type" : "codeVoice"
            },
            {
              "text" : " operator. For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "<S1: Sequence, S2: Sequence> where S1.Iterator.Element == S2.Iterator.Element",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "expresses the constraints that ",
              "type" : "text"
            },
            {
              "code" : "S1",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "S2",
              "type" : "codeVoice"
            },
            {
              "text" : " conform to the ",
              "type" : "text"
            },
            {
              "code" : "Sequence",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and that the elements of both sequences must be of the same type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Any type argument substituted for a type parameter must",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "meet all the constraints and requirements placed on the type parameter.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A generic ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause can appear",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as part of a declaration that includes type parameters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or as part of a declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that’s nested inside of a declaration that includes type parameters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The generic ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause for a nested declaration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can still refer to the type parameters of the enclosing declaration;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "however,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the requirements from that ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "apply only to the declaration where it’s written.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the enclosing declaration also has a ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the requirements from both clauses are combined.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the example below, ",
              "type" : "text"
            },
            {
              "code" : "startsWithZero()",
              "type" : "codeVoice"
            },
            {
              "text" : " is available",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "only if ",
              "type" : "text"
            },
            {
              "code" : "Element",
              "type" : "codeVoice"
            },
            {
              "text" : " conforms to both ",
              "type" : "text"
            },
            {
              "code" : "SomeProtocol",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Numeric",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "extension Collection where Element: SomeProtocol {",
            "    func startsWithZero() -> Bool where Element: Numeric {",
            "        return first == .zero",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can overload a generic function or initializer by providing different",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "constraints, requirements, or both on the type parameters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you call an overloaded generic function or initializer,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the compiler uses these constraints to resolve which overloaded function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or initializer to invoke.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information about generic ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clauses and to see an example",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of one in a generic function declaration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-parameter-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "<",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-parameter-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ">",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-parameter-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-parameter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-parameter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-parameter-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-parameter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-parameter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type-identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-parameter",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type-name",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "protocol-composition-type",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-where-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "where",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "requirement-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "requirement-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "requirement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "requirement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "requirement-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "requirement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "conformance-requirement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "same-type-requirement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "conformance-requirement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type-identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type-identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "conformance-requirement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type-identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ":",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "protocol-composition-type",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "same-type-requirement",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type-identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "==",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a generic parameter clause",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Generic-Argument-Clause",
          "level" : 2,
          "text" : "Generic Argument Clause",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "generic argument clause",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " specifies the type arguments of a generic",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A generic argument clause is enclosed in angle brackets (<>)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and has the following form:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "<<#generic argument list#>>"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "generic argument list",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is a comma-separated list of type arguments.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type argument",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is the name of an actual concrete type that replaces",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a corresponding type parameter in the generic parameter clause of a generic type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The result is a specialized version of that generic type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example below shows a simplified version of the Swift standard library’s",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "generic dictionary type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Dictionary<Key: Hashable, Value>: Collection, ExpressibleByDictionaryLiteral {",
            "    \/* ... *\/",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The specialized version of the generic ",
              "type" : "text"
            },
            {
              "code" : "Dictionary",
              "type" : "codeVoice"
            },
            {
              "text" : " type, ",
              "type" : "text"
            },
            {
              "code" : "Dictionary<String, Int>",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is formed by replacing the generic parameters ",
              "type" : "text"
            },
            {
              "code" : "Key: Hashable",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Value",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the concrete type arguments ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ". Each type argument must satisfy",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "all the constraints of the generic parameter it replaces, including any additional",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "requirements specified in a generic ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " clause. In the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "Key",
              "type" : "codeVoice"
            },
            {
              "text" : " type parameter is constrained to conform to the ",
              "type" : "text"
            },
            {
              "code" : "Hashable",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and therefore ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " must also conform to the ",
              "type" : "text"
            },
            {
              "code" : "Hashable",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also replace a type parameter with a type argument that’s itself",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a specialized version of a generic type (provided it satisfies the appropriate",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "constraints and requirements). For example, you can replace the type parameter",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Element",
              "type" : "codeVoice"
            },
            {
              "text" : " in ",
              "type" : "text"
            },
            {
              "code" : "Array<Element>",
              "type" : "codeVoice"
            },
            {
              "text" : " with a specialized version of an array, ",
              "type" : "text"
            },
            {
              "code" : "Array<Int>",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to form an array whose elements are themselves arrays of integers.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let arrayOfArrays: Array<Array<Int>> = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "As mentioned in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments#Generic-Parameter-Clause",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you don’t use a generic argument clause to specify the type arguments",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of a generic function or initializer.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-argument-clause",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : "<",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-argument-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ">",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-argument-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-argument",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " | ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-argument",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "code" : ",",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-argument-list",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "generic-argument",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " → ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "type",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Grammar of a generic argument clause",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ]
, 
"references": {
"doc://org.swift.tspl/documentation/TSPL": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/TSPL",
  "kind" : "article",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/tspl"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments#Generic-Parameter-Clause": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments#Generic-Parameter-Clause",
  "kind" : "section",
  "title" : "Generic Parameter Clause",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/genericparametersandarguments#Generic-Parameter-Clause"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics": {
  "abstract" : [
    {
      "text" : "Write code that works for multiple types and specify requirements for those types.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics",
  "kind" : "article",
  "role" : "article",
  "title" : "Generics",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/generics"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses",
  "kind" : "section",
  "title" : "Generic Where Clauses",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses"
}
}
}