{
  "abstract" : [
    {
      "text" : "Model custom types that define a list of possible values.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations"
  },
  "kind" : "article",
  "metadata" : {
    "title" : "Enumerations"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "enumeration",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " defines a common type for a group of related values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and enables you to work with those values in a type-safe way within your code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you are familiar with C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you will know that C enumerations assign related names to a set of integer values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Enumerations in Swift are much more flexible,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and don’t have to provide a value for each case of the enumeration.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If a value (known as a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "raw",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " value) is provided for each enumeration case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value can be a string, a character,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or a value of any integer or floating-point type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Alternatively, enumeration cases can specify",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "associated values of ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "any",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " type to be stored along with each different case value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "much as unions or variants do in other languages.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can define a common set of related cases as part of one enumeration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "each of which has a different set of values of appropriate types associated with it.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Enumerations in Swift are first-class types in their own right.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "They adopt many features traditionally supported only by classes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as computed properties to provide additional information about",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the enumeration’s current value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and instance methods to provide functionality related to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the values the enumeration represents.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Enumerations can also define initializers to provide an initial case value;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can be extended to expand their functionality beyond their original implementation;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can conform to protocols to provide standard functionality.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more about these capabilities, see",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Enumeration-Syntax",
          "level" : 2,
          "text" : "Enumeration Syntax",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You introduce enumerations with the ",
              "type" : "text"
            },
            {
              "code" : "enum",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and place their entire definition within a pair of braces:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum SomeEnumeration {",
            "    \/\/ enumeration definition goes here",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s an example for the four main points of a compass:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum CompassPoint {",
            "    case north",
            "    case south",
            "    case east",
            "    case west",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The values defined in an enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(such as ",
              "type" : "text"
            },
            {
              "code" : "north",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "south",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "east",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "west",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are its ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "enumeration cases",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You use the ",
              "type" : "text"
            },
            {
              "code" : "case",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword to introduce new enumeration cases.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Swift enumeration cases don’t have an integer value set by default,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "unlike languages like C and Objective-C.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "In the ",
                  "type" : "text"
                },
                {
                  "code" : "CompassPoint",
                  "type" : "codeVoice"
                },
                {
                  "text" : " example above,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "north",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "south",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "east",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "west",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "don’t implicitly equal",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "0",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "1",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "2",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "3",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Instead, the different enumeration cases are values in their own right,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "with an explicitly defined type of ",
                  "type" : "text"
                },
                {
                  "code" : "CompassPoint",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Multiple cases can appear on a single line, separated by commas:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum Planet {",
            "    case mercury, venus, earth, mars, jupiter, saturn, uranus, neptune",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Each enumeration definition defines a new type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Like other types in Swift, their names",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(such as ",
              "type" : "text"
            },
            {
              "code" : "CompassPoint",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Planet",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "start with a capital letter.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Give enumeration types singular rather than plural names,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so that they read as self-evident:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var directionToHead = CompassPoint.west"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The type of ",
              "type" : "text"
            },
            {
              "code" : "directionToHead",
              "type" : "codeVoice"
            },
            {
              "text" : " is inferred",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when it’s initialized with one of the possible values of ",
              "type" : "text"
            },
            {
              "code" : "CompassPoint",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Once ",
              "type" : "text"
            },
            {
              "code" : "directionToHead",
              "type" : "codeVoice"
            },
            {
              "text" : " is declared as a ",
              "type" : "text"
            },
            {
              "code" : "CompassPoint",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can set it to a different ",
              "type" : "text"
            },
            {
              "code" : "CompassPoint",
              "type" : "codeVoice"
            },
            {
              "text" : " value using a shorter dot syntax:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "directionToHead = .east"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The type of ",
              "type" : "text"
            },
            {
              "code" : "directionToHead",
              "type" : "codeVoice"
            },
            {
              "text" : " is already known,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so you can drop the type when setting its value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This makes for highly readable code when working with explicitly typed enumeration values.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Matching-Enumeration-Values-with-a-Switch-Statement",
          "level" : 2,
          "text" : "Matching Enumeration Values with a Switch Statement",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can match individual enumeration values with a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "directionToHead = .south",
            "switch directionToHead {",
            "case .north:",
            "    print(\"Lots of planets have a north\")",
            "case .south:",
            "    print(\"Watch out for penguins\")",
            "case .east:",
            "    print(\"Where the sun rises\")",
            "case .west:",
            "    print(\"Where the skies are blue\")",
            "}",
            "\/\/ Prints \"Watch out for penguins\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can read this code as:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "“Consider the value of ",
              "type" : "text"
            },
            {
              "code" : "directionToHead",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the case where it equals ",
              "type" : "text"
            },
            {
              "code" : ".north",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "print ",
              "type" : "text"
            },
            {
              "code" : "\"Lots of planets have a north\"",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the case where it equals ",
              "type" : "text"
            },
            {
              "code" : ".south",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "print ",
              "type" : "text"
            },
            {
              "code" : "\"Watch out for penguins\"",
              "type" : "codeVoice"
            },
            {
              "text" : ".”",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "…and so on.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "As described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " statement must be exhaustive when considering an enumeration’s cases.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the ",
              "type" : "text"
            },
            {
              "code" : "case",
              "type" : "codeVoice"
            },
            {
              "text" : " for ",
              "type" : "text"
            },
            {
              "code" : ".west",
              "type" : "codeVoice"
            },
            {
              "text" : " is omitted,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this code doesn’t compile,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because it doesn’t consider the complete list of ",
              "type" : "text"
            },
            {
              "code" : "CompassPoint",
              "type" : "codeVoice"
            },
            {
              "text" : " cases.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Requiring exhaustiveness ensures that enumeration cases aren’t accidentally omitted.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When it isn’t appropriate to provide a ",
              "type" : "text"
            },
            {
              "code" : "case",
              "type" : "codeVoice"
            },
            {
              "text" : " for every enumeration case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can provide a ",
              "type" : "text"
            },
            {
              "code" : "default",
              "type" : "codeVoice"
            },
            {
              "text" : " case to cover any cases that aren’t addressed explicitly:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let somePlanet = Planet.earth",
            "switch somePlanet {",
            "case .earth:",
            "    print(\"Mostly harmless\")",
            "default:",
            "    print(\"Not a safe place for humans\")",
            "}",
            "\/\/ Prints \"Mostly harmless\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Iterating-over-Enumeration-Cases",
          "level" : 2,
          "text" : "Iterating over Enumeration Cases",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "For some enumerations,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s useful to have a collection of all of that enumeration’s cases.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You enable this by",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "writing ",
              "type" : "text"
            },
            {
              "code" : ": CaseIterable",
              "type" : "codeVoice"
            },
            {
              "text" : " after the enumeration’s name.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift exposes a collection of all the cases",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as an ",
              "type" : "text"
            },
            {
              "code" : "allCases",
              "type" : "codeVoice"
            },
            {
              "text" : " property of the enumeration type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s an example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum Beverage: CaseIterable {",
            "    case coffee, tea, juice",
            "}",
            "let numberOfChoices = Beverage.allCases.count",
            "print(\"\\(numberOfChoices) beverages available\")",
            "\/\/ Prints \"3 beverages available\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you write ",
              "type" : "text"
            },
            {
              "code" : "Beverage.allCases",
              "type" : "codeVoice"
            },
            {
              "text" : " to access a collection",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that contains all of the cases of the ",
              "type" : "text"
            },
            {
              "code" : "Beverage",
              "type" : "codeVoice"
            },
            {
              "text" : " enumeration.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use ",
              "type" : "text"
            },
            {
              "code" : "allCases",
              "type" : "codeVoice"
            },
            {
              "text" : " like any other collection —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the collection’s elements are instances of the enumeration type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so in this case they’re ",
              "type" : "text"
            },
            {
              "code" : "Beverage",
              "type" : "codeVoice"
            },
            {
              "text" : " values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example above counts how many cases there are,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the example below uses a ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop to iterate over all the cases.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for beverage in Beverage.allCases {",
            "    print(beverage)",
            "}",
            "\/\/ coffee",
            "\/\/ tea",
            "\/\/ juice"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The syntax used in the examples above",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "marks the enumeration as conforming to the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/caseiterable",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For information about protocols, see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Associated-Values",
          "level" : 2,
          "text" : "Associated Values",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The examples in the previous section show how the cases of an enumeration are",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a defined (and typed) value in their own right.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can set a constant or variable to ",
              "type" : "text"
            },
            {
              "code" : "Planet.earth",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and check for this value later.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, it’s sometimes useful to be able to store",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "values of other types alongside these case values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This additional information is called an ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "associated value",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and it varies each time you use that case as a value in your code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can define Swift enumerations to store associated values of any given type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the value types can be different for each case of the enumeration if needed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Enumerations similar to these are known as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "discriminated unions",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "tagged unions",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "variants",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in other programming languages.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, suppose an inventory tracking system needs to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "track products by two different types of barcode.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Some products are labeled with 1D barcodes in UPC format,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which uses the numbers ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " to ",
              "type" : "text"
            },
            {
              "code" : "9",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each barcode has a number system digit,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by five manufacturer code digits and five product code digits.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These are followed by a check digit to verify that the code has been scanned correctly:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "barcode_UPC",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Other products are labeled with 2D barcodes in QR code format,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which can use any ISO 8859-1 character",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can encode a string up to 2,953 characters long:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "barcode_QR",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "It’s convenient for an inventory tracking system to store UPC barcodes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as a tuple of four integers,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and QR code barcodes as a string of any length.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In Swift, an enumeration to define product barcodes of either type might look like this:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum Barcode {",
            "    case upc(Int, Int, Int, Int)",
            "    case qrCode(String)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This can be read as:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "“Define an enumeration type called ",
              "type" : "text"
            },
            {
              "code" : "Barcode",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which can take either a value of ",
              "type" : "text"
            },
            {
              "code" : "upc",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with an associated value of type (",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or a value of ",
              "type" : "text"
            },
            {
              "code" : "qrCode",
              "type" : "codeVoice"
            },
            {
              "text" : " with an associated value of type ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".”",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This definition doesn’t provide any actual ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " values —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it just defines the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " of associated values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that ",
              "type" : "text"
            },
            {
              "code" : "Barcode",
              "type" : "codeVoice"
            },
            {
              "text" : " constants and variables can store",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when they’re equal to ",
              "type" : "text"
            },
            {
              "code" : "Barcode.upc",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "Barcode.qrCode",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can then create new barcodes using either type:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var productBarcode = Barcode.upc(8, 85909, 51226, 3)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example creates a new variable called ",
              "type" : "text"
            },
            {
              "code" : "productBarcode",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and assigns it a value of ",
              "type" : "text"
            },
            {
              "code" : "Barcode.upc",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with an associated tuple value of ",
              "type" : "text"
            },
            {
              "code" : "(8, 85909, 51226, 3)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can assign the same product a different type of barcode:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "productBarcode = .qrCode(\"ABCDEFGHIJKLMNOP\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "At this point,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the original ",
              "type" : "text"
            },
            {
              "code" : "Barcode.upc",
              "type" : "codeVoice"
            },
            {
              "text" : " and its integer values are replaced by",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the new ",
              "type" : "text"
            },
            {
              "code" : "Barcode.qrCode",
              "type" : "codeVoice"
            },
            {
              "text" : " and its string value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Constants and variables of type ",
              "type" : "text"
            },
            {
              "code" : "Barcode",
              "type" : "codeVoice"
            },
            {
              "text" : " can store either a ",
              "type" : "text"
            },
            {
              "code" : ".upc",
              "type" : "codeVoice"
            },
            {
              "text" : " or a ",
              "type" : "text"
            },
            {
              "code" : ".qrCode",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(together with their associated values),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but they can store only one of them at any given time.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can check the different barcode types using a switch statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "similar to the example in",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This time, however,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the associated values are extracted as part of the switch statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You extract each associated value as a constant (with the ",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : " prefix)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or a variable (with the ",
              "type" : "text"
            },
            {
              "code" : "var",
              "type" : "codeVoice"
            },
            {
              "text" : " prefix)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for use within the ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " case’s body:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "switch productBarcode {",
            "case .upc(let numberSystem, let manufacturer, let product, let check):",
            "    print(\"UPC: \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")",
            "case .qrCode(let productCode):",
            "    print(\"QR code: \\(productCode).\")",
            "}",
            "\/\/ Prints \"QR code: ABCDEFGHIJKLMNOP.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If all of the associated values for an enumeration case",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are extracted as constants, or if all are extracted as variables,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can place a single ",
              "type" : "text"
            },
            {
              "code" : "var",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : " annotation before the case name, for brevity:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "switch productBarcode {",
            "case let .upc(numberSystem, manufacturer, product, check):",
            "    print(\"UPC : \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")",
            "case let .qrCode(productCode):",
            "    print(\"QR code: \\(productCode).\")",
            "}",
            "\/\/ Prints \"QR code: ABCDEFGHIJKLMNOP.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Raw-Values",
          "level" : 2,
          "text" : "Raw Values",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The barcode example in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Associated-Values",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "shows how cases of an enumeration can declare that they store",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "associated values of different types.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As an alternative to associated values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "enumeration cases can come prepopulated with default values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(called ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "raw values",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which are all of the same type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s an example that stores raw ASCII values alongside named enumeration cases:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum ASCIIControlCharacter: Character {",
            "    case tab = \"\\t\"",
            "    case lineFeed = \"\\n\"",
            "    case carriageReturn = \"\\r\"",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here, the raw values for an enumeration called ",
              "type" : "text"
            },
            {
              "code" : "ASCIIControlCharacter",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are defined to be of type ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and are set to some of the more common ASCII control characters.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Character",
              "type" : "codeVoice"
            },
            {
              "text" : " values are described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Raw values can be",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "strings, characters, or any of the integer or floating-point number types.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each raw value must be unique within its enumeration declaration.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Raw values are ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "not",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " the same as associated values.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Raw values are set to prepopulated values",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "when you first define the enumeration in your code,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "like the three ASCII codes above.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The raw value for a particular enumeration case is always the same.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Associated values are set when you create a new constant or variable",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "based on one of the enumeration’s cases,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and can be different each time you do so.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Implicitly-Assigned-Raw-Values",
          "level" : 3,
          "text" : "Implicitly Assigned Raw Values",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you’re working with enumerations that store integer or string raw values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you don’t have to explicitly assign a raw value for each case.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you don’t, Swift automatically assigns the values for you.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, when integers are used for raw values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the implicit value for each case is one more than the previous case.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the first case doesn’t have a value set, its value is ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The enumeration below is a refinement of the earlier ",
              "type" : "text"
            },
            {
              "code" : "Planet",
              "type" : "codeVoice"
            },
            {
              "text" : " enumeration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with integer raw values to represent each planet’s order from the sun:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum Planet: Int {",
            "    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Planet.mercury",
              "type" : "codeVoice"
            },
            {
              "text" : " has an explicit raw value of ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Planet.venus",
              "type" : "codeVoice"
            },
            {
              "text" : " has an implicit raw value of ",
              "type" : "text"
            },
            {
              "code" : "2",
              "type" : "codeVoice"
            },
            {
              "text" : ", and so on.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When strings are used for raw values,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the implicit value for each case is the text of that case’s name.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The enumeration below is a refinement of the earlier ",
              "type" : "text"
            },
            {
              "code" : "CompassPoint",
              "type" : "codeVoice"
            },
            {
              "text" : " enumeration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with string raw values to represent each direction’s name:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum CompassPoint: String {",
            "    case north, south, east, west",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "CompassPoint.south",
              "type" : "codeVoice"
            },
            {
              "text" : " has an implicit raw value of ",
              "type" : "text"
            },
            {
              "code" : "\"south\"",
              "type" : "codeVoice"
            },
            {
              "text" : ", and so on.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You access the raw value of an enumeration case with its ",
              "type" : "text"
            },
            {
              "code" : "rawValue",
              "type" : "codeVoice"
            },
            {
              "text" : " property:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let earthsOrder = Planet.earth.rawValue",
            "\/\/ earthsOrder is 3",
            "",
            "let sunsetDirection = CompassPoint.west.rawValue",
            "\/\/ sunsetDirection is \"west\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Initializing-from-a-Raw-Value",
          "level" : 3,
          "text" : "Initializing from a Raw Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you define an enumeration with a raw-value type,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the enumeration automatically receives an initializer",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that takes a value of the raw value’s type (as a parameter called ",
              "type" : "text"
            },
            {
              "code" : "rawValue",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and returns either an enumeration case or ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can use this initializer to try to create a new instance of the enumeration.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example identifies Uranus from its raw value of ",
              "type" : "text"
            },
            {
              "code" : "7",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let possiblePlanet = Planet(rawValue: 7)",
            "\/\/ possiblePlanet is of type Planet? and equals Planet.uranus"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Not all possible ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " values will find a matching planet, however.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because of this, the raw value initializer always returns an ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "optional",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " enumeration case.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the example above, ",
              "type" : "text"
            },
            {
              "code" : "possiblePlanet",
              "type" : "codeVoice"
            },
            {
              "text" : " is of type ",
              "type" : "text"
            },
            {
              "code" : "Planet?",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or “optional ",
              "type" : "text"
            },
            {
              "code" : "Planet",
              "type" : "codeVoice"
            },
            {
              "text" : ".”",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The raw value initializer is a failable initializer,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "because not every raw value will return an enumeration case.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "For more information, see ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Failable-Initializers",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you try to find a planet with a position of ",
              "type" : "text"
            },
            {
              "code" : "11",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the optional ",
              "type" : "text"
            },
            {
              "code" : "Planet",
              "type" : "codeVoice"
            },
            {
              "text" : " value returned by the raw value initializer will be ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let positionToFind = 11",
            "if let somePlanet = Planet(rawValue: positionToFind) {",
            "    switch somePlanet {",
            "    case .earth:",
            "        print(\"Mostly harmless\")",
            "    default:",
            "        print(\"Not a safe place for humans\")",
            "    }",
            "} else {",
            "    print(\"There isn't a planet at position \\(positionToFind)\")",
            "}",
            "\/\/ Prints \"There isn't a planet at position 11\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example uses optional binding to try to access a planet with a raw value of ",
              "type" : "text"
            },
            {
              "code" : "11",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The statement ",
              "type" : "text"
            },
            {
              "code" : "if let somePlanet = Planet(rawValue: 11)",
              "type" : "codeVoice"
            },
            {
              "text" : " creates an optional ",
              "type" : "text"
            },
            {
              "code" : "Planet",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and sets ",
              "type" : "text"
            },
            {
              "code" : "somePlanet",
              "type" : "codeVoice"
            },
            {
              "text" : " to the value of that optional ",
              "type" : "text"
            },
            {
              "code" : "Planet",
              "type" : "codeVoice"
            },
            {
              "text" : " if it can be retrieved.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In this case, it isn’t possible to retrieve a planet with a position of ",
              "type" : "text"
            },
            {
              "code" : "11",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so the ",
              "type" : "text"
            },
            {
              "code" : "else",
              "type" : "codeVoice"
            },
            {
              "text" : " branch is executed instead.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Recursive-Enumerations",
          "level" : 2,
          "text" : "Recursive Enumerations",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "recursive enumeration",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is an enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that has another instance of the enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as the associated value for one or more of the enumeration cases.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You indicate that an enumeration case is recursive",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by writing ",
              "type" : "text"
            },
            {
              "code" : "indirect",
              "type" : "codeVoice"
            },
            {
              "text" : " before it,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which tells the compiler to insert the necessary layer of indirection.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, here is an enumeration that stores simple arithmetic expressions:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum ArithmeticExpression {",
            "    case number(Int)",
            "    indirect case addition(ArithmeticExpression, ArithmeticExpression)",
            "    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also write ",
              "type" : "text"
            },
            {
              "code" : "indirect",
              "type" : "codeVoice"
            },
            {
              "text" : " before the beginning of the enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to enable indirection for all of the enumeration’s cases that have an associated value:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "indirect enum ArithmeticExpression {",
            "    case number(Int)",
            "    case addition(ArithmeticExpression, ArithmeticExpression)",
            "    case multiplication(ArithmeticExpression, ArithmeticExpression)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This enumeration can store three kinds of arithmetic expressions:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a plain number,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the addition of two expressions,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the multiplication of two expressions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "addition",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "multiplication",
              "type" : "codeVoice"
            },
            {
              "text" : " cases have associated values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that are also arithmetic expressions —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "these associated values make it possible to nest expressions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, the expression ",
              "type" : "text"
            },
            {
              "code" : "(5 + 4) * 2",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "has a number on the right-hand side of the multiplication",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and another expression on the left-hand side of the multiplication.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because the data is nested,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the enumeration used to store the data also needs to support nesting —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this means the enumeration needs to be recursive.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The code below shows the ",
              "type" : "text"
            },
            {
              "code" : "ArithmeticExpression",
              "type" : "codeVoice"
            },
            {
              "text" : " recursive enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "being created for ",
              "type" : "text"
            },
            {
              "code" : "(5 + 4) * 2",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let five = ArithmeticExpression.number(5)",
            "let four = ArithmeticExpression.number(4)",
            "let sum = ArithmeticExpression.addition(five, four)",
            "let product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A recursive function is a straightforward way",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to work with data that has a recursive structure.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, here’s a function that evaluates an arithmetic expression:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func evaluate(_ expression: ArithmeticExpression) -> Int {",
            "    switch expression {",
            "    case let .number(value):",
            "        return value",
            "    case let .addition(left, right):",
            "        return evaluate(left) + evaluate(right)",
            "    case let .multiplication(left, right):",
            "        return evaluate(left) * evaluate(right)",
            "    }",
            "}",
            "",
            "print(evaluate(product))",
            "\/\/ Prints \"18\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This function evaluates a plain number",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by simply returning the associated value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It evaluates an addition or multiplication",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by evaluating the expression on the left-hand side,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "evaluating the expression on the right-hand side,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and then adding them or multiplying them.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ]
, 
"references": {
"barcode_QR": {
  "alt" : null,
  "identifier" : "barcode_QR",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/barcode_QR@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/barcode_QR~dark@2x.png"
    }
  ]
},
"barcode_UPC": {
  "alt" : null,
  "identifier" : "barcode_UPC",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "2x",
        "light"
      ],
      "url" : "\/images\/barcode_UPC@2x.png"
    },
    {
      "traits" : [
        "2x",
        "dark"
      ],
      "url" : "\/images\/barcode_UPC~dark@2x.png"
    }
  ]
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language",
  "kind" : "article",
  "role" : "collection",
  "title" : "The Swift Programming Language",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow": {
  "abstract" : [
    {
      "text" : "Structure code with branches, loops, and early exits.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
  "kind" : "article",
  "role" : "article",
  "title" : "Control Flow",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Failable-Initializers": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Failable-Initializers",
  "kind" : "section",
  "title" : "Failable Initializers",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/declarations#Failable-Initializers"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Associated-Values": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Associated-Values",
  "kind" : "section",
  "title" : "Associated Values",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/enumerations#Associated-Values"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement",
  "kind" : "section",
  "title" : "Matching Enumeration Values with a Switch Statement",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/enumerations#Matching-Enumeration-Values-with-a-Switch-Statement"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions": {
  "abstract" : [
    {
      "text" : "Add functionality to an existing type.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions",
  "kind" : "article",
  "role" : "article",
  "title" : "Extensions",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/extensions"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization": {
  "abstract" : [
    {
      "text" : "Set the initial values for a type’s stored properties and perform one-time setup.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization",
  "kind" : "article",
  "role" : "article",
  "title" : "Initialization",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/initialization"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods": {
  "abstract" : [
    {
      "text" : "Define and call functions that are part of an instance or type.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods",
  "kind" : "article",
  "role" : "article",
  "title" : "Methods",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/methods"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties": {
  "abstract" : [
    {
      "text" : "Access stored and computed values that are part of an instance or type.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties",
  "kind" : "article",
  "role" : "article",
  "title" : "Properties",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/properties"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols": {
  "abstract" : [
    {
      "text" : "Define requirements that conforming types must implement.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols",
  "kind" : "article",
  "role" : "article",
  "title" : "Protocols",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/protocols"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters": {
  "abstract" : [
    {
      "text" : "Store and manipulate text.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters",
  "kind" : "article",
  "role" : "article",
  "title" : "Strings and Characters",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/stringsandcharacters"
},
"https://developer.apple.com/documentation/swift/caseiterable": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/caseiterable",
  "title" : "CaseIterable",
  "titleInlineContent" : [
    {
      "code" : "CaseIterable",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/caseiterable"
}
}
}